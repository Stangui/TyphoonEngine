.TH "md__typhoon__third_party__spd_log__r_e_a_d_m_e" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__typhoon__third_party__spd_log__r_e_a_d_m_e \- spdlog 
Very fast, header-only/compiled, C++ logging library\&. \fC\fP  \fC\fP
.PP
.SS "Install"
.PP
.SS "Header only version"
.PP
.IP "\(bu" 2
Copy the source \fCfolder\fP to your build tree and use a C++11 compiler\&.
.PP
.PP
.SS "Static lib version (recommended - much faster compile times, v1\&.4\&.0)"
.PP
.IP "\(bu" 2
Copy \fCsrc/spdlog\&.cpp\fP to your build tree and pass the \fC-DSPDLOG_COMPILED_LIB\fP to the compiler\&.
.IP "\(bu" 2
Or use \fBCMake\fP to build and use\&. See \fCexample\fP\&.
.PP
.PP
.SS "Platforms"
.PP
.IP "\(bu" 2
Linux, FreeBSD, OpenBSD, Solaris, AIX
.IP "\(bu" 2
Windows (msvc 2013+, cygwin)
.IP "\(bu" 2
macOS (clang 3\&.5+)
.IP "\(bu" 2
Android
.PP
.PP
.SS "Package managers:"
.PP
.IP "\(bu" 2
Homebrew: \fCbrew install spdlog\fP
.IP "\(bu" 2
FreeBSD: \fCcd /usr/ports/devel/spdlog/ && make install clean\fP
.IP "\(bu" 2
Fedora: \fCyum install spdlog\fP
.IP "\(bu" 2
Gentoo: \fCemerge dev-libs/spdlog\fP
.IP "\(bu" 2
Arch Linux: \fCyaourt -S spdlog-git\fP
.IP "\(bu" 2
vcpkg: \fCvcpkg install spdlog\fP
.PP
.PP
.SS "Features"
.PP
.IP "\(bu" 2
Very fast (see \fCbenchmarks\fP below)\&.
.IP "\(bu" 2
Headers only, just copy and use\&. Or use as a compiled library\&.
.IP "\(bu" 2
Feature rich formatting, using the excellent \fCfmt\fP library\&.
.IP "\(bu" 2
Fast asynchronous mode (optional)
.IP "\(bu" 2
\fCCustom\fP formatting\&.
.IP "\(bu" 2
Multi/Single threaded loggers\&.
.IP "\(bu" 2
Various log targets:
.IP "  \(bu" 4
Rotating log files\&.
.IP "  \(bu" 4
Daily log files\&.
.IP "  \(bu" 4
Console logging (colors supported)\&.
.IP "  \(bu" 4
syslog\&.
.IP "  \(bu" 4
Windows debugger (\fCOutputDebugString(\&.\&.)\fP)
.IP "  \(bu" 4
Easily extendable with custom log targets (just implement a single function in the \fCsink\fP interface)\&.
.PP

.IP "\(bu" 2
Severity based filtering - threshold levels can be modified in runtime as well as in compile time\&.
.PP
.PP
.SS "Usage samples"
.PP
#### Basic usage 
.PP
.nf
 {c++}
#include "spdlog/spdlog\&.h"
#include "spdlog/sinks/basic_file_sink\&.h"

int main() 
{
    spdlog::info("Welcome to spdlog!");
    spdlog::error("Some error message with arg: {}", 1);
    
    spdlog::warn("Easy padding in numbers like {:08d}", 12);
    spdlog::critical("Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}", 42);
    spdlog::info("Support for floats {:03\&.2f}", 1\&.23456);
    spdlog::info("Positional args are {1} {0}\&.\&.", "too", "supported");
    spdlog::info("{:<30}", "left aligned");
    
    spdlog::set_level(spdlog::level::debug); // Set global log level to debug
    spdlog::debug("This message should be displayed\&.\&.");    
    
    // change log pattern
    spdlog::set_pattern("[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v");
    
    // Compile time log levels
    // define SPDLOG_ACTIVE_LEVEL to desired level
    SPDLOG_TRACE("Some trace message with param {}", {});
    SPDLOG_DEBUG("Some debug message");
    
    // Set the default logger to file logger
    auto file_logger = spdlog::basic_logger_mt("basic_logger", "logs/basic\&.txt");
    spdlog::set_default_logger(file_logger);            
}

.fi
.PP
 #### create stdout/stderr logger object 
.PP
.nf
 {c++}
#include "spdlog/spdlog\&.h"
#include "spdlog/sinks/stdout_color_sinks\&.h"
void stdout_example()
{
    // create color multi threaded logger
    auto console = spdlog::stdout_color_mt("console");    
    auto err_logger = spdlog::stderr_color_mt("stderr");    
    spdlog::get("console")->info("loggers can be retrieved from a global registry using the spdlog::get(logger_name)");
}

.fi
.PP
 
.PP
 #### Basic file logger 
.PP
.nf
 {c++}
#include "spdlog/sinks/basic_file_sink\&.h"
void basic_logfile_example()
{
    try 
    {
        auto my_logger = spdlog::basic_logger_mt("basic_logger", "logs/basic-log\&.txt");
    }
    catch (const spdlog::spdlog_ex &ex)
    {
        std::cout << "Log init failed: " << ex\&.what() << std::endl;
    }
}

.fi
.PP
 
.PP
 #### Rotating files 
.PP
.nf
 {c++}
#include "spdlog/sinks/rotating_file_sink\&.h"
void rotating_example()
{
    // Create a file rotating logger with 5mb size max and 3 rotated files
    auto rotating_logger = spdlog::rotating_logger_mt("some_logger_name", "logs/rotating\&.txt", 1048576 * 5, 3);
}

.fi
.PP
.PP
.PP
 #### Daily files 
.PP
.nf
 {c++}

#include "spdlog/sinks/daily_file_sink\&.h"
void daily_example()
{
    // Create a daily logger - a new file is created every day on 2:30am
    auto daily_logger = spdlog::daily_logger_mt("daily_logger", "logs/daily\&.txt", 2, 30);
}

.fi
.PP
.PP
.PP
 #### Cloning loggers 
.PP
.nf
 {c++}
// clone a logger and give it new name\&.
// Useful for creating subsystem loggers from some "root" logger
void clone_example()
{
    auto network_logger = spdlog::get("root")->clone("network");
    network_logger->info("Logging network stuff\&.\&.");
}

.fi
.PP
.PP
.PP
 #### Periodic flush 
.PP
.nf
 {c++}
// periodically flush all *registered* loggers every 3 seconds:
// warning: only use if all your loggers are thread safe!
spdlog::flush_every(std::chrono::seconds(3));

.fi
.PP
.PP
.PP
 #### Binary logging 
.PP
.nf
 {c++}
// log binary data as hex\&.
// many types of std::container<char> types can be used\&.
// ranges are supported too\&.
// format flags:
// {:X} - print in uppercase\&.
// {:s} - don't separate each byte with space\&.
// {:p} - don't print the position on each line start\&.
// {:n} - don't split the output to lines\&.

#include "spdlog/fmt/bin_to_hex\&.h"

void binary_example()
{
    auto console = spdlog::get("console");
    std::array<char, 80> buf;
    console->info("Binary example: {}", spdlog::to_hex(buf));
    console->info("Another binary example:{:n}", spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));
    // more examples:
    // logger->info("uppercase: {:X}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters: {:Xs}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters, no position info: {:Xsp}", spdlog::to_hex(buf));
}

.fi
.PP
.PP
.PP
 #### Logger with multi sinks - each with different format and log level 
.PP
.nf
 {c++}

// create logger with 2 targets with different log levels and formats\&.
// the console will show only warnings or errors, while the file will log all\&.
void multi_sink_example()
{
    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
    console_sink->set_level(spdlog::level::warn);
    console_sink->set_pattern("[multi_sink_example] [%^%l%$] %v");

    auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>("logs/multisink\&.txt", true);
    file_sink->set_level(spdlog::level::trace);

    spdlog::logger logger("multi_sink", {console_sink, file_sink});
    logger\&.set_level(spdlog::level::debug);
    logger\&.warn("this should appear in both console and file");
    logger\&.info("this message should not appear in the console, only in the file");
}

.fi
.PP
.PP
.PP
 #### Asynchronous logging 
.PP
.nf
 {c++}
#include "spdlog/async\&.h"
#include "spdlog/sinks/basic_file_sink\&.h"
void async_example()
{
    // default thread pool settings can be modified *before* creating the async logger:
    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread\&.
    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>("async_file_logger", "logs/async_log\&.txt");
    // alternatively:
    // auto async_file = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>("async_file_logger", "logs/async_log\&.txt");   
}

.fi
.PP
.PP
.PP
 #### Asynchronous logger with multi sinks 
.PP
.nf
 {c++}
#include "spdlog/sinks/stdout_color_sinks\&.h"
#include "spdlog/sinks/rotating_file_sink\&.h"

void multi_sink_example2()
{
    spdlog::init_thread_pool(8192, 1);
    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();
    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>("mylog\&.txt", 1024*1024*10, 3);
    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};
    auto logger = std::make_shared<spdlog::async_logger>("loggername", sinks\&.begin(), sinks\&.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
    spdlog::register_logger(logger);
}

.fi
.PP
.PP
.PP
 #### User defined types 
.PP
.nf
 {c++}
// user defined types logging by implementing operator<<
#include "spdlog/fmt/ostr\&.h" // must be included
struct my_type
{
    int i;
    template<typename OStream>
    friend OStream &operator<<(OStream &os, const my_type &c)
    {
        return os << "[my_type i=" << c\&.i << "]";
    }
};

void user_defined_example()
{
    spdlog::get("console")->info("user defined type: {}", my_type{14});
}

.fi
.PP
 
.PP
 #### Custom error handler 
.PP
.nf
 {c++}
void err_handler_example()
{
    // can be set globally or per logger(logger->set_error_handler(\&.\&.))
    spdlog::set_error_handler([](const std::string &msg) { spdlog::get("console")->error("*** LOGGER ERROR ***: {}", msg); });
    spdlog::get("console")->info("some invalid message to trigger an error {}{}{}{}", 3);
}

.fi
.PP
 
.PP
 #### syslog 
.PP
.nf
 {c++}
#include "spdlog/sinks/syslog_sink\&.h"
void syslog_example()
{
    std::string ident = "spdlog-example";
    auto syslog_logger = spdlog::syslog_logger_mt("syslog", ident, LOG_PID);
    syslog_logger->warn("This is warning that will end up in syslog\&.");
}

.fi
.PP
 
.PP
 #### Android example 
.PP
.nf
 {c++}
#include "spdlog/sinks/android_sink\&.h"
void android_example()
{
    std::string tag = "spdlog-android";
    auto android_logger = spdlog::android_logger_mt("android", tag);
    android_logger->critical("Use \"adb shell logcat\" to view this message\&.");
}

.fi
.PP
.PP
.SS "Benchmarks"
.PP
Below are some \fCbenchmarks\fP done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3\&.40GHz
.PP
#### Synchronous mode 
.PP
.nf
[info] **************************************************************
[info] Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0\&.17 secs        5,777,626/sec
[info] rotating_st      Elapsed: 0\&.18 secs        5,475,894/sec
[info] daily_st         Elapsed: 0\&.20 secs        5,062,659/sec
[info] empty_logger     Elapsed: 0\&.07 secs       14,127,300/sec
[info] **************************************************************
[info] C-string (400 bytes)\&. Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0\&.41 secs        2,412,483/sec
[info] rotating_st      Elapsed: 0\&.72 secs        1,389,196/sec
[info] daily_st         Elapsed: 0\&.42 secs        2,393,298/sec
[info] null_st          Elapsed: 0\&.04 secs       27,446,957/sec
[info] **************************************************************
[info] 10 threads sharing same logger, 1,000,000 iterations
[info] **************************************************************
[info] basic_mt         Elapsed: 0\&.60 secs        1,659,613/sec
[info] rotating_mt      Elapsed: 0\&.62 secs        1,612,493/sec
[info] daily_mt         Elapsed: 0\&.61 secs        1,638,305/sec
[info] null_mt          Elapsed: 0\&.16 secs        6,272,758/sec

.fi
.PP
 #### ASynchronous mode 
.PP
.nf
[info] -------------------------------------------------
[info] Messages     : 1,000,000
[info] Threads      : 10
[info] Queue        : 8,192 slots
[info] Queue memory : 8,192 x 272 = 2,176 KB 
[info] Total iters  : 3
[info] -------------------------------------------------
[info] 
[info] *********************************
[info] Queue Overflow Policy: block
[info] *********************************
[info] Elapsed: 1\&.70784 secs     585,535/sec
[info] Elapsed: 1\&.69805 secs     588,910/sec
[info] Elapsed: 1\&.7026 secs      587,337/sec
[info] 
[info] *********************************
[info] Queue Overflow Policy: overrun
[info] *********************************
[info] Elapsed: 0\&.372816 secs    2,682,285/sec
[info] Elapsed: 0\&.379758 secs    2,633,255/sec
[info] Elapsed: 0\&.373532 secs    2,677,147/sec

.fi
.PP
.PP
.SS "Documentation"
.PP
Documentation can be found in the \fCwiki\fP pages\&. 
