.TH "build_guide" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
build_guide \- Building applications 
This is about compiling and linking applications that use GLFW\&. For information on how to write such applications, start with the \fBintroductory tutorial\fP\&. For information on how to compile the GLFW library itself, see \fBCompiling GLFW\fP\&.
.PP
This is not a tutorial on compilation or linking\&. It assumes basic understanding of how to compile and link a C program as well as how to use the specific compiler of your chosen development environment\&. The compilation and linking process should be explained in your C programming material and in the documentation for your development environment\&.
.SH "Including the GLFW header file"
.PP
You should include the GLFW header in the source files where you use OpenGL or GLFW\&.
.PP
.PP
.nf
#include <GLFW/glfw3\&.h>
.fi
.PP
.PP
This header declares the GLFW API and by default also includes the OpenGL header from your development environment\&. See below for how to control this\&.
.PP
The GLFW header also defines any platform-specific macros needed by your OpenGL header, so it can be included without needing any window system headers\&.
.PP
For example, under Windows you are normally required to include \fCwindows\&.h\fP before the OpenGL header, which would bring in the whole Win32 API\&. The GLFW header duplicates the small number of macros needed\&.
.PP
It does this only when needed, so if \fCwindows\&.h\fP \fIis\fP included, the GLFW header does not try to redefine those symbols\&. The reverse is not true, i\&.e\&. \fCwindows\&.h\fP cannot cope if any of its symbols have already been defined\&.
.PP
In other words:
.PP
.IP "\(bu" 2
Do \fInot\fP include the OpenGL headers yourself, as GLFW does this for you
.IP "\(bu" 2
Do \fInot\fP include \fCwindows\&.h\fP or other platform-specific headers unless you plan on using those APIs directly
.IP "\(bu" 2
If you \fIdo\fP need to include such headers, do it \fIbefore\fP including the GLFW header and it will handle this
.PP
.PP
If you are using an OpenGL extension loading library such as \fCglad\fP, the extension loader header should be included \fIbefore\fP the GLFW one\&.
.PP
.PP
.nf
#include <glad/gl\&.h>
#include <GLFW/glfw3\&.h>
.fi
.PP
.PP
Alternatively the \fBGLFW_INCLUDE_NONE\fP macro (described below) can be used to prevent the GLFW header from including the OpenGL header\&.
.PP
.PP
.nf
#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3\&.h>
#include <glad/gl\&.h>
.fi
.PP
.SS "GLFW header option macros"
These macros may be defined before the inclusion of the GLFW header and affect its behavior\&.
.PP
\fBGLFW_DLL\fP is required on Windows when using the GLFW DLL, to tell the compiler that the GLFW functions are defined in a DLL\&.
.PP
The following macros control which OpenGL or OpenGL ES API header is included\&. Only one of these may be defined at a time\&.
.PP
\fBGLFW_INCLUDE_GLCOREARB\fP makes the GLFW header include the modern \fC\fBGL/glcorearb\&.h\fP\fP header (\fCOpenGL/gl3\&.h\fP on macOS) instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_ES1\fP makes the GLFW header include the OpenGL ES 1\&.x \fCGLES/gl\&.h\fP header instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_ES2\fP makes the GLFW header include the OpenGL ES 2\&.0 \fCGLES2/gl2\&.h\fP header instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_ES3\fP makes the GLFW header include the OpenGL ES 3\&.0 \fCGLES3/gl3\&.h\fP header instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_ES31\fP makes the GLFW header include the OpenGL ES 3\&.1 \fCGLES3/gl31\&.h\fP header instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_ES31\fP makes the GLFW header include the OpenGL ES 3\&.2 \fCGLES3/gl32\&.h\fP header instead of the regular OpenGL header\&.
.PP
\fBGLFW_INCLUDE_NONE\fP makes the GLFW header not include any OpenGL or OpenGL ES API header\&. This is useful in combination with an extension loading library\&.
.PP
If none of the above inclusion macros are defined, the standard OpenGL \fCGL/gl\&.h\fP header (\fCOpenGL/gl\&.h\fP on macOS) is included\&.
.PP
The following macros control the inclusion of additional API headers\&. Any number of these may be defined simultaneously, and/or together with one of the above macros\&.
.PP
\fBGLFW_INCLUDE_VULKAN\fP makes the GLFW header include the Vulkan \fCvulkan/vulkan\&.h\fP header in addition to any selected OpenGL or OpenGL ES header\&.
.PP
\fBGLFW_INCLUDE_GLEXT\fP makes the GLFW header include the appropriate extension header for the OpenGL or OpenGL ES header selected above after and in addition to that header\&.
.PP
\fBGLFW_INCLUDE_GLU\fP makes the header include the GLU header in addition to the header selected above\&. This should only be used with the standard OpenGL header and only for compatibility with legacy code\&. GLU has been deprecated and should not be used in new code\&.
.PP
\fBNote:\fP
.RS 4
GLFW does not provide any of the API headers mentioned above\&. They must be provided by your development environment or your OpenGL, OpenGL ES or Vulkan SDK\&.
.PP
None of these macros may be defined during the compilation of GLFW itself\&. If your build includes GLFW and you define any these in your build files, make sure they are not applied to the GLFW sources\&.
.RE
.PP
.SH "Link with the right libraries"
.PP
GLFW is essentially a wrapper of various platform-specific APIs and therefore needs to link against many different system libraries\&. If you are using GLFW as a shared library / dynamic library / DLL then it takes care of these links\&. However, if you are using GLFW as a static library then your executable will need to link against these libraries\&.
.PP
On Windows and macOS, the list of system libraries is static and can be hard-coded into your build environment\&. See the section for your development environment below\&. On Linux and other Unix-like operating systems, the list varies but can be retrieved in various ways as described below\&.
.PP
A good general introduction to linking is \fCBeginner's Guide to Linkers\fP by David Drysdale\&.
.SS "With MinGW or Visual C++ on Windows"
The static version of the GLFW library is named \fCglfw3\fP\&. When using this version, it is also necessary to link with some libraries that GLFW uses\&.
.PP
When using MinGW to link an application with the static version of GLFW, you must also explicitly link with \fCgdi32\fP\&. Other toolchains including MinGW-w64 include it in the set of default libraries along with other dependencies like \fCuser32\fP and \fCkernel32\fP\&.
.PP
If you are using GLU, you must also link with \fCglu32\fP\&.
.PP
The link library for the GLFW DLL is named \fCglfw3dll\fP\&. When compiling an application that uses the DLL version of GLFW, you need to define the \fBGLFW_DLL\fP macro \fIbefore\fP any inclusion of the GLFW header\&. This can be done either with a compiler switch or by defining it in your source code\&.
.PP
An application using the GLFW DLL does not need to link against any of its dependencies, but you still have to link against \fCglu32\fP if it uses GLU\&.
.SS "With CMake and GLFW source"
This section is about using CMake to compile and link GLFW along with your application\&. If you want to use an installed binary instead, see \fBWith CMake and installed GLFW binaries\fP\&.
.PP
With a few changes to your \fCCMakeLists\&.txt\fP you can have the GLFW source tree built along with your application\&.
.PP
Add the root directory of the GLFW source tree to your project\&. This will add the \fCglfw\fP target and the necessary cache variables to your project\&.
.PP
.PP
.nf
add_subdirectory(path/to/glfw)
.fi
.PP
.PP
Once GLFW has been added to the project, link against it with the \fCglfw\fP target\&. This adds all link-time dependencies of GLFW as it is currently configured, the include directory for the GLFW header and, when applicable, the \fBGLFW_DLL\fP macro\&.
.PP
.PP
.nf
target_link_libraries(myapp glfw)
.fi
.PP
.PP
Note that the dependencies do not include OpenGL or GLU, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime and does not use GLU\&. If your application calls OpenGL directly, instead of using a modern \fBextension loader library\fP you can find it by requiring the OpenGL package\&.
.PP
.PP
.nf
find_package(OpenGL REQUIRED)
.fi
.PP
.PP
If OpenGL is found, the \fCOPENGL_FOUND\fP variable is true and the \fCOPENGL_INCLUDE_DIR\fP and \fCOPENGL_gl_LIBRARY\fP cache variables can be used\&.
.PP
.PP
.nf
target_include_directories(myapp PUBLIC ${OPENGL_INCLUDE_DIR})
target_link_libraries(myapp ${OPENGL_gl_LIBRARY})
.fi
.PP
.PP
The OpenGL CMake package also looks for GLU\&. If GLU is found, the \fCOPENGL_GLU_FOUND\fP variable is true and the \fCOPENGL_INCLUDE_DIR\fP and \fCOPENGL_glu_LIBRARY\fP cache variables can be used\&.
.PP
.PP
.nf
target_link_libraries(myapp ${OPENGL_glu_LIBRARY})
.fi
.PP
.PP
\fBNote:\fP
.RS 4
GLU has been deprecated and should not be used in new code, but some legacy code requires it\&. See the \fBsection on GLU\fP in the transition guide for suggested replacements\&.
.RE
.PP
.SS "With CMake and installed GLFW binaries"
This section is about using CMake to link GLFW after it has been built and installed\&. If you want to build it along with your application instead, see \fBWith CMake and GLFW source\fP\&.
.PP
With a few changes to your \fCCMakeLists\&.txt\fP you can locate the package and target files generated when GLFW is installed\&.
.PP
.PP
.nf
find_package(glfw3 3\&.4 REQUIRED)
.fi
.PP
.PP
Once GLFW has been added to the project, link against it with the \fCglfw\fP target\&. This adds all link-time dependencies of GLFW as it is currently configured, the include directory for the GLFW header and, when applicable, the \fBGLFW_DLL\fP macro\&.
.PP
.PP
.nf
target_link_libraries(myapp glfw)
.fi
.PP
.PP
Note that the dependencies do not include OpenGL or GLU, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime and does not use GLU\&. If your application calls OpenGL directly, instead of using a modern \fBextension loader library\fP you can find it by requiring the OpenGL package\&.
.PP
.PP
.nf
find_package(OpenGL REQUIRED)
.fi
.PP
.PP
If OpenGL is found, the \fCOPENGL_FOUND\fP variable is true and the \fCOPENGL_INCLUDE_DIR\fP and \fCOPENGL_gl_LIBRARY\fP cache variables can be used\&.
.PP
.PP
.nf
target_include_directories(myapp PUBLIC ${OPENGL_INCLUDE_DIR})
target_link_libraries(myapp ${OPENGL_gl_LIBRARY})
.fi
.PP
.PP
The OpenGL CMake package also looks for GLU\&. If GLU is found, the \fCOPENGL_GLU_FOUND\fP variable is true and the \fCOPENGL_INCLUDE_DIR\fP and \fCOPENGL_glu_LIBRARY\fP cache variables can be used\&.
.PP
.PP
.nf
target_link_libraries(myapp ${OPENGL_glu_LIBRARY})
.fi
.PP
.PP
\fBNote:\fP
.RS 4
GLU has been deprecated and should not be used in new code, but some legacy code requires it\&. See the \fBsection on GLU\fP in the transition guide for suggested replacements\&.
.RE
.PP
.SS "With makefiles and pkg-config on Unix"
GLFW supports \fCpkg-config\fP, and the \fCglfw3\&.pc\fP pkg-config file is generated when the GLFW library is built and is installed along with it\&. A pkg-config file describes all necessary compile-time and link-time flags and dependencies needed to use a library\&. When they are updated or if they differ between systems, you will get the correct ones automatically\&.
.PP
A typical compile and link command-line when using the static version of the GLFW library may look like this:
.PP
.PP
.nf
cc `pkg-config --cflags glfw3` -o myprog myprog\&.c `pkg-config --static --libs glfw3`
.fi
.PP
.PP
If you are using the shared version of the GLFW library, omit the \fC--static\fP flag\&.
.PP
.PP
.nf
cc `pkg-config --cflags glfw3` -o myprog myprog\&.c `pkg-config --libs glfw3`
.fi
.PP
.PP
You can also use the \fCglfw3\&.pc\fP file without installing it first, by using the \fCPKG_CONFIG_PATH\fP environment variable\&.
.PP
.PP
.nf
env PKG_CONFIG_PATH=path/to/glfw/src cc `pkg-config --cflags glfw3` -o myprog myprog\&.c `pkg-config --libs glfw3`
.fi
.PP
.PP
The dependencies do not include OpenGL or GLU, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime and does not use GLU\&. On macOS, GLU is built into the OpenGL framework, so if you need GLU you don't need to do anything extra\&. If you need GLU and are using Linux or BSD, you should add the \fCglu\fP pkg-config package\&.
.PP
.PP
.nf
cc `pkg-config --cflags glfw3 glu` -o myprog myprog\&.c `pkg-config --libs glfw3 glu`
.fi
.PP
.PP
\fBNote:\fP
.RS 4
GLU has been deprecated and should not be used in new code, but some legacy code requires it\&. See the \fBsection on GLU\fP in the transition guide for suggested replacements\&.
.RE
.PP
If you are using the static version of the GLFW library, make sure you don't link statically against GLU\&.
.PP
.PP
.nf
cc `pkg-config --cflags glfw3 glu` -o myprog myprog\&.c `pkg-config --static --libs glfw3` `pkg-config --libs glu`
.fi
.PP
.SS "With Xcode on macOS"
If you are using the dynamic library version of GLFW, add it to the project dependencies\&.
.PP
If you are using the static library version of GLFW, add it and the Cocoa, OpenGL, IOKit and CoreVideo frameworks to the project as dependencies\&. They can all be found in \fC/System/Library/Frameworks\fP\&.
.SS "With command-line on macOS"
It is recommended that you use \fBpkg-config\fP when building from the command line on macOS\&. That way you will get any new dependencies added automatically\&. If you still wish to build manually, you need to add the required frameworks and libraries to your command-line yourself using the \fC-l\fP and \fC-framework\fP switches\&.
.PP
If you are using the dynamic GLFW library, which is named \fClibglfw\&.3\&.dylib\fP, do:
.PP
.PP
.nf
cc -o myprog myprog\&.c -lglfw -framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo
.fi
.PP
.PP
If you are using the static library, named \fClibglfw3\&.a\fP, substitute \fC-lglfw3\fP for \fC-lglfw\fP\&.
.PP
Note that you do not add the \fC\&.framework\fP extension to a framework when linking against it from the command-line\&.
.PP
The OpenGL framework contains both the OpenGL and GLU APIs, so there is nothing special to do when using GLU\&. Also note that even though your machine may have \fClibGL\fP-style OpenGL libraries, they are for use with the X Window System and will \fInot\fP work with the macOS native version of GLFW\&. 
