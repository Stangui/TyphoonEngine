.TH "core_func_common" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
core_func_common
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBglm::abs\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::abs\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::sign\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::floor\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::trunc\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::round\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::roundEven\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::ceil\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::fract\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::fract\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::mod\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::mod\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::mod\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::modf\fP (genType x, genType &i)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBglm::min\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::min\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::min\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBglm::max\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::max\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::max\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBglm::clamp\fP (genType x, genType minVal, genType maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::clamp\fP (\fBvec\fP< L, T, Q > const &x, T minVal, T maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBglm::clamp\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &minVal, \fBvec\fP< L, T, Q > const &maxVal)"
.br
.ti -1c
.RI "template<typename genTypeT , typename genTypeU > GLM_FUNC_DECL genTypeT \fBglm::mix\fP (genTypeT x, genTypeT y, genTypeU a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::mix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::mix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, U a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::step\fP (genType edge, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::step\fP (T edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::step\fP (\fBvec\fP< L, T, Q > const &edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::smoothstep\fP (genType edge0, genType edge1, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::smoothstep\fP (T edge0, T edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::smoothstep\fP (\fBvec\fP< L, T, Q > const &edge0, \fBvec\fP< L, T, Q > const &edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBglm::isnan\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBglm::isinf\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBglm::floatBitsToInt\fP (float const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBglm::floatBitsToInt\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBglm::floatBitsToUint\fP (float const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uint, Q > \fBglm::floatBitsToUint\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBglm::intBitsToFloat\fP (int const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, float, Q > \fBglm::intBitsToFloat\fP (\fBvec\fP< L, int, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBglm::uintBitsToFloat\fP (uint const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, float, Q > \fBglm::uintBitsToFloat\fP (\fBvec\fP< L, uint, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::fma\fP (genType const &a, genType const &b, genType const &c)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::frexp\fP (genType x, int &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::frexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > &\fBexp\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::ldexp\fP (genType const &x, int const &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBglm::ldexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > const &\fBexp\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Provides GLSL common functions
.PP
These all operate component-wise\&. The description is per component\&.
.PP
Include <\fBglm/common\&.hpp\fP> to use these core features\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType glm::abs (genType x)"
Returns x if x >= 0; otherwise, it returns -x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP floating-point or signed integer; scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL abs man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::abs (\fBvec\fP< L, T, Q > const & x)"
Returns x if x >= 0; otherwise, it returns -x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or signed integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL abs man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::ceil (\fBvec\fP< L, T, Q > const & x)"
Returns a value equal to the nearest integer that is greater than or equal to x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL ceil man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType glm::clamp (genType x, genType minVal, genType maxVal)"
Returns min(max(x, minVal), maxVal) for each component in x using the floating-point values minVal and maxVal\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer; scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL clamp man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::clamp (\fBvec\fP< L, T, Q > const & x, T minVal, T maxVal)"
Returns min(max(x, minVal), maxVal) for each component in x using the floating-point values minVal and maxVal\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL clamp man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::clamp (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, T, Q > const & minVal, \fBvec\fP< L, T, Q > const & maxVal)"
Returns min(max(x, minVal), maxVal) for each component in x using the floating-point values minVal and maxVal\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL clamp man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER int glm::floatBitsToInt (float const & v)"
Returns a signed integer value representing the encoding of a floating-point value\&. The floating-point value's bit-level representation is preserved\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL floatBitsToInt man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, int, Q> glm::floatBitsToInt (\fBvec\fP< L, float, Q > const & v)"
Returns a signed integer value representing the encoding of a floating-point value\&. The floatingpoint value's bit-level representation is preserved\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL floatBitsToInt man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER uint glm::floatBitsToUint (float const & v)"
Returns a unsigned integer value representing the encoding of a floating-point value\&. The floatingpoint value's bit-level representation is preserved\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL floatBitsToUint man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, uint, Q> glm::floatBitsToUint (\fBvec\fP< L, float, Q > const & v)"
Returns a unsigned integer value representing the encoding of a floating-point value\&. The floatingpoint value's bit-level representation is preserved\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL floatBitsToUint man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::floor (\fBvec\fP< L, T, Q > const & x)"
Returns a value equal to the nearest integer that is less then or equal to x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL floor man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::fma (genType const & a, genType const & b, genType const & c)"
Computes and returns a * b + c\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL fma man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::fract (genType x)"
Return x - floor(x)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL fract man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::fract (\fBvec\fP< L, T, Q > const & x)"
Return x - floor(x)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL fract man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::frexp (genType x, int & exp)"
Splits x into a floating-point significand in the range [0\&.5, 1\&.0) and an integral exponent of two, such that: x = significand * exp(2, exponent)
.PP
The significand is returned by the function and the exponent is returned in the parameter exp\&. For a floating-point value of zero, the significant and exponent are both zero\&. For a floating-point value that is an infinity or is not a number, the results are undefined\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL frexp man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER float glm::intBitsToFloat (int const & v)"
Returns a floating-point value corresponding to a signed integer encoding of a floating-point value\&. If an inf or NaN is passed in, it will not signal, and the resulting floating point value is unspecified\&. Otherwise, the bit-level representation is preserved\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL intBitsToFloat man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, float, Q> glm::intBitsToFloat (\fBvec\fP< L, int, Q > const & v)"
Returns a floating-point value corresponding to a signed integer encoding of a floating-point value\&. If an inf or NaN is passed in, it will not signal, and the resulting floating point value is unspecified\&. Otherwise, the bit-level representation is preserved\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL intBitsToFloat man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, bool, Q> glm::isinf (\fBvec\fP< L, T, Q > const & x)"
Returns true if x holds a positive infinity or negative infinity representation in the underlying implementation's set of floating point representations\&. Returns false otherwise, including for implementations with no infinity representations\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL isinf man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, bool, Q> glm::isnan (\fBvec\fP< L, T, Q > const & x)"
Returns true if x holds a NaN (not a number) representation in the underlying implementation's set of floating point representations\&. Returns false otherwise, including for implementations with no NaN representations\&.
.PP
/!\\ When using compiler fast math, this function may fail\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL isnan man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::ldexp (genType const & x, int const & exp)"
Builds a floating-point number from x and the corresponding integral exponent of two in exp, returning: significand * exp(2, exponent)
.PP
If this product is too large to be represented in the floating-point type, the result is undefined\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL ldexp man page\fP; 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType glm::max (genType x, genType y)"
Returns y if x < y; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer; scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL max man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::max (\fBvec\fP< L, T, Q > const & x, T y)"
Returns y if x < y; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL max man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::max (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, T, Q > const & y)"
Returns y if x < y; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL max man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType glm::min (genType x, genType y)"
Returns y if y < x; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer; scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL min man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::min (\fBvec\fP< L, T, Q > const & x, T y)"
Returns y if y < x; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL min man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP<L, T, Q> glm::min (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, T, Q > const & y)"
Returns y if y < x; otherwise, it returns x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point or integer scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL min man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genTypeT , typename genTypeU > GLM_FUNC_DECL genTypeT glm::mix (genTypeT x, genTypeT y, genTypeU a)"
If genTypeU is a floating scalar or vector: Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&.
.PP
If genTypeU is a boolean scalar or vector: Selects which vector each returned component comes from\&. For a component of 'a' that is false, the corresponding component of 'x' is returned\&. For a component of 'a' that is true, the corresponding component of 'y' is returned\&. Components of 'x' and 'y' that are not selected are allowed to be invalid floating point values and will have no effect on the results\&. Thus, this provides different functionality than genType mix(genType x, genType y, genType(a)) where a is a Boolean vector\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL mix man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Value to interpolate\&. 
.br
\fIy\fP Value to interpolate\&. 
.br
\fIa\fP Interpolant\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenTypeT\fP Floating point scalar or vector\&. 
.br
\fIgenTypeU\fP Floating point or boolean scalar or vector\&. It can't be a vector if it is the length of genTypeT\&.
.RE
.PP
.PP
.nf
#include <glm/glm\&.hpp>
\&.\&.\&.
float a;
bool b;
glm::dvec3 e;
glm::dvec3 f;
glm::vec4 g;
glm::vec4 h;
\&.\&.\&.
glm::vec4 r = glm::mix(g, h, a); // Interpolate with a floating-point scalar two vectors\&.
glm::vec4 s = glm::mix(g, h, b); // Returns g or h;
glm::dvec3 t = glm::mix(e, f, a); // Types of the third parameter is not required to match with the first and the second\&.
glm::vec4 u = glm::mix(g, h, r); // Interpolations can be perform per component with a vector for the last parameter\&.
.fi
.PP
 
.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::mod (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, T, Q > const & y)"
Modulus\&. Returns x - y * floor(x / y) for each component in x using the floating point value y\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types, include glm/gtc/integer for integer scalar types support 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL mod man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::modf (genType x, genType & i)"
Returns the fractional part of x and sets i to the integer part (as a whole number floating point value)\&. Both the return value and the output parameter will have the same sign as x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL modf man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::round (\fBvec\fP< L, T, Q > const & x)"
Returns a value equal to the nearest integer to x\&. The fraction 0\&.5 will round in a direction chosen by the implementation, presumably the direction that is fastest\&. This includes the possibility that round(x) returns the same value as roundEven(x) for all values of x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL round man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::roundEven (\fBvec\fP< L, T, Q > const & x)"
Returns a value equal to the nearest integer to x\&. A fractional part of 0\&.5 will round toward the nearest even integer\&. (Both 3\&.5 and 4\&.5 for x will return 4\&.0\&.)
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL roundEven man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.PP
\fCNew round to even technique\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::sign (\fBvec\fP< L, T, Q > const & x)"
Returns 1\&.0 if x > 0, 0\&.0 if x == 0, or -1\&.0 if x < 0\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL sign man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::smoothstep (genType edge0, genType edge1, genType x)"
Returns 0\&.0 if x <= edge0 and 1\&.0 if x >= edge1 and performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1\&. This is useful in cases where you would want a threshold function with a smooth transition\&. This is equivalent to: genType t; t = clamp ((x - edge0) / (edge1 - edge0), 0, 1); return t * t * (3 - 2 * t); Results are undefined if edge0 >= edge1\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL smoothstep man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::step (genType edge, genType x)"
Returns 0\&.0 if x < edge, otherwise it returns 1\&.0 for each component of a genType\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL step man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::step (T edge, \fBvec\fP< L, T, Q > const & x)"
Returns 0\&.0 if x < edge, otherwise it returns 1\&.0\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL step man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::step (\fBvec\fP< L, T, Q > const & edge, \fBvec\fP< L, T, Q > const & x)"
Returns 0\&.0 if x < edge, otherwise it returns 1\&.0\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL step man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::trunc (\fBvec\fP< L, T, Q > const & x)"
Returns a value equal to the nearest integer to x whose absolute value is not larger than the absolute value of x\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point scalar types 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL trunc man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER float glm::uintBitsToFloat (uint const & v)"
Returns a floating-point value corresponding to a unsigned integer encoding of a floating-point value\&. If an inf or NaN is passed in, it will not signal, and the resulting floating point value is unspecified\&. Otherwise, the bit-level representation is preserved\&.
.PP
\fBSee also:\fP
.RS 4
\fCGLSL uintBitsToFloat man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, float, Q> glm::uintBitsToFloat (\fBvec\fP< L, uint, Q > const & v)"
Returns a floating-point value corresponding to a unsigned integer encoding of a floating-point value\&. If an inf or NaN is passed in, it will not signal, and the resulting floating point value is unspecified\&. Otherwise, the bit-level representation is preserved\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL uintBitsToFloat man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.3 Common Functions\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
