.TH "vulkan_guide" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vulkan_guide \- Vulkan guide 
This guide is intended to fill the gaps between the \fCVulkan documentation\fP and the rest of the GLFW documentation and is not a replacement for either\&. It assumes some familiarity with Vulkan concepts like loaders, devices, queues and surfaces and leaves it to the Vulkan documentation to explain the details of Vulkan functions\&.
.PP
To develop for Vulkan you should download the \fCLunarG Vulkan SDK\fP for your platform\&. Apart from headers and link libraries, they also provide the validation layers necessary for development\&.
.PP
For details on a specific function in this category, see the \fBVulkan reference\fP\&. There are also guides for the other areas of the GLFW API\&.
.PP
.IP "\(bu" 2
\fBIntroduction to the API\fP
.IP "\(bu" 2
\fBWindow guide\fP
.IP "\(bu" 2
\fBContext guide\fP
.IP "\(bu" 2
\fBMonitor guide\fP
.IP "\(bu" 2
\fBInput guide\fP
.PP
.SH "Linking against the Vulkan loader"
.PP
By default, GLFW will look for the Vulkan loader on demand at runtime via its standard name (\fCvulkan-1\&.dll\fP on Windows, \fClibvulkan\&.so\&.1\fP on Linux and other Unix-like systems and \fClibvulkan\&.1\&.dylib\fP on macOS)\&. This means that GLFW does not need to be linked against the loader\&. However, it also means that if you are using the static library form of the Vulkan loader GLFW will either fail to find it or (worse) use the wrong one\&.
.PP
The \fBGLFW_VULKAN_STATIC\fP CMake option makes GLFW call the Vulkan loader directly instead of dynamically loading it at runtime\&. Not linking against the Vulkan loader will then be a compile-time error\&.
.PP
@macos Because the Vulkan loader and ICD are not installed globally on macOS, you need to set up the application bundle according to the LunarG SDK documentation\&. This is explained in more detail in the \fCSDK documentation for macOS\fP\&.
.SH "Including the Vulkan and GLFW header files"
.PP
To include the Vulkan header, define \fBGLFW_INCLUDE_VULKAN\fP before including the GLFW header\&.
.PP
.PP
.nf
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3\&.h>
.fi
.PP
.PP
If you instead want to include the Vulkan header from a custom location or use your own custom Vulkan header then do this before the GLFW header\&.
.PP
.PP
.nf
#include <path/to/vulkan\&.h>
#include <GLFW/glfw3\&.h>
.fi
.PP
.PP
Unless a Vulkan header is included, either by the GLFW header or above it, any GLFW functions that take or return Vulkan types will not be declared\&.
.PP
The \fCVK_USE_PLATFORM_*_KHR\fP macros do not need to be defined for the Vulkan part of GLFW to work\&. Define them only if you are using these extensions directly\&.
.SH "Querying for Vulkan support"
.PP
If you are linking directly against the Vulkan loader then you can skip this section\&. The canonical desktop loader library exports all Vulkan core and Khronos extension functions, allowing them to be called directly\&.
.PP
If you are loading the Vulkan loader dynamically instead of linking directly against it, you can check for the availability of a loader and ICD with \fBglfwVulkanSupported\fP\&.
.PP
.PP
.nf
if (glfwVulkanSupported())
{
    // Vulkan is available, at least for compute
}
.fi
.PP
.PP
This function returns \fCGLFW_TRUE\fP if the Vulkan loader and any minimally functional ICD was found\&.
.PP
If if one or both were not found, calling any other Vulkan related GLFW function will generate a \fBGLFW_API_UNAVAILABLE\fP error\&.
.SS "Querying Vulkan function pointers"
To load any Vulkan core or extension function from the found loader, call \fBglfwGetInstanceProcAddress\fP\&. To load functions needed for instance creation, pass \fCNULL\fP as the instance\&.
.PP
.PP
.nf
PFN_vkCreateInstance pfnCreateInstance = (PFN_vkCreateInstance)
    glfwGetInstanceProcAddress(NULL, "vkCreateInstance");
.fi
.PP
.PP
Once you have created an instance, you can load from it all other Vulkan core functions and functions from any instance extensions you enabled\&.
.PP
.PP
.nf
PFN_vkCreateDevice pfnCreateDevice = (PFN_vkCreateDevice)
    glfwGetInstanceProcAddress(instance, "vkCreateDevice");
.fi
.PP
.PP
This function in turn calls \fCvkGetInstanceProcAddr\fP\&. If that fails, the function falls back to a platform-specific query of the Vulkan loader (i\&.e\&. \fCdlsym\fP or \fCGetProcAddress\fP)\&. If that also fails, the function returns \fCNULL\fP\&. For more information about \fCvkGetInstanceProcAddr\fP, see the Vulkan documentation\&.
.PP
Vulkan also provides \fCvkGetDeviceProcAddr\fP for loading device-specific versions of Vulkan function\&. This function can be retrieved from an instance with \fBglfwGetInstanceProcAddress\fP\&.
.PP
.PP
.nf
PFN_vkGetDeviceProcAddr pfnGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)
    glfwGetInstanceProcAddress(instance, "vkGetDeviceProcAddr");
.fi
.PP
.PP
Device-specific functions may execute a little bit faster, due to not having to dispatch internally based on the device passed to them\&. For more information about \fCvkGetDeviceProcAddr\fP, see the Vulkan documentation\&.
.SH "Querying required Vulkan extensions"
.PP
To do anything useful with Vulkan you need to create an instance\&. If you want to use Vulkan to render to a window, you must enable the instance extensions GLFW requires to create Vulkan surfaces\&.
.PP
To query the instance extensions required, call \fBglfwGetRequiredInstanceExtensions\fP\&.
.PP
.PP
.nf
uint32_t count;
const char** extensions = glfwGetRequiredInstanceExtensions(&count);
.fi
.PP
.PP
These extensions must all be enabled when creating instances that are going to be passed to \fBglfwGetPhysicalDevicePresentationSupport\fP and \fBglfwCreateWindowSurface\fP\&. The set of extensions will vary depending on platform and may also vary depending on graphics drivers and other factors\&.
.PP
If it fails it will return \fCNULL\fP and GLFW will not be able to create Vulkan window surfaces\&. You can still use Vulkan for off-screen rendering and compute work\&.
.PP
If successful the returned array will always include \fCVK_KHR_surface\fP, so if you don't require any additional extensions you can pass this list directly to the \fC\fBVkInstanceCreateInfo\fP\fP struct\&.
.PP
.PP
.nf
VkInstanceCreateInfo ici;

memset(&ici, 0, sizeof(ici));
ici\&.enabledExtensionCount = count;
ici\&.ppEnabledExtensionNames = extensions;
\&.\&.\&.
.fi
.PP
.PP
Additional extensions may be required by future versions of GLFW\&. You should check whether any extensions you wish to enable are already in the returned array, as it is an error to specify an extension more than once in the \fC\fBVkInstanceCreateInfo\fP\fP struct\&.
.SH "Querying for Vulkan presentation support"
.PP
Not every queue family of every Vulkan device can present images to surfaces\&. To check whether a specific queue family of a physical device supports image presentation without first having to create a window and surface, call \fBglfwGetPhysicalDevicePresentationSupport\fP\&.
.PP
.PP
.nf
if (glfwGetPhysicalDevicePresentationSupport(instance, physical_device, queue_family_index))
{
    // Queue family supports image presentation
}
.fi
.PP
.PP
The \fCVK_KHR_surface\fP extension additionally provides the \fCvkGetPhysicalDeviceSurfaceSupportKHR\fP function, which performs the same test on an existing Vulkan surface\&.
.SH "Creating the window"
.PP
Unless you will be using OpenGL or OpenGL ES with the same window as Vulkan, there is no need to create a context\&. You can disable context creation with the \fBGLFW_CLIENT_API\fP hint\&.
.PP
.PP
.nf
glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
GLFWwindow* window = glfwCreateWindow(640, 480, "Window Title", NULL, NULL);
.fi
.PP
.PP
See \fBWindows without contexts\fP for more information\&.
.SH "Creating a Vulkan window surface"
.PP
You can create a Vulkan surface (as defined by the \fCVK_KHR_surface\fP extension) for a GLFW window with \fBglfwCreateWindowSurface\fP\&.
.PP
.PP
.nf
VkSurfaceKHR surface;
VkResult err = glfwCreateWindowSurface(instance, window, NULL, &surface);
if (err)
{
    // Window surface creation failed
}
.fi
.PP
.PP
If an OpenGL or OpenGL ES context was created on the window, the context has ownership of the presentation on the window and a Vulkan surface cannot be created\&.
.PP
It is your responsibility to destroy the surface\&. GLFW does not destroy it for you\&. Call \fCvkDestroySurfaceKHR\fP function from the same extension to destroy it\&. 
