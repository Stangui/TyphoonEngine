.TH "gtx_integer" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_integer
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef signed int \fBglm::sint\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "GLM_FUNC_DECL int \fBglm::pow\fP (int x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBglm::sqrt\fP (int x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL unsigned int \fBglm::floor_log2\fP (unsigned int x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBglm::mod\fP (int x, int y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::factorial\fP (genType const &x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBglm::pow\fP (uint x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBglm::sqrt\fP (uint x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBglm::mod\fP (uint x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBglm::nlz\fP (uint x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include <\fBglm/gtx/integer\&.hpp\fP> to use the features of this extension\&.
.PP
Add support for integer for core functions 
.SH "Typedef Documentation"
.PP 
.SS "typedef signed int \fBglm::sint\fP"
32bit signed integer\&. From GLM_GTX_integer extension\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename genType > GLM_FUNC_DECL genType glm::factorial (genType const & x)"
Return the factorial value of a number (!12 max, integer only) From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_DECL unsigned int glm::floor_log2 (unsigned int x)"
Returns the floor log2 of x\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER int glm::mod (int x, int y)"
Modulus\&. Returns x - y * floor(x / y) for each component in x using the floating point value y\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::mod (uint x, uint y)"
Modulus\&. Returns x - y * floor(x / y) for each component in x using the floating point value y\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER unsigned int glm::nlz (uint x)"
Returns the number of leading zeros\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER int glm::pow (int x, uint y)"
Returns x raised to the y power\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::pow (uint x, uint y)"
Returns x raised to the y power\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER int glm::sqrt (int x)"
Returns the positive square root of x\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::sqrt (uint x)"
Returns the positive square root of x\&. From GLM_GTX_integer extension\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
