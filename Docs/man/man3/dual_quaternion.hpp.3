.TH "Typhoon/ThirdParty/glm/glm/gtx/dual_quaternion.hpp" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Typhoon/ThirdParty/glm/glm/gtx/dual_quaternion.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./glm\&.hpp'\fP
.br
\fC#include '\&.\&./gtc/constants\&.hpp'\fP
.br
\fC#include '\&.\&./gtc/quaternion\&.hpp'\fP
.br
\fC#include 'dual_quaternion\&.inl'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBglm::tdualquat< T, Q >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBglm\fP"
.br
.RI "\fBCore features\fP "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef tdualquat< float, lowp > \fBglm::lowp_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, mediump > \fBglm::mediump_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, highp > \fBglm::highp_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, lowp > \fBglm::lowp_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, mediump > \fBglm::mediump_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, highp > \fBglm::highp_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, lowp > \fBglm::lowp_ddualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, mediump > \fBglm::mediump_ddualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, highp > \fBglm::highp_ddualquat\fP"
.br
.ti -1c
.RI "typedef highp_fdualquat \fBglm::dualquat\fP"
.br
.ti -1c
.RI "typedef highp_fdualquat \fBglm::fdualquat\fP"
.br
.ti -1c
.RI "typedef highp_ddualquat \fBglm::ddualquat\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator+\fP (tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator\-\fP (tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator+\fP (tdualquat< T, Q > const &q, tdualquat< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator *\fP (tdualquat< T, Q > const &q, tdualquat< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 3, T, Q > \fBglm::operator *\fP (tdualquat< T, Q > const &q, vec< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 3, T, Q > \fBglm::operator *\fP (vec< 3, T, Q > const &v, tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 4, T, Q > \fBglm::operator *\fP (tdualquat< T, Q > const &q, vec< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 4, T, Q > \fBglm::operator *\fP (vec< 4, T, Q > const &v, tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator *\fP (tdualquat< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator *\fP (T const &s, tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::operator/\fP (tdualquat< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBglm::operator==\fP (tdualquat< T, Q > const &q1, tdualquat< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBglm::operator!=\fP (tdualquat< T, Q > const &q1, tdualquat< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::dual_quat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::normalize\fP (tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::lerp\fP (tdualquat< T, Q > const &x, tdualquat< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::inverse\fP (tdualquat< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL mat< 2, 4, T, Q > \fBglm::mat2x4_cast\fP (tdualquat< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL mat< 3, 4, T, Q > \fBglm::mat3x4_cast\fP (tdualquat< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::dualquat_cast\fP (mat< 2, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL tdualquat< T, Q > \fBglm::dualquat_cast\fP (mat< 3, 4, T, Q > const &x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBGLM_GTX_dual_quaternion\fP
.PP
\fBAuthor:\fP
.RS 4
Maksim Vorobiev (msomeone@gmail.com)
.RE
.PP
\fBSee also:\fP
.RS 4
\fBCore features\fP (dependence) 
.PP
\fBGLM_GTC_constants\fP (dependence) 
.PP
\fBGLM_GTC_quaternion\fP (dependence) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
