.TH "gtx_quaternion" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_quaternion
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::quat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBglm::cross\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBglm::cross\fP (\fBvec\fP< 3, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::squad\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2, \fBqua\fP< T, Q > const &s1, \fBqua\fP< T, Q > const &s2, T const &h)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::intermediate\fP (\fBqua\fP< T, Q > const &prev, \fBqua\fP< T, Q > const &curr, \fBqua\fP< T, Q > const &next)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBglm::rotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBglm::rotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBglm::extractRealComponent\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBglm::toMat3\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::toMat4\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::toQuat\fP (\fBmat\fP< 3, 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::toQuat\fP (\fBmat\fP< 4, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::shortMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::fastMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBglm::rotation\fP (\fBvec\fP< 3, T, Q > const &orig, \fBvec\fP< 3, T, Q > const &dest)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBglm::length2\fP (\fBqua\fP< T, Q > const &q)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include <\fBglm/gtx/quaternion\&.hpp\fP> to use the features of this extension\&.
.PP
Extented quaternion types and functions 
.SH "Function Documentation"
.PP 
.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<3, T, Q> glm::cross (\fBqua\fP< T, Q > const & q, \fBvec\fP< 3, T, Q > const & v)"
Compute a cross product between a quaternion and a vector\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<3, T, Q> glm::cross (\fBvec\fP< 3, T, Q > const & v, \fBqua\fP< T, Q > const & q)"
Compute a cross product between a vector and a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL T glm::extractRealComponent (\fBqua\fP< T, Q > const & q)"
Extract the real component of a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::fastMix (\fBqua\fP< T, Q > const & x, \fBqua\fP< T, Q > const & y, T const & a)"
Quaternion normalized linear interpolation\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::intermediate (\fBqua\fP< T, Q > const & prev, \fBqua\fP< T, Q > const & curr, \fBqua\fP< T, Q > const & next)"
Returns an intermediate control point for squad interpolation\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL T glm::length2 (\fBqua\fP< T, Q > const & q)"
Returns the squared length of x\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::quat_identity ()"
Create an identity quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<3, T, Q> glm::rotate (\fBqua\fP< T, Q > const & q, \fBvec\fP< 3, T, Q > const & v)"
Returns quarternion square root\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP Rotates a 3 components vector by a quaternion\&.
.PP
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<4, T, Q> glm::rotate (\fBqua\fP< T, Q > const & q, \fBvec\fP< 4, T, Q > const & v)"
Rotates a 4 components vector by a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::rotation (\fBvec\fP< 3, T, Q > const & orig, \fBvec\fP< 3, T, Q > const & dest)"
Compute the rotation between two vectors\&. param orig vector, needs to be normalized param dest vector, needs to be normalized
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::shortMix (\fBqua\fP< T, Q > const & x, \fBqua\fP< T, Q > const & y, T const & a)"
Quaternion interpolation using the rotation short path\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::squad (\fBqua\fP< T, Q > const & q1, \fBqua\fP< T, Q > const & q2, \fBqua\fP< T, Q > const & s1, \fBqua\fP< T, Q > const & s2, T const & h)"
Compute a point on a path according squad equation\&. q1 and q2 are control points; s1 and s2 are intermediate control points\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<3, 3, T, Q> glm::toMat3 (\fBqua\fP< T, Q > const & x)"
Converts a quaternion to a 3 * 3 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::toMat4 (\fBqua\fP< T, Q > const & x)"
Converts a quaternion to a 4 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::toQuat (\fBmat\fP< 3, 3, T, Q > const & x)"
Converts a 3 * 3 matrix to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP<T, Q> glm::toQuat (\fBmat\fP< 4, 4, T, Q > const & x)"
Converts a 4 * 4 matrix to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
