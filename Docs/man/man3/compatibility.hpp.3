.TH "Typhoon/ThirdParty/glm/glm/gtx/compatibility.hpp" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Typhoon/ThirdParty/glm/glm/gtx/compatibility.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./glm\&.hpp'\fP
.br
\fC#include '\&.\&./gtc/quaternion\&.hpp'\fP
.br
\fC#include 'compatibility\&.inl'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBglm\fP"
.br
.RI "\fBCore features\fP "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef bool \fBglm::bool1\fP"
.br
.RI "boolean type with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 2, bool, highp > \fBglm::bool2\fP"
.br
.RI "boolean type with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 3, bool, highp > \fBglm::bool3\fP"
.br
.RI "boolean type with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 4, bool, highp > \fBglm::bool4\fP"
.br
.RI "boolean type with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef bool \fBglm::bool1x1\fP"
.br
.RI "boolean matrix with 1 x 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 2, bool, highp > \fBglm::bool2x2\fP"
.br
.RI "boolean matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 3, bool, highp > \fBglm::bool2x3\fP"
.br
.RI "boolean matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 4, bool, highp > \fBglm::bool2x4\fP"
.br
.RI "boolean matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 2, bool, highp > \fBglm::bool3x2\fP"
.br
.RI "boolean matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 3, bool, highp > \fBglm::bool3x3\fP"
.br
.RI "boolean matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 4, bool, highp > \fBglm::bool3x4\fP"
.br
.RI "boolean matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 2, bool, highp > \fBglm::bool4x2\fP"
.br
.RI "boolean matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 3, bool, highp > \fBglm::bool4x3\fP"
.br
.RI "boolean matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 4, bool, highp > \fBglm::bool4x4\fP"
.br
.RI "boolean matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef int \fBglm::int1\fP"
.br
.RI "integer vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 2, int, highp > \fBglm::int2\fP"
.br
.RI "integer vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 3, int, highp > \fBglm::int3\fP"
.br
.RI "integer vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 4, int, highp > \fBglm::int4\fP"
.br
.RI "integer vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef int \fBglm::int1x1\fP"
.br
.RI "integer matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 2, int, highp > \fBglm::int2x2\fP"
.br
.RI "integer matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 3, int, highp > \fBglm::int2x3\fP"
.br
.RI "integer matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 4, int, highp > \fBglm::int2x4\fP"
.br
.RI "integer matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 2, int, highp > \fBglm::int3x2\fP"
.br
.RI "integer matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 3, int, highp > \fBglm::int3x3\fP"
.br
.RI "integer matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 4, int, highp > \fBglm::int3x4\fP"
.br
.RI "integer matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 2, int, highp > \fBglm::int4x2\fP"
.br
.RI "integer matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 3, int, highp > \fBglm::int4x3\fP"
.br
.RI "integer matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 4, int, highp > \fBglm::int4x4\fP"
.br
.RI "integer matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef float \fBglm::float1\fP"
.br
.RI "single-qualifier floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 2, float, highp > \fBglm::float2\fP"
.br
.RI "single-qualifier floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 3, float, highp > \fBglm::float3\fP"
.br
.RI "single-qualifier floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 4, float, highp > \fBglm::float4\fP"
.br
.RI "single-qualifier floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef float \fBglm::float1x1\fP"
.br
.RI "single-qualifier floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 2, float, highp > \fBglm::float2x2\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 3, float, highp > \fBglm::float2x3\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 4, float, highp > \fBglm::float2x4\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 2, float, highp > \fBglm::float3x2\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 3, float, highp > \fBglm::float3x3\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 4, float, highp > \fBglm::float3x4\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 2, float, highp > \fBglm::float4x2\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 3, float, highp > \fBglm::float4x3\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 4, float, highp > \fBglm::float4x4\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef double \fBglm::double1\fP"
.br
.RI "double-qualifier floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 2, double, highp > \fBglm::double2\fP"
.br
.RI "double-qualifier floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 3, double, highp > \fBglm::double3\fP"
.br
.RI "double-qualifier floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef vec< 4, double, highp > \fBglm::double4\fP"
.br
.RI "double-qualifier floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef double \fBglm::double1x1\fP"
.br
.RI "double-qualifier floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 2, double, highp > \fBglm::double2x2\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 3, double, highp > \fBglm::double2x3\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 2, 4, double, highp > \fBglm::double2x4\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 2, double, highp > \fBglm::double3x2\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 3, double, highp > \fBglm::double3x3\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 3, 4, double, highp > \fBglm::double3x4\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 2, double, highp > \fBglm::double4x2\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 3, double, highp > \fBglm::double4x3\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef mat< 4, 4, double, highp > \fBglm::double4x4\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBglm::lerp\fP (T x, T y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 2, T, Q > \fBglm::lerp\fP (const vec< 2, T, Q > &x, const vec< 2, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 3, T, Q > \fBglm::lerp\fP (const vec< 3, T, Q > &x, const vec< 3, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 4, T, Q > \fBglm::lerp\fP (const vec< 4, T, Q > &x, const vec< 4, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 2, T, Q > \fBglm::lerp\fP (const vec< 2, T, Q > &x, const vec< 2, T, Q > &y, const vec< 2, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 3, T, Q > \fBglm::lerp\fP (const vec< 3, T, Q > &x, const vec< 3, T, Q > &y, const vec< 3, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 4, T, Q > \fBglm::lerp\fP (const vec< 4, T, Q > &x, const vec< 4, T, Q > &y, const vec< 4, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBglm::saturate\fP (T x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 2, T, Q > \fBglm::saturate\fP (const vec< 2, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 3, T, Q > \fBglm::saturate\fP (const vec< 3, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 4, T, Q > \fBglm::saturate\fP (const vec< 4, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBglm::atan2\fP (T x, T y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 2, T, Q > \fBglm::atan2\fP (const vec< 2, T, Q > &x, const vec< 2, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 3, T, Q > \fBglm::atan2\fP (const vec< 3, T, Q > &x, const vec< 3, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER vec< 4, T, Q > \fBglm::atan2\fP (const vec< 4, T, Q > &x, const vec< 4, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBglm::isfinite\fP (genType const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 1, bool, Q > \fBglm::isfinite\fP (const vec< 1, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 2, bool, Q > \fBglm::isfinite\fP (const vec< 2, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 3, bool, Q > \fBglm::isfinite\fP (const vec< 3, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL vec< 4, bool, Q > \fBglm::isfinite\fP (const vec< 4, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.in -1c
.SH "Detailed Description"
.PP 
\fBGLM_GTX_compatibility\fP
.PP
\fBSee also:\fP
.RS 4
\fBCore features\fP (dependence) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
