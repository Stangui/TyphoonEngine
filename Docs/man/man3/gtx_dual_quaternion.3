.TH "gtx_dual_quaternion" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_dual_quaternion
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBglm::tdualquat< T, Q >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBlowp\fP > \fBglm::lowp_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBmediump\fP > \fBglm::mediump_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBhighp\fP > \fBglm::highp_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBlowp\fP > \fBglm::lowp_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBmediump\fP > \fBglm::mediump_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBhighp\fP > \fBglm::highp_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBlowp\fP > \fBglm::lowp_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBmediump\fP > \fBglm::mediump_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBhighp\fP > \fBglm::highp_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_fdualquat\fP \fBglm::dualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_fdualquat\fP \fBglm::fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_ddualquat\fP \fBglm::ddualquat\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator+\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator\-\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator+\fP (\fBtdualquat\fP< T, Q > const &q, \fBtdualquat\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBtdualquat\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBglm::operator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBglm::operator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBglm::operator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBglm::operator *\fP (\fBvec\fP< 4, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator *\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator *\fP (T const &s, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::operator/\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBglm::operator==\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBglm::operator!=\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::dual_quat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::normalize\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::lerp\fP (\fBtdualquat\fP< T, Q > const &x, \fBtdualquat\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::inverse\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBglm::mat2x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBglm::mat3x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::dualquat_cast\fP (\fBmat\fP< 2, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBglm::dualquat_cast\fP (\fBmat\fP< 3, 4, T, Q > const &x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include <\fBglm/gtx/dual_quaternion\&.hpp\fP> to use the features of this extension\&.
.PP
Defines a templated dual-quaternion type and several dual-quaternion operations\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBhighp_ddualquat\fP \fBglm::ddualquat\fP"
Dual-quaternion of default double-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBhighp_fdualquat\fP \fBglm::dualquat\fP"
Dual-quaternion of floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBhighp_fdualquat\fP \fBglm::fdualquat\fP"
Dual-quaternion of single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<double, \fBhighp\fP> \fBglm::highp_ddualquat\fP"
Dual-quaternion of high double-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBhighp\fP> \fBglm::highp_dualquat\fP"
Dual-quaternion of high single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBhighp\fP> \fBglm::highp_fdualquat\fP"
Dual-quaternion of high single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<double, \fBlowp\fP> \fBglm::lowp_ddualquat\fP"
Dual-quaternion of low double-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBlowp\fP> \fBglm::lowp_dualquat\fP"
Dual-quaternion of low single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBlowp\fP> \fBglm::lowp_fdualquat\fP"
Dual-quaternion of low single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<double, \fBmediump\fP> \fBglm::mediump_ddualquat\fP"
Dual-quaternion of medium double-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBmediump\fP> \fBglm::mediump_dualquat\fP"
Dual-quaternion of medium single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef \fBtdualquat\fP<float, \fBmediump\fP> \fBglm::mediump_fdualquat\fP"
Dual-quaternion of medium single-qualifier floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::dual_quat_identity ()"
Creates an identity dual quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::dualquat_cast (\fBmat\fP< 2, 4, T, Q > const & x)"
Converts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::dualquat_cast (\fBmat\fP< 3, 4, T, Q > const & x)"
Converts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::inverse (\fBtdualquat\fP< T, Q > const & q)"
Returns the q inverse\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::lerp (\fBtdualquat\fP< T, Q > const & x, \fBtdualquat\fP< T, Q > const & y, T const & a)"
Returns the linear interpolation of two dual quaternion\&.
.PP
\fBSee also:\fP
.RS 4
gtc_dual_quaternion 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<2, 4, T, Q> glm::mat2x4_cast (\fBtdualquat\fP< T, Q > const & x)"
Converts a quaternion to a 2 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<3, 4, T, Q> glm::mat3x4_cast (\fBtdualquat\fP< T, Q > const & x)"
Converts a quaternion to a 3 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP<T, Q> glm::normalize (\fBtdualquat\fP< T, Q > const & q)"
Returns the normalized quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
