.TH "ext_matrix_transform" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ext_matrix_transform
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBglm::identity\fP ()"
.br
.RI "Builds an identity matrix\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::translate\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::rotate\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::scale\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::lookAtRH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::lookAtLH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBglm::lookAt\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines functions that generate common transformation matrices\&.
.PP
The matrices generated by this extension use standard OpenGL fixed-function conventions\&. For example, the lookAt function generates a transform from world space into the specific eye space that the projective matrix functions (perspective, ortho, etc) are designed to expect\&. The OpenGL compatibility specifications defines the particular layout of this eye space\&.
.PP
Include <\fBglm/ext/matrix_transform\&.hpp\fP> to use the features of this extension\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_matrix_projection\fP 
.PP
\fBGLM_EXT_matrix_clip_space\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::lookAt (\fBvec\fP< 3, T, Q > const & eye, \fBvec\fP< 3, T, Q > const & center, \fBvec\fP< 3, T, Q > const & up)"
Build a look at view matrix based on the default handedness\&.
.PP
\fBParameters:\fP
.RS 4
\fIeye\fP Position of the camera 
.br
\fIcenter\fP Position where the camera is looking at 
.br
\fIup\fP Normalized up vector, how the camera is oriented\&. Typically (0, 0, 1)
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
- frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) 
.PP
\fCgluLookAt man page\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::lookAtLH (\fBvec\fP< 3, T, Q > const & eye, \fBvec\fP< 3, T, Q > const & center, \fBvec\fP< 3, T, Q > const & up)"
Build a left handed look at view matrix\&.
.PP
\fBParameters:\fP
.RS 4
\fIeye\fP Position of the camera 
.br
\fIcenter\fP Position where the camera is looking at 
.br
\fIup\fP Normalized up vector, how the camera is oriented\&. Typically (0, 0, 1)
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
- frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::lookAtRH (\fBvec\fP< 3, T, Q > const & eye, \fBvec\fP< 3, T, Q > const & center, \fBvec\fP< 3, T, Q > const & up)"
Build a right handed look at view matrix\&.
.PP
\fBParameters:\fP
.RS 4
\fIeye\fP Position of the camera 
.br
\fIcenter\fP Position where the camera is looking at 
.br
\fIup\fP Normalized up vector, how the camera is oriented\&. Typically (0, 0, 1)
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
- frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) frustum(T const& left, T const& right, T const& bottom, T const& top, T const& nearVal, T const& farVal) 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::rotate (\fBmat\fP< 4, 4, T, Q > const & m, T angle, \fBvec\fP< 3, T, Q > const & axis)"
Builds a rotation 4 * 4 matrix created from an axis vector and an angle\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this rotation matrix\&. 
.br
\fIangle\fP Rotation angle expressed in radians\&. 
.br
\fIaxis\fP Rotation axis, recommended to be normalized\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
- rotate(mat<4, 4, T, Q> const& m, T angle, T x, T y, T z) 
.PP
- \fBrotate(T angle, vec<3, T, Q> const& v)\fP 
.PP
\fCglRotate man page\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::scale (\fBmat\fP< 4, 4, T, Q > const & m, \fBvec\fP< 3, T, Q > const & v)"
Builds a scale 4 * 4 matrix created from 3 scalars\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this scale matrix\&. 
.br
\fIv\fP Ratio of scaling for each axis\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
- scale(mat<4, 4, T, Q> const& m, T x, T y, T z) 
.PP
- \fBscale(vec<3, T, Q> const& v)\fP 
.PP
\fCglScale man page\fP 
.RE
.PP

.SS "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<4, 4, T, Q> glm::translate (\fBmat\fP< 4, 4, T, Q > const & m, \fBvec\fP< 3, T, Q > const & v)"
Builds a translation 4 * 4 matrix created from a vector of 3 components\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this translation matrix\&. 
.br
\fIv\fP Coordinates of a translation vector\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A floating-point scalar type 
.br
\fIQ\fP A value from qualifier enum
.RE
.PP
.PP
.nf
#include <glm/glm\&.hpp>
#include <glm/gtc/matrix_transform\&.hpp>
\&.\&.\&.
glm::mat4 m = glm::translate(glm::mat4(1\&.0f), glm::vec3(1\&.0f));
// m[0][0] == 1\&.0f, m[0][1] == 0\&.0f, m[0][2] == 0\&.0f, m[0][3] == 0\&.0f
// m[1][0] == 0\&.0f, m[1][1] == 1\&.0f, m[1][2] == 0\&.0f, m[1][3] == 0\&.0f
// m[2][0] == 0\&.0f, m[2][1] == 0\&.0f, m[2][2] == 1\&.0f, m[2][3] == 0\&.0f
// m[3][0] == 1\&.0f, m[3][1] == 1\&.0f, m[3][2] == 1\&.0f, m[3][3] == 1\&.0f
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
- translate(mat<4, 4, T, Q> const& m, T x, T y, T z) 
.PP
- \fBtranslate(vec<3, T, Q> const& v)\fP 
.PP
\fCglTranslate man page\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
