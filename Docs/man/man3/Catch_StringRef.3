.TH "Catch::StringRef" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Catch::StringRef
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <catch\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBsize_type\fP = std::size_t"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStringRef\fP (\fBStringRef\fP const &other) noexcept"
.br
.ti -1c
.RI "\fBStringRef\fP (\fBStringRef\fP &&other) noexcept"
.br
.ti -1c
.RI "\fBStringRef\fP (char const *rawChars) noexcept"
.br
.ti -1c
.RI "\fBStringRef\fP (char const *rawChars, size_type size) noexcept"
.br
.ti -1c
.RI "\fBStringRef\fP (std::string const &stdString) noexcept"
.br
.ti -1c
.RI "auto \fBoperator=\fP (\fBStringRef\fP const &other) noexcept \-> \fBStringRef\fP &"
.br
.ti -1c
.RI "\fBoperator std::string\fP () const"
.br
.ti -1c
.RI "void \fBswap\fP (\fBStringRef\fP &other) noexcept"
.br
.ti -1c
.RI "auto \fBoperator==\fP (\fBStringRef\fP const &other) const noexcept \-> bool"
.br
.ti -1c
.RI "auto \fBoperator !=\fP (\fBStringRef\fP const &other) const noexcept \-> bool"
.br
.ti -1c
.RI "auto \fBoperator[]\fP (size_type index) const noexcept \-> char"
.br
.ti -1c
.RI "auto \fBempty\fP () const noexcept \-> bool"
.br
.ti -1c
.RI "auto \fBsize\fP () const noexcept \-> size_type"
.br
.ti -1c
.RI "auto \fBnumberOfCharacters\fP () const noexcept \-> size_type"
.br
.ti -1c
.RI "auto \fBc_str\fP () const \-> char const *"
.br
.ti -1c
.RI "auto \fBsubstr\fP (size_type start, size_type size) const noexcept \-> \fBStringRef\fP"
.br
.ti -1c
.RI "auto \fBcurrentData\fP () const noexcept \-> char const *"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "struct \fBStringRefTestAccess\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A non-owning string class (similar to the forthcoming std::string_view) Note that, because a \fBStringRef\fP may be a substring of another string, it may not be null terminated\&. c_str() must return a null terminated string, however, and so the \fBStringRef\fP will internally take ownership (taking a copy), if necessary\&. In theory this ownership is not externally visible - but it does mean (substring) StringRefs should not be shared between threads\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
