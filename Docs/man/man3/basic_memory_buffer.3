.TH "basic_memory_buffer< T, SIZE, Allocator >" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_memory_buffer< T, SIZE, Allocator >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <format\&.h>\fP
.PP
Inherits Allocator, and \fBinternal::basic_buffer< T >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef const T & \fBconst_reference\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_memory_buffer\fP (const Allocator &alloc=Allocator())"
.br
.ti -1c
.RI "\fBbasic_memory_buffer\fP (\fBbasic_memory_buffer\fP &&other)"
.br
.ti -1c
.RI "\fBbasic_memory_buffer\fP & \fBoperator=\fP (\fBbasic_memory_buffer\fP &&other)"
.br
.ti -1c
.RI "Allocator \fBget_allocator\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBgrow\fP (std::size_t \fBsize\fP) FMT_OVERRIDE"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T, std::size_t SIZE = inline_buffer_size, typename Allocator = std::allocator<T>>
.br
class basic_memory_buffer< T, SIZE, Allocator >"
\\rst A dynamically growing memory buffer for trivially copyable/constructible types with the first \fCSIZE\fP elements stored in the object itself\&.
.PP
You can use one of the following typedefs for common character types:
.PP
+----------------+------------------------------+ | Type | Definition | +================+==============================+ | memory_buffer | basic_memory_buffer<char> | +----------------+------------------------------+ | wmemory_buffer | basic_memory_buffer<wchar_t> | +----------------+------------------------------+
.PP
Example**::
.PP
fmt::memory_buffer out; format_to(out, 'The answer is {}\&.', 42);
.PP
This will append the following output to the \fCout\fP object:
.PP
\&.\&. code-block:: none
.PP
The answer is 42\&.
.PP
The output can be converted to an \fCstd::string\fP with \fCto_string(out)\fP\&. \\endrst 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T, std::size_t SIZE = inline_buffer_size, typename Allocator = std::allocator<T>> \fBbasic_memory_buffer\fP< T, SIZE, Allocator >::\fBbasic_memory_buffer\fP (\fBbasic_memory_buffer\fP< T, SIZE, Allocator > && other)\fC [inline]\fP"
\\rst Constructs a :class:\fCfmt::basic_memory_buffer\fP object moving the content of the other object to it\&. \\endrst 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T , std::size_t SIZE, typename Allocator > void \fBbasic_memory_buffer\fP< T, SIZE, Allocator >::grow (std::size_t capacity)\fC [protected]\fP, \fC [virtual]\fP"
Increases the buffer capacity to hold at least \fIcapacity\fP elements\&. 
.PP
Implements \fBinternal::basic_buffer< T >\fP\&.
.SS "template<typename T, std::size_t SIZE = inline_buffer_size, typename Allocator = std::allocator<T>> \fBbasic_memory_buffer\fP& \fBbasic_memory_buffer\fP< T, SIZE, Allocator >::operator= (\fBbasic_memory_buffer\fP< T, SIZE, Allocator > && other)\fC [inline]\fP"
\\rst Moves the content of the other \fC\fBbasic_memory_buffer\fP\fP object to this one\&. \\endrst 

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
