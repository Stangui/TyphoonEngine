.TH "monitor" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
monitor \- Functions and types related to monitors\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBGLFWvidmode\fP"
.br
.RI "Video mode type\&. "
.ti -1c
.RI "struct \fBGLFWgammaramp\fP"
.br
.RI "Gamma ramp\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBGLFWmonitor\fP \fBGLFWmonitor\fP"
.br
.RI "Opaque monitor object\&. "
.ti -1c
.RI "typedef void(* \fBGLFWmonitorfun\fP) (\fBGLFWmonitor\fP *, int)"
.br
.RI "The function pointer type for monitor configuration callbacks\&. "
.ti -1c
.RI "typedef struct \fBGLFWvidmode\fP \fBGLFWvidmode\fP"
.br
.RI "Video mode type\&. "
.ti -1c
.RI "typedef struct \fBGLFWgammaramp\fP \fBGLFWgammaramp\fP"
.br
.RI "Gamma ramp\&. "
.ti -1c
.RI "typedef struct \fBGLFWmonitor\fP \fBGLFWmonitor\fP"
.br
.RI "Opaque monitor object\&. "
.ti -1c
.RI "typedef void(* \fBGLFWmonitorfun\fP) (\fBGLFWmonitor\fP *, int)"
.br
.RI "The function signature for monitor configuration callbacks\&. "
.ti -1c
.RI "typedef struct \fBGLFWvidmode\fP \fBGLFWvidmode\fP"
.br
.RI "Video mode type\&. "
.ti -1c
.RI "typedef struct \fBGLFWgammaramp\fP \fBGLFWgammaramp\fP"
.br
.RI "Gamma ramp\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "GLFWAPI \fBGLFWmonitor\fP ** \fBglfwGetMonitors\fP (int *count)"
.br
.RI "Returns the currently connected monitors\&. "
.ti -1c
.RI "GLFWAPI \fBGLFWmonitor\fP * \fBglfwGetPrimaryMonitor\fP (void)"
.br
.RI "Returns the primary monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwGetMonitorPos\fP (\fBGLFWmonitor\fP *monitor, int *xpos, int *ypos)"
.br
.RI "Returns the position of the monitor's viewport on the virtual screen\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwGetMonitorWorkarea\fP (\fBGLFWmonitor\fP *monitor, int *xpos, int *ypos, int *width, int *height)"
.br
.RI "Retrives the work area of the monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwGetMonitorPhysicalSize\fP (\fBGLFWmonitor\fP *monitor, int *widthMM, int *heightMM)"
.br
.RI "Returns the physical size of the monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwGetMonitorContentScale\fP (\fBGLFWmonitor\fP *monitor, float *xscale, float *yscale)"
.br
.RI "Retrieves the content scale for the specified monitor\&. "
.ti -1c
.RI "GLFWAPI const char * \fBglfwGetMonitorName\fP (\fBGLFWmonitor\fP *monitor)"
.br
.RI "Returns the name of the specified monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwSetMonitorUserPointer\fP (\fBGLFWmonitor\fP *monitor, void *pointer)"
.br
.RI "Sets the user pointer of the specified monitor\&. "
.ti -1c
.RI "GLFWAPI void * \fBglfwGetMonitorUserPointer\fP (\fBGLFWmonitor\fP *monitor)"
.br
.RI "Returns the user pointer of the specified monitor\&. "
.ti -1c
.RI "GLFWAPI \fBGLFWmonitorfun\fP \fBglfwSetMonitorCallback\fP (\fBGLFWmonitorfun\fP callback)"
.br
.RI "Sets the monitor configuration callback\&. "
.ti -1c
.RI "GLFWAPI const \fBGLFWvidmode\fP * \fBglfwGetVideoModes\fP (\fBGLFWmonitor\fP *monitor, int *count)"
.br
.RI "Returns the available video modes for the specified monitor\&. "
.ti -1c
.RI "GLFWAPI const \fBGLFWvidmode\fP * \fBglfwGetVideoMode\fP (\fBGLFWmonitor\fP *monitor)"
.br
.RI "Returns the current mode of the specified monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwSetGamma\fP (\fBGLFWmonitor\fP *monitor, float gamma)"
.br
.RI "Generates a gamma ramp and sets it for the specified monitor\&. "
.ti -1c
.RI "GLFWAPI const \fBGLFWgammaramp\fP * \fBglfwGetGammaRamp\fP (\fBGLFWmonitor\fP *monitor)"
.br
.RI "Returns the current gamma ramp for the specified monitor\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwSetGammaRamp\fP (\fBGLFWmonitor\fP *monitor, const \fBGLFWgammaramp\fP *ramp)"
.br
.RI "Sets the current gamma ramp for the specified monitor\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functions and types related to monitors\&. 

This is the reference documentation for monitor related functions and types\&. For more task-oriented information, see the \fBMonitor guide\fP\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBGLFWgammaramp\fP  \fBGLFWgammaramp\fP"

.PP
Gamma ramp\&. This describes the gamma ramp for a monitor\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP 
.PP
\fBglfwGetGammaRamp\fP \fBglfwSetGammaRamp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef struct \fBGLFWgammaramp\fP  \fBGLFWgammaramp\fP"

.PP
Gamma ramp\&. This describes the gamma ramp for a monitor\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP 
.PP
\fBglfwGetGammaRamp\fP 
.PP
\fBglfwSetGammaRamp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef struct \fBGLFWmonitor\fP \fBGLFWmonitor\fP"

.PP
Opaque monitor object\&. Opaque monitor object\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor objects\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef struct \fBGLFWmonitor\fP \fBGLFWmonitor\fP"

.PP
Opaque monitor object\&. Opaque monitor object\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor objects\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef void(*  GLFWmonitorfun) (\fBGLFWmonitor\fP *, int)"

.PP
The function signature for monitor configuration callbacks\&. This is the function signature for monitor configuration callback functions\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor that was connected or disconnected\&. 
.br
\fIevent\fP One of \fCGLFW_CONNECTED\fP or \fCGLFW_DISCONNECTED\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBMonitor configuration changes\fP 
.PP
\fBglfwSetMonitorCallback\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef void(*  GLFWmonitorfun) (\fBGLFWmonitor\fP *, int)"

.PP
The function pointer type for monitor configuration callbacks\&. This is the function pointer type for monitor configuration callbacks\&. A monitor callback function has the following signature: 
.PP
.nf
void function_name(GLFWmonitor* monitor, int event)

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor that was connected or disconnected\&. 
.br
\fIevent\fP One of \fCGLFW_CONNECTED\fP or \fCGLFW_DISCONNECTED\fP\&. Future releases may add more events\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBMonitor configuration changes\fP 
.PP
\fBglfwSetMonitorCallback\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef struct \fBGLFWvidmode\fP  \fBGLFWvidmode\fP"

.PP
Video mode type\&. This describes a single video mode\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoMode\fP \fBglfwGetVideoModes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. @glfw3 Added refresh rate member\&. 
.RE
.PP

.SS "typedef struct \fBGLFWvidmode\fP  \fBGLFWvidmode\fP"

.PP
Video mode type\&. This describes a single video mode\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoMode\fP 
.PP
\fBglfwGetVideoModes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. @glfw3 Added refresh rate member\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "GLFWAPI const \fBGLFWgammaramp\fP * glfwGetGammaRamp (\fBGLFWmonitor\fP * monitor)"

.PP
Returns the current gamma ramp for the specified monitor\&. This function returns the current gamma ramp of the specified monitor\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current gamma ramp, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
@wayland Gamma handling is a priviledged protocol, this function will thus never be implemented and emits \fBGLFW_PLATFORM_ERROR\fP while returning \fCNULL\fP\&.
.RE
.PP
@pointer_lifetime The returned structure and its arrays are allocated and freed by GLFW\&. You should not free them yourself\&. They are valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function returns the current gamma ramp of the specified monitor\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current gamma ramp, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@pointer_lifetime The returned structure and its arrays are allocated and freed by GLFW\&. You should not free them yourself\&. They are valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwGetMonitorContentScale (\fBGLFWmonitor\fP * monitor, float * xscale, float * yscale)"

.PP
Retrieves the content scale for the specified monitor\&. This function retrieves the content scale for the specified monitor\&. The content scale is the ratio between the current DPI and the platform's default DPI\&. This is especially important for text and any UI elements\&. If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other machines regardless of their DPI and scaling settings\&. This relies on the system DPI and scaling settings being somewhat correct\&.
.PP
The content scale may depend on both the monitor resolution and pixel density and on user settings\&. It may be very different from the raw DPI calculated from the physical size and current resolution\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIxscale\fP Where to store the x-axis content scale, or \fCNULL\fP\&. 
.br
\fIyscale\fP Where to store the y-axis content scale, or \fCNULL\fP\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBContent scale\fP 
.PP
\fBglfwGetWindowContentScale\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SS "GLFWAPI const char * glfwGetMonitorName (\fBGLFWmonitor\fP * monitor)"

.PP
Returns the name of the specified monitor\&. This function returns a human-readable name, encoded as UTF-8, of the specified monitor\&. The name typically reflects the make and model of the monitor and is not guaranteed to be unique among the connected monitors\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The UTF-8 encoded name of the monitor, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@pointer_lifetime The returned string is allocated and freed by GLFW\&. You should not free it yourself\&. It is valid until the specified monitor is disconnected or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor properties\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwGetMonitorPhysicalSize (\fBGLFWmonitor\fP * monitor, int * widthMM, int * heightMM)"

.PP
Returns the physical size of the monitor\&. This function returns the size, in millimetres, of the display area of the specified monitor\&.
.PP
Some systems do not provide accurate monitor size information, either because the monitor \fCEDID\fP data is incorrect or because the driver does not report it accurately\&.
.PP
Any or all of the size arguments may be \fCNULL\fP\&. If an error occurs, all non-\fCNULL\fP size arguments will be set to zero\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIwidthMM\fP Where to store the width, in millimetres, of the monitor's display area, or \fCNULL\fP\&. 
.br
\fIheightMM\fP Where to store the height, in millimetres, of the monitor's display area, or \fCNULL\fP\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
\fBRemarks:\fP
.RS 4
@win32 calculates the returned physical size from the current resolution and system DPI instead of querying the monitor EDID data\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor properties\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwGetMonitorPos (\fBGLFWmonitor\fP * monitor, int * xpos, int * ypos)"

.PP
Returns the position of the monitor's viewport on the virtual screen\&. This function returns the position, in screen coordinates, of the upper-left corner of the specified monitor\&.
.PP
Any or all of the position arguments may be \fCNULL\fP\&. If an error occurs, all non-\fCNULL\fP position arguments will be set to zero\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIxpos\fP Where to store the monitor x-coordinate, or \fCNULL\fP\&. 
.br
\fIypos\fP Where to store the monitor y-coordinate, or \fCNULL\fP\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor properties\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI \fBGLFWmonitor\fP ** glfwGetMonitors (int * count)"

.PP
Returns the currently connected monitors\&. This function returns an array of handles for all currently connected monitors\&. The primary monitor is always first in the returned array\&. If no monitors were found, this function returns \fCNULL\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP Where to store the number of monitors in the returned array\&. This is set to zero if an error occurred\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of monitor handles, or \fCNULL\fP if no monitors were found or if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is guaranteed to be valid only until the monitor configuration changes or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBRetrieving monitors\fP 
.PP
\fBMonitor configuration changes\fP 
.PP
\fBglfwGetPrimaryMonitor\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function returns an array of handles for all currently connected monitors\&. The primary monitor is always first in the returned array\&. If no monitors were found, this function returns \fCNULL\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP Where to store the number of monitors in the returned array\&. This is set to zero if an error occurred\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of monitor handles, or \fCNULL\fP if no monitors were found or if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is guaranteed to be valid only until the monitor configuration changes or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBRetrieving monitors\fP 
.PP
\fBMonitor configuration changes\fP 
.PP
\fBglfwGetPrimaryMonitor\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void* glfwGetMonitorUserPointer (\fBGLFWmonitor\fP * monitor)"

.PP
Returns the user pointer of the specified monitor\&. This function returns the current value of the user-defined pointer of the specified monitor\&. The initial value is \fCNULL\fP\&.
.PP
This function may be called from the monitor callback, even for a monitor that is being disconnected\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose pointer to return\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function may be called from any thread\&. Access is not synchronized\&.
.PP
\fBSee also:\fP
.RS 4
\fBUser pointer\fP 
.PP
\fBglfwSetMonitorUserPointer\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SS "GLFWAPI void glfwGetMonitorWorkarea (\fBGLFWmonitor\fP * monitor, int * xpos, int * ypos, int * width, int * height)"

.PP
Retrives the work area of the monitor\&. This function returns the position, in screen coordinates, of the upper-left corner of the work area of the specified monitor along with the work area size in screen coordinates\&. The work area is defined as the area of the monitor not occluded by the operating system task bar where present\&. If no task bar exists then the work area is the monitor resolution in screen coordinates\&.
.PP
Any or all of the position and size arguments may be \fCNULL\fP\&. If an error occurs, all non-\fCNULL\fP position and size arguments will be set to zero\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIxpos\fP Where to store the monitor x-coordinate, or \fCNULL\fP\&. 
.br
\fIypos\fP Where to store the monitor y-coordinate, or \fCNULL\fP\&. 
.br
\fIwidth\fP Where to store the monitor width, or \fCNULL\fP\&. 
.br
\fIheight\fP Where to store the monitor height, or \fCNULL\fP\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBWork area\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SS "GLFWAPI \fBGLFWmonitor\fP * glfwGetPrimaryMonitor (void)"

.PP
Returns the primary monitor\&. This function returns the primary monitor\&. This is usually the monitor where elements like the task bar or global menu bar are located\&.
.PP
\fBReturns:\fP
.RS 4
The primary monitor, or \fCNULL\fP if no monitors were found or if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBRemarks:\fP
.RS 4
The primary monitor is always first in the array returned by \fBglfwGetMonitors\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRetrieving monitors\fP 
.PP
\fBglfwGetMonitors\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function returns the primary monitor\&. This is usually the monitor where elements like the task bar or global menu bar are located\&.
.PP
\fBReturns:\fP
.RS 4
The primary monitor, or \fCNULL\fP if no monitors were found or if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBRemarks:\fP
.RS 4
The primary monitor is always first in the array returned by \fBglfwGetMonitors\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRetrieving monitors\fP 
.PP
\fBglfwGetMonitors\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI const \fBGLFWvidmode\fP * glfwGetVideoMode (\fBGLFWmonitor\fP * monitor)"

.PP
Returns the current mode of the specified monitor\&. This function returns the current video mode of the specified monitor\&. If you have created a full screen window for that monitor, the return value will depend on whether that window is iconified\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current mode of the monitor, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is valid until the specified monitor is disconnected or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoModes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. Replaces \fCglfwGetDesktopMode\fP\&.
.RE
.PP
This function returns the current video mode of the specified monitor\&. If you have created a full screen window for that monitor, the return value will depend on whether that window is iconified\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current mode of the monitor, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is valid until the specified monitor is disconnected or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoModes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. Replaces \fCglfwGetDesktopMode\fP\&. 
.RE
.PP

.SS "GLFWAPI const \fBGLFWvidmode\fP * glfwGetVideoModes (\fBGLFWmonitor\fP * monitor, int * count)"

.PP
Returns the available video modes for the specified monitor\&. This function returns an array of all video modes supported by the specified monitor\&. The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths) and then by resolution area (the product of width and height)\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIcount\fP Where to store the number of video modes in the returned array\&. This is set to zero if an error occurred\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of video modes, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoMode\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. @glfw3 Changed to return an array of modes for a specific monitor\&.
.RE
.PP
This function returns an array of all video modes supported by the specified monitor\&. The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths) and then by resolution area (the product of width and height)\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor to query\&. 
.br
\fIcount\fP Where to store the number of video modes in the returned array\&. This is set to zero if an error occurred\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An array of video modes, or \fCNULL\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@pointer_lifetime The returned array is allocated and freed by GLFW\&. You should not free it yourself\&. It is valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVideo modes\fP 
.PP
\fBglfwGetVideoMode\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. @glfw3 Changed to return an array of modes for a specific monitor\&. 
.RE
.PP

.SS "GLFWAPI void glfwSetGamma (\fBGLFWmonitor\fP * monitor, float gamma)"

.PP
Generates a gamma ramp and sets it for the specified monitor\&. This function generates an appropriately sized gamma ramp from the specified exponent and then calls \fBglfwSetGammaRamp\fP with it\&. The value must be a finite number greater than zero\&.
.PP
The software controlled gamma ramp is applied \fIin addition\fP to the hardware gamma correction, which today is usually an approximation of sRGB gamma\&. This means that setting a perfectly linear ramp, or gamma 1\&.0, will produce the default (usually sRGB-like) behavior\&.
.PP
For gamma correct rendering with OpenGL or OpenGL ES, see the \fBGLFW_SRGB_CAPABLE\fP hint\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose gamma ramp to set\&. 
.br
\fIgamma\fP The desired exponent\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP, \fBGLFW_INVALID_VALUE\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
@wayland Gamma handling is a priviledged protocol, this function will thus never be implemented and emits \fBGLFW_PLATFORM_ERROR\fP\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function generates a 256-element gamma ramp from the specified exponent and then calls \fBglfwSetGammaRamp\fP with it\&. The value must be a finite number greater than zero\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose gamma ramp to set\&. 
.br
\fIgamma\fP The desired exponent\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP, \fBGLFW_INVALID_VALUE\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwSetGammaRamp (\fBGLFWmonitor\fP * monitor, const \fBGLFWgammaramp\fP * ramp)"

.PP
Sets the current gamma ramp for the specified monitor\&. This function sets the current gamma ramp for the specified monitor\&. The original gamma ramp for that monitor is saved by GLFW the first time this function is called and is restored by \fBglfwTerminate\fP\&.
.PP
The software controlled gamma ramp is applied \fIin addition\fP to the hardware gamma correction, which today is usually an approximation of sRGB gamma\&. This means that setting a perfectly linear ramp, or gamma 1\&.0, will produce the default (usually sRGB-like) behavior\&.
.PP
For gamma correct rendering with OpenGL or OpenGL ES, see the \fBGLFW_SRGB_CAPABLE\fP hint\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose gamma ramp to set\&. 
.br
\fIramp\fP The gamma ramp to use\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
The size of the specified gamma ramp should match the size of the current ramp for that monitor\&.
.PP
@win32 The gamma ramp size must be 256\&.
.PP
@wayland Gamma handling is a priviledged protocol, this function will thus never be implemented and emits \fBGLFW_PLATFORM_ERROR\fP\&.
.RE
.PP
@pointer_lifetime The specified gamma ramp is copied before this function returns\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function sets the current gamma ramp for the specified monitor\&. The original gamma ramp for that monitor is saved by GLFW the first time this function is called and is restored by \fBglfwTerminate\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose gamma ramp to set\&. 
.br
\fIramp\fP The gamma ramp to use\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP and \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
Gamma ramp sizes other than 256 are not supported by all platforms or graphics hardware\&.
.PP
@win32 The gamma ramp size must be 256\&.
.RE
.PP
@pointer_lifetime The specified gamma ramp is copied before this function returns\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBGamma ramp\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI \fBGLFWmonitorfun\fP glfwSetMonitorCallback (\fBGLFWmonitorfun\fP callback)"

.PP
Sets the monitor configuration callback\&. This function sets the monitor configuration callback, or removes the currently set callback\&. This is called when a monitor is connected to or disconnected from the system\&.
.PP
\fBParameters:\fP
.RS 4
\fIcallback\fP The new callback, or \fCNULL\fP to remove the currently set callback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previously set callback, or \fCNULL\fP if no callback was set or the library had not been \fBinitialized\fP\&.
.RE
.PP
@callback_signature 
.PP
.nf
void function_name(GLFWmonitor* monitor, int event)

.fi
.PP
 For more information about the callback parameters, see the \fBfunction pointer type\fP\&.
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor configuration changes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function sets the monitor configuration callback, or removes the currently set callback\&. This is called when a monitor is connected to or disconnected from the system\&.
.PP
\fBParameters:\fP
.RS 4
\fIcbfun\fP The new callback, or \fCNULL\fP to remove the currently set callback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previously set callback, or \fCNULL\fP if no callback was set or the library had not been \fBinitialized\fP\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBMonitor configuration changes\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwSetMonitorUserPointer (\fBGLFWmonitor\fP * monitor, void * pointer)"

.PP
Sets the user pointer of the specified monitor\&. This function sets the user-defined pointer of the specified monitor\&. The current value is retained until the monitor is disconnected\&. The initial value is \fCNULL\fP\&.
.PP
This function may be called from the monitor callback, even for a monitor that is being disconnected\&.
.PP
\fBParameters:\fP
.RS 4
\fImonitor\fP The monitor whose pointer to set\&. 
.br
\fIpointer\fP The new value\&.
.RE
.PP
@errors Possible errors include \fBGLFW_NOT_INITIALIZED\fP\&.
.PP
@thread_safety This function may be called from any thread\&. Access is not synchronized\&.
.PP
\fBSee also:\fP
.RS 4
\fBUser pointer\fP 
.PP
\fBglfwGetMonitorUserPointer\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
