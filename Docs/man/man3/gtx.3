.TH "gtx" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx \- Experimental features not specified by GLSL specification\&.  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBGLM_GTX_associated_min_max\fP"
.br
.RI "Min and max functions that return associated values not the compared onces\&. "
.ti -1c
.RI "\fBGLM_GTX_bit\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_closest_point\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_color_encoding\fP"
.br
.RI "Allow to perform bit operations on integer values\&. "
.ti -1c
.RI "\fBGLM_GTX_color_space\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_color_space_YCoCg\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_common\fP"
.br
.RI "Provide functions to increase the compatibility with Cg and HLSL languages\&. "
.ti -1c
.RI "\fBGLM_GTX_compatibility\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_component_wise\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_dual_quaternion\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_easing\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_euler_angles\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_extend\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_extented_min_max\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_exterior_product\fP"
.br
.RI "Allow to perform bit operations on integer values\&. "
.ti -1c
.RI "\fBGLM_GTX_fast_exponential\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_fast_square_root\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_fast_trigonometry\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_functions\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_gradient_paint\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_handed_coordinate_space\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_hash\fP"
.br
.RI "Add std::hash support for glm types\&. "
.ti -1c
.RI "\fBGLM_GTX_integer\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_intersect\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_io\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_log_base\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_cross_product\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_decompose\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_factorisation\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_interpolation\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_major_storage\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_operation\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_query\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_matrix_transform_2d\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_mixed_producte\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_norm\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_normal\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_normalize_dot\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_number_precision\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_optimum_pow\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_orthonormalize\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_perpendicular\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_polar_coordinates\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_projection\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_quaternion\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_range\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_raw_data\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_rotate_normalized_axis\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_rotate_vector\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_scalar_relational\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_spline\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_std_based_type\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_string_cast\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_texture\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_transform\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_transform2\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_type_aligned\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_type_trait\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_vec_swizzle\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_vector_angle\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_vector_query\fP"
.br
.ti -1c
.RI "\fBGLM_GTX_wrap\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Experimental features not specified by GLSL specification\&. 

Experimental extensions are useful functions and types, but the development of their API and functionality is not necessarily stable\&. They can change substantially between versions\&. Backwards compatibility is not much of an issue for them\&.
.PP
Even if it's highly unrecommended, it's possible to include all the extensions at once by including <\fBglm/ext\&.hpp\fP>\&. Otherwise, each extension needs to be included a specific file\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
