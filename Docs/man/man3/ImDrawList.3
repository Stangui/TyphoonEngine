.TH "ImDrawList" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ImDrawList
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBImDrawList\fP (const \fBImDrawListSharedData\fP *shared_data)"
.br
.ti -1c
.RI "IMGUI_API void \fBPushClipRect\fP (\fBImVec2\fP clip_rect_min, \fBImVec2\fP clip_rect_max, bool intersect_with_current_clip_rect=false)"
.br
.ti -1c
.RI "IMGUI_API void \fBPushClipRectFullScreen\fP ()"
.br
.ti -1c
.RI "IMGUI_API void \fBPopClipRect\fP ()"
.br
.ti -1c
.RI "IMGUI_API void \fBPushTextureID\fP (ImTextureID texture_id)"
.br
.ti -1c
.RI "IMGUI_API void \fBPopTextureID\fP ()"
.br
.ti -1c
.RI "\fBImVec2\fP \fBGetClipRectMin\fP () const"
.br
.ti -1c
.RI "\fBImVec2\fP \fBGetClipRectMax\fP () const"
.br
.ti -1c
.RI "IMGUI_API void \fBAddLine\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, ImU32 col, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddRect\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, ImU32 col, float rounding=0\&.0f, int rounding_corners_flags=ImDrawCornerFlags_All, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddRectFilled\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, ImU32 col, float rounding=0\&.0f, int rounding_corners_flags=ImDrawCornerFlags_All)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddRectFilledMultiColor\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddQuad\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, const \fBImVec2\fP &d, ImU32 col, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddQuadFilled\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, const \fBImVec2\fP &d, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddTriangle\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, ImU32 col, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddTriangleFilled\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddCircle\fP (const \fBImVec2\fP &centre, float radius, ImU32 col, int num_segments=12, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddCircleFilled\fP (const \fBImVec2\fP &centre, float radius, ImU32 col, int num_segments=12)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddText\fP (const \fBImVec2\fP &pos, ImU32 col, const char *text_begin, const char *text_end=NULL)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddText\fP (const \fBImFont\fP *font, float font_size, const \fBImVec2\fP &pos, ImU32 col, const char *text_begin, const char *text_end=NULL, float wrap_width=0\&.0f, const ImVec4 *cpu_fine_clip_rect=NULL)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddImage\fP (ImTextureID user_texture_id, const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &uv_a=\fBImVec2\fP(0, 0), const \fBImVec2\fP &uv_b=\fBImVec2\fP(1, 1), ImU32 col=IM_COL32_WHITE)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddImageQuad\fP (ImTextureID user_texture_id, const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, const \fBImVec2\fP &d, const \fBImVec2\fP &uv_a=\fBImVec2\fP(0, 0), const \fBImVec2\fP &uv_b=\fBImVec2\fP(1, 0), const \fBImVec2\fP &uv_c=\fBImVec2\fP(1, 1), const \fBImVec2\fP &uv_d=\fBImVec2\fP(0, 1), ImU32 col=IM_COL32_WHITE)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddImageRounded\fP (ImTextureID user_texture_id, const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &uv_a, const \fBImVec2\fP &uv_b, ImU32 col, float rounding, int rounding_corners=ImDrawCornerFlags_All)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddPolyline\fP (const \fBImVec2\fP *points, int num_points, ImU32 col, bool closed, float thickness)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddConvexPolyFilled\fP (const \fBImVec2\fP *points, int num_points, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddBezierCurve\fP (const \fBImVec2\fP &pos0, const \fBImVec2\fP &cp0, const \fBImVec2\fP &cp1, const \fBImVec2\fP &pos1, ImU32 col, float thickness, int num_segments=0)"
.br
.ti -1c
.RI "void \fBPathClear\fP ()"
.br
.ti -1c
.RI "void \fBPathLineTo\fP (const \fBImVec2\fP &pos)"
.br
.ti -1c
.RI "void \fBPathLineToMergeDuplicate\fP (const \fBImVec2\fP &pos)"
.br
.ti -1c
.RI "void \fBPathFillConvex\fP (ImU32 col)"
.br
.ti -1c
.RI "void \fBPathStroke\fP (ImU32 col, bool closed, float thickness=1\&.0f)"
.br
.ti -1c
.RI "IMGUI_API void \fBPathArcTo\fP (const \fBImVec2\fP &centre, float radius, float a_min, float a_max, int num_segments=10)"
.br
.ti -1c
.RI "IMGUI_API void \fBPathArcToFast\fP (const \fBImVec2\fP &centre, float radius, int a_min_of_12, int a_max_of_12)"
.br
.ti -1c
.RI "IMGUI_API void \fBPathBezierCurveTo\fP (const \fBImVec2\fP &p1, const \fBImVec2\fP &p2, const \fBImVec2\fP &p3, int num_segments=0)"
.br
.ti -1c
.RI "IMGUI_API void \fBPathRect\fP (const \fBImVec2\fP &rect_min, const \fBImVec2\fP &rect_max, float rounding=0\&.0f, int rounding_corners_flags=ImDrawCornerFlags_All)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddCallback\fP (ImDrawCallback callback, void *callback_data)"
.br
.ti -1c
.RI "IMGUI_API void \fBAddDrawCmd\fP ()"
.br
.ti -1c
.RI "IMGUI_API \fBImDrawList\fP * \fBCloneOutput\fP () const"
.br
.ti -1c
.RI "void \fBChannelsSplit\fP (int count)"
.br
.ti -1c
.RI "void \fBChannelsMerge\fP ()"
.br
.ti -1c
.RI "void \fBChannelsSetCurrent\fP (int n)"
.br
.ti -1c
.RI "IMGUI_API void \fBClear\fP ()"
.br
.ti -1c
.RI "IMGUI_API void \fBClearFreeMemory\fP ()"
.br
.ti -1c
.RI "IMGUI_API void \fBPrimReserve\fP (int idx_count, int vtx_count)"
.br
.ti -1c
.RI "IMGUI_API void \fBPrimRect\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBPrimRectUV\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &uv_a, const \fBImVec2\fP &uv_b, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBPrimQuadUV\fP (const \fBImVec2\fP &a, const \fBImVec2\fP &b, const \fBImVec2\fP &c, const \fBImVec2\fP &d, const \fBImVec2\fP &uv_a, const \fBImVec2\fP &uv_b, const \fBImVec2\fP &uv_c, const \fBImVec2\fP &uv_d, ImU32 col)"
.br
.ti -1c
.RI "void \fBPrimWriteVtx\fP (const \fBImVec2\fP &pos, const \fBImVec2\fP &uv, ImU32 col)"
.br
.ti -1c
.RI "void \fBPrimWriteIdx\fP (ImDrawIdx idx)"
.br
.ti -1c
.RI "void \fBPrimVtx\fP (const \fBImVec2\fP &pos, const \fBImVec2\fP &uv, ImU32 col)"
.br
.ti -1c
.RI "IMGUI_API void \fBUpdateClipRect\fP ()"
.br
.ti -1c
.RI "IMGUI_API void \fBUpdateTextureID\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBImVector\fP< \fBImDrawCmd\fP > \fBCmdBuffer\fP"
.br
.ti -1c
.RI "\fBImVector\fP< ImDrawIdx > \fBIdxBuffer\fP"
.br
.ti -1c
.RI "\fBImVector\fP< \fBImDrawVert\fP > \fBVtxBuffer\fP"
.br
.ti -1c
.RI "ImDrawListFlags \fBFlags\fP"
.br
.ti -1c
.RI "const \fBImDrawListSharedData\fP * \fB_Data\fP"
.br
.ti -1c
.RI "const char * \fB_OwnerName\fP"
.br
.ti -1c
.RI "unsigned int \fB_VtxCurrentOffset\fP"
.br
.ti -1c
.RI "unsigned int \fB_VtxCurrentIdx\fP"
.br
.ti -1c
.RI "\fBImDrawVert\fP * \fB_VtxWritePtr\fP"
.br
.ti -1c
.RI "ImDrawIdx * \fB_IdxWritePtr\fP"
.br
.ti -1c
.RI "\fBImVector\fP< \fBImVec4\fP > \fB_ClipRectStack\fP"
.br
.ti -1c
.RI "\fBImVector\fP< ImTextureID > \fB_TextureIdStack\fP"
.br
.ti -1c
.RI "\fBImVector\fP< \fBImVec2\fP > \fB_Path\fP"
.br
.ti -1c
.RI "\fBImDrawListSplitter\fP \fB_Splitter\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
