.TH "basic_writer< Range >" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_writer< Range >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <format\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Range::value_type \fBchar_type\fP"
.br
.ti -1c
.RI "typedef \fBbasic_format_specs\fP< char_type > \fBformat_specs\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_writer\fP (Range out, \fBinternal::locale_ref\fP loc=\fBinternal::locale_ref\fP())"
.br
.ti -1c
.RI "iterator \fBout\fP () const"
.br
.ti -1c
.RI "void \fBwrite\fP (int value)"
.br
.ti -1c
.RI "void \fBwrite\fP (long value)"
.br
.ti -1c
.RI "void \fBwrite\fP (long long value)"
.br
.ti -1c
.RI "void \fBwrite\fP (unsigned value)"
.br
.ti -1c
.RI "void \fBwrite\fP (unsigned long value)"
.br
.ti -1c
.RI "void \fBwrite\fP (unsigned long long value)"
.br
.ti -1c
.RI "template<typename T , typename FormatSpec , typename\&.\&.\&. FormatSpecs> std::enable_if< std::is_integral< T >::value, void >::type \fBwrite\fP (T value, FormatSpec spec, FormatSpecs\&.\&.\&. specs)"
.br
.ti -1c
.RI "void \fBwrite\fP (double value)"
.br
.ti -1c
.RI "void \fBwrite\fP (long double value)"
.br
.ti -1c
.RI "void \fBwrite\fP (char value)"
.br
.ti -1c
.RI "void \fBwrite\fP (wchar_t value)"
.br
.ti -1c
.RI "void \fBwrite\fP (\fBstring_view\fP value)"
.br
.ti -1c
.RI "void \fBwrite\fP (\fBwstring_view\fP value)"
.br
.ti -1c
.RI "template<typename Char > void \fBwrite\fP (const Char *s, std::size_t size, const \fBalign_spec\fP &spec)"
.br
.ti -1c
.RI "template<typename Char > void \fBwrite\fP (\fBbasic_string_view\fP< Char > s, const \fBformat_specs\fP &spec=\fBformat_specs\fP())"
.br
.ti -1c
.RI "template<typename T > std::enable_if< std::is_same< T, void >::value >::type \fBwrite\fP (const T *p)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "decltype(internal::declval< Range >()\&.begin()) typedef \fBiterator\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename Char > class \fBinternal::arg_formatter_base\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Range>
.br
class basic_writer< Range >"
This template provides operations for formatting and writing data into a character range\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Range> \fBbasic_writer\fP< Range >::\fBbasic_writer\fP (Range out, \fBinternal::locale_ref\fP loc = \fC\fBinternal::locale_ref\fP()\fP)\fC [inline]\fP, \fC [explicit]\fP"
Constructs a \fC\fBbasic_writer\fP\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename Range> template<typename T , typename FormatSpec , typename\&.\&.\&. FormatSpecs> std::enable_if<std::is_integral<T>::value, void>::type \fBbasic_writer\fP< Range >::write (T value, FormatSpec spec, FormatSpecs\&.\&.\&. specs)\fC [inline]\fP"
\\rst Formats \fIvalue\fP and writes it to the buffer\&. \\endrst 
.SS "template<typename Range> void \fBbasic_writer\fP< Range >::write (long double value)\fC [inline]\fP"
\\rst Formats \fIvalue\fP using the general format for floating-point numbers (\fC'g'\fP) and writes it to the buffer\&. \\endrst 
.SS "template<typename Range> void \fBbasic_writer\fP< Range >::write (char value)\fC [inline]\fP"
Writes a character to the buffer\&. 
.SS "template<typename Range> void \fBbasic_writer\fP< Range >::write (\fBstring_view\fP value)\fC [inline]\fP"
\\rst Writes \fIvalue\fP to the buffer\&. \\endrst 

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
