.TH "init" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
init \- Functions and types related to initialization and error handling\&.  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBError codes\fP"
.br
.RI "Error codes\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGLFW_TRUE\fP   1"
.br
.RI "One\&. "
.ti -1c
.RI "#define \fBGLFW_FALSE\fP   0"
.br
.RI "Zero\&. "
.ti -1c
.RI "#define \fBGLFW_JOYSTICK_HAT_BUTTONS\fP   0x00050001"
.br
.RI "Joystick hat buttons init hint\&. "
.ti -1c
.RI "#define \fBGLFW_COCOA_CHDIR_RESOURCES\fP   0x00051001"
.br
.RI "macOS specific init hint\&. "
.ti -1c
.RI "#define \fBGLFW_COCOA_MENUBAR\fP   0x00051002"
.br
.RI "macOS specific init hint\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBGLFWerrorfun\fP) (int, const char *)"
.br
.RI "The function pointer type for error callbacks\&. "
.ti -1c
.RI "typedef void(* \fBGLFWerrorfun\fP) (int, const char *)"
.br
.RI "The function signature for error callbacks\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "GLFWAPI int \fBglfwInit\fP (void)"
.br
.RI "Initializes the GLFW library\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwTerminate\fP (void)"
.br
.RI "Terminates the GLFW library\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwInitHint\fP (int hint, int value)"
.br
.RI "Sets the specified init hint to the desired value\&. "
.ti -1c
.RI "GLFWAPI void \fBglfwGetVersion\fP (int *major, int *minor, int *rev)"
.br
.RI "Retrieves the version of the GLFW library\&. "
.ti -1c
.RI "GLFWAPI const char * \fBglfwGetVersionString\fP (void)"
.br
.RI "Returns a string describing the compile-time configuration\&. "
.ti -1c
.RI "GLFWAPI int \fBglfwGetError\fP (const char **description)"
.br
.RI "Returns and clears the last error for the calling thread\&. "
.ti -1c
.RI "GLFWAPI \fBGLFWerrorfun\fP \fBglfwSetErrorCallback\fP (\fBGLFWerrorfun\fP callback)"
.br
.RI "Sets the error callback\&. "
.in -1c
.SS "GLFW version macros"

.in +1c
.ti -1c
.RI "#define \fBGLFW_VERSION_MAJOR\fP   3"
.br
.RI "The major version number of the GLFW library\&. "
.ti -1c
.RI "#define \fBGLFW_VERSION_MINOR\fP   4"
.br
.RI "The minor version number of the GLFW library\&. "
.ti -1c
.RI "#define \fBGLFW_VERSION_REVISION\fP   0"
.br
.RI "The revision number of the GLFW library\&. "
.in -1c
.SS "GLFW version macros"

.in +1c
.ti -1c
.RI "#define \fBGLFW_VERSION_MAJOR\fP   3"
.br
.RI "The major version number of the GLFW library\&. "
.ti -1c
.RI "#define \fBGLFW_VERSION_MINOR\fP   2"
.br
.RI "The minor version number of the GLFW library\&. "
.ti -1c
.RI "#define \fBGLFW_VERSION_REVISION\fP   0"
.br
.RI "The revision number of the GLFW library\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functions and types related to initialization and error handling\&. 

This is the reference documentation for initialization and termination of the library, version management and error handling\&. For more task-oriented information, see the \fBIntroduction to the API\fP\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define GLFW_COCOA_CHDIR_RESOURCES   0x00051001"

.PP
macOS specific init hint\&. macOS specific \fBinit hint\fP\&. 
.SS "#define GLFW_COCOA_MENUBAR   0x00051002"

.PP
macOS specific init hint\&. macOS specific \fBinit hint\fP\&. 
.SS "#define GLFW_FALSE   0"

.PP
Zero\&. This is only semantic sugar for the number 0\&. You can instead use \fC0\fP or \fCfalse\fP or \fC_False\fP or \fCGL_FALSE\fP or \fCVK_FALSE\fP or anything else that is equal to zero\&. 
.SS "#define GLFW_JOYSTICK_HAT_BUTTONS   0x00050001"

.PP
Joystick hat buttons init hint\&. Joystick hat buttons \fBinit hint\fP\&. 
.SS "#define GLFW_TRUE   1"

.PP
One\&. This is only semantic sugar for the number 1\&. You can instead use \fC1\fP or \fCtrue\fP or \fC_True\fP or \fCGL_TRUE\fP or \fCVK_TRUE\fP or anything else that is equal to one\&. 
.SS "#define GLFW_VERSION_MAJOR   3"

.PP
The major version number of the GLFW library\&. This is incremented when the API is changed in non-compatible ways\&. 
.SS "#define GLFW_VERSION_MAJOR   3"

.PP
The major version number of the GLFW library\&. This is incremented when the API is changed in non-compatible ways\&. 
.SS "#define GLFW_VERSION_MINOR   2"

.PP
The minor version number of the GLFW library\&. This is incremented when features are added to the API but it remains backward-compatible\&. 
.SS "#define GLFW_VERSION_MINOR   4"

.PP
The minor version number of the GLFW library\&. This is incremented when features are added to the API but it remains backward-compatible\&. 
.SS "#define GLFW_VERSION_REVISION   0"

.PP
The revision number of the GLFW library\&. This is incremented when a bug fix release is made that does not contain any API changes\&. 
.SS "#define GLFW_VERSION_REVISION   0"

.PP
The revision number of the GLFW library\&. This is incremented when a bug fix release is made that does not contain any API changes\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(*  GLFWerrorfun) (int, const char *)"

.PP
The function signature for error callbacks\&. This is the function signature for error callback functions\&.
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP An \fBerror code\fP\&. 
.br
\fIdescription\fP A UTF-8 encoded string describing the error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBError handling\fP 
.PP
\fBglfwSetErrorCallback\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "typedef void(*  GLFWerrorfun) (int, const char *)"

.PP
The function pointer type for error callbacks\&. This is the function pointer type for error callbacks\&. An error callback function has the following signature: 
.PP
.nf
void callback_name(int error_code, const char* description)

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI\fBerror_code\fP\fP An \fBerror code\fP\&. Future releases may add more error codes\&. 
.br
\fIdescription\fP A UTF-8 encoded string describing the error\&.
.RE
.PP
@pointer_lifetime The error description string is valid until the callback function returns\&.
.PP
\fBSee also:\fP
.RS 4
\fBError handling\fP 
.PP
\fBglfwSetErrorCallback\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "GLFWAPI int glfwGetError (const char ** description)"

.PP
Returns and clears the last error for the calling thread\&. This function returns and clears the \fBerror code\fP of the last error that occurred on the calling thread, and optionally a UTF-8 encoded human-readable description of it\&. If no error has occurred since the last call, it returns \fBGLFW_NO_ERROR\fP (zero) and the description pointer is set to \fCNULL\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIdescription\fP Where to store the error description pointer, or \fCNULL\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The last error code for the calling thread, or \fBGLFW_NO_ERROR\fP (zero)\&.
.RE
.PP
@errors None\&.
.PP
@pointer_lifetime The returned string is allocated and freed by GLFW\&. You should not free it yourself\&. It is guaranteed to be valid only until the next error occurs or the library is terminated\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function may be called from any thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBError handling\fP 
.PP
\fBglfwSetErrorCallback\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SS "GLFWAPI void glfwGetVersion (int * major, int * minor, int * rev)"

.PP
Retrieves the version of the GLFW library\&. This function retrieves the major, minor and revision numbers of the GLFW library\&. It is intended for when you are using GLFW as a shared library and want to ensure that you are using the minimum required version\&.
.PP
Any or all of the version arguments may be \fCNULL\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fImajor\fP Where to store the major version number, or \fCNULL\fP\&. 
.br
\fIminor\fP Where to store the minor version number, or \fCNULL\fP\&. 
.br
\fIrev\fP Where to store the revision number, or \fCNULL\fP\&.
.RE
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function may be called from any thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVersion management\fP 
.PP
\fBglfwGetVersionString\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&.
.RE
.PP
This function retrieves the major, minor and revision numbers of the GLFW library\&. It is intended for when you are using GLFW as a shared library and want to ensure that you are using the minimum required version\&.
.PP
Any or all of the version arguments may be \fCNULL\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fImajor\fP Where to store the major version number, or \fCNULL\fP\&. 
.br
\fIminor\fP Where to store the minor version number, or \fCNULL\fP\&. 
.br
\fIrev\fP Where to store the revision number, or \fCNULL\fP\&.
.RE
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function may be called from any thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVersion management\fP 
.PP
\fBglfwGetVersionString\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. 
.RE
.PP

.SS "GLFWAPI const char * glfwGetVersionString (void)"

.PP
Returns a string describing the compile-time configuration\&. This function returns the compile-time generated \fBversion string\fP of the GLFW library binary\&. It describes the version, platform, compiler and any platform-specific compile-time options\&. It should not be confused with the OpenGL or OpenGL ES version string, queried with \fCglGetString\fP\&.
.PP
\fBDo not use the version string\fP to parse the GLFW library version\&. The \fBglfwGetVersion\fP function provides the version of the running library binary in numerical format\&.
.PP
\fBReturns:\fP
.RS 4
The ASCII encoded GLFW version string\&.
.RE
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@pointer_lifetime The returned string is static and compile-time generated\&.
.PP
@thread_safety This function may be called from any thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVersion management\fP 
.PP
\fBglfwGetVersion\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function returns the compile-time generated \fBversion string\fP of the GLFW library binary\&. It describes the version, platform, compiler and any platform-specific compile-time options\&. It should not be confused with the OpenGL or OpenGL ES version string, queried with \fCglGetString\fP\&.
.PP
\fBDo not use the version string\fP to parse the GLFW library version\&. The \fBglfwGetVersion\fP function provides the version of the running library binary in numerical format\&.
.PP
\fBReturns:\fP
.RS 4
The ASCII encoded GLFW version string\&.
.RE
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@pointer_lifetime The returned string is static and compile-time generated\&.
.PP
@thread_safety This function may be called from any thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBVersion management\fP 
.PP
\fBglfwGetVersion\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI int glfwInit (void)"

.PP
Initializes the GLFW library\&. This function initializes the GLFW library\&. Before most GLFW functions can be used, GLFW must be initialized, and before an application terminates GLFW should be terminated in order to free any resources allocated during or after initialization\&.
.PP
If this function fails, it calls \fBglfwTerminate\fP before returning\&. If it succeeds, you should call \fBglfwTerminate\fP before the application exits\&.
.PP
Additional calls to this function after successful initialization but before termination will return \fCGLFW_TRUE\fP immediately\&.
.PP
\fBReturns:\fP
.RS 4
\fCGLFW_TRUE\fP if successful, or \fCGLFW_FALSE\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
@macos This function will change the current directory of the application to the \fCContents/Resources\fP subdirectory of the application's bundle, if present\&. This can be disabled with the \fBGLFW_COCOA_CHDIR_RESOURCES\fP init hint\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBInitialization and termination\fP 
.PP
\fBglfwTerminate\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&.
.RE
.PP
This function initializes the GLFW library\&. Before most GLFW functions can be used, GLFW must be initialized, and before an application terminates GLFW should be terminated in order to free any resources allocated during or after initialization\&.
.PP
If this function fails, it calls \fBglfwTerminate\fP before returning\&. If it succeeds, you should call \fBglfwTerminate\fP before the application exits\&.
.PP
Additional calls to this function after successful initialization but before termination will return \fCGLFW_TRUE\fP immediately\&.
.PP
\fBReturns:\fP
.RS 4
\fCGLFW_TRUE\fP if successful, or \fCGLFW_FALSE\fP if an \fBerror\fP occurred\&.
.RE
.PP
@errors Possible errors include \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
@osx This function will change the current directory of the application to the \fCContents/Resources\fP subdirectory of the application's bundle, if present\&. This can be disabled with a \fBcompile-time option\fP\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBInitialization and termination\fP 
.PP
\fBglfwTerminate\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwInitHint (int hint, int value)"

.PP
Sets the specified init hint to the desired value\&. This function sets hints for the next initialization of GLFW\&.
.PP
The values you set hints to are never reset by GLFW, but they only take effect during initialization\&. Once GLFW has been initialized, any values you set will be ignored until the library is terminated and initialized again\&.
.PP
Some hints are platform specific\&. These may be set on any platform but they will only affect their specific platform\&. Other platforms will ignore them\&. Setting these hints requires no platform specific headers or functions\&.
.PP
\fBParameters:\fP
.RS 4
\fIhint\fP The \fBinit hint\fP to set\&. 
.br
\fIvalue\fP The new value of the init hint\&.
.RE
.PP
@errors Possible errors include \fBGLFW_INVALID_ENUM\fP and \fBGLFW_INVALID_VALUE\fP\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
init_hints 
.PP
\fBglfwInit\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.3\&. 
.RE
.PP

.SS "GLFWAPI \fBGLFWerrorfun\fP glfwSetErrorCallback (\fBGLFWerrorfun\fP callback)"

.PP
Sets the error callback\&. This function sets the error callback, which is called with an error code and a human-readable description each time a GLFW error occurs\&.
.PP
The error code is set before the callback is called\&. Calling \fBglfwGetError\fP from the error callback will return the same value as the error code argument\&.
.PP
The error callback is called on the thread where the error occurred\&. If you are using GLFW from multiple threads, your error callback needs to be written accordingly\&.
.PP
Because the description string may have been generated specifically for that error, it is not guaranteed to be valid after the callback has returned\&. If you wish to use it after the callback returns, you need to make a copy\&.
.PP
Once set, the error callback remains set even after the library has been terminated\&.
.PP
\fBParameters:\fP
.RS 4
\fIcallback\fP The new callback, or \fCNULL\fP to remove the currently set callback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previously set callback, or \fCNULL\fP if no callback was set\&.
.RE
.PP
@callback_signature 
.PP
.nf
void callback_name(int error_code, const char* description)

.fi
.PP
 For more information about the callback parameters, see the \fBcallback pointer type\fP\&.
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBError handling\fP 
.PP
\fBglfwGetError\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&.
.RE
.PP
This function sets the error callback, which is called with an error code and a human-readable description each time a GLFW error occurs\&.
.PP
The error callback is called on the thread where the error occurred\&. If you are using GLFW from multiple threads, your error callback needs to be written accordingly\&.
.PP
Because the description string may have been generated specifically for that error, it is not guaranteed to be valid after the callback has returned\&. If you wish to use it after the callback returns, you need to make a copy\&.
.PP
Once set, the error callback remains set even after the library has been terminated\&.
.PP
\fBParameters:\fP
.RS 4
\fIcbfun\fP The new callback, or \fCNULL\fP to remove the currently set callback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previously set callback, or \fCNULL\fP if no callback was set\&.
.RE
.PP
@errors None\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBError handling\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 3\&.0\&. 
.RE
.PP

.SS "GLFWAPI void glfwTerminate (void)"

.PP
Terminates the GLFW library\&. This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other allocated resources\&. Once this function is called, you must again call \fBglfwInit\fP successfully before you will be able to use most GLFW functions\&.
.PP
If GLFW has been successfully initialized, this function should be called before the application exits\&. If initialization fails, there is no need to call this function, as it is called by \fBglfwInit\fP before it returns failure\&.
.PP
@errors Possible errors include \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
\fBWarning:\fP
.RS 4
The contexts of any remaining windows must not be current on any other thread when this function is called\&.
.RE
.PP
@reentrancy This function must not be called from a callback\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBInitialization and termination\fP 
.PP
\fBglfwInit\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&.
.RE
.PP
This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other allocated resources\&. Once this function is called, you must again call \fBglfwInit\fP successfully before you will be able to use most GLFW functions\&.
.PP
If GLFW has been successfully initialized, this function should be called before the application exits\&. If initialization fails, there is no need to call this function, as it is called by \fBglfwInit\fP before it returns failure\&.
.PP
@errors Possible errors include \fBGLFW_PLATFORM_ERROR\fP\&.
.PP
\fBRemarks:\fP
.RS 4
This function may be called before \fBglfwInit\fP\&.
.RE
.PP
\fBWarning:\fP
.RS 4
The contexts of any remaining windows must not be current on any other thread when this function is called\&.
.RE
.PP
@reentrancy This function must not be called from a callback\&.
.PP
@thread_safety This function must only be called from the main thread\&.
.PP
\fBSee also:\fP
.RS 4
\fBInitialization and termination\fP 
.PP
\fBglfwInit\fP
.RE
.PP
\fBSince:\fP
.RS 4
Added in version 1\&.0\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
