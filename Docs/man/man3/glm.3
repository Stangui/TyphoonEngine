.TH "glm" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
glm \- \fBCore features\fP  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBcompute_YCoCgR\fP"
.br
.ti -1c
.RI "class \fBcompute_YCoCgR< T, Q, true >\fP"
.br
.ti -1c
.RI "struct \fBmat\fP"
.br
.ti -1c
.RI "struct \fBmat< 2, 2, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 2, 3, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 2, 4, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 3, 2, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 3, 3, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 3, 4, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 4, 2, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 4, 3, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBmat< 4, 4, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBqua\fP"
.br
.ti -1c
.RI "struct \fBtdualquat\fP"
.br
.ti -1c
.RI "struct \fBtype\fP"
.br
.ti -1c
.RI "struct \fBtype< mat< C, R, T, Q > >\fP"
.br
.ti -1c
.RI "struct \fBtype< qua< T, Q > >\fP"
.br
.ti -1c
.RI "struct \fBtype< tdualquat< T, Q > >\fP"
.br
.ti -1c
.RI "struct \fBtype< vec< L, T, Q > >\fP"
.br
.ti -1c
.RI "struct \fBvec\fP"
.br
.ti -1c
.RI "struct \fBvec< 1, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBvec< 2, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBvec< 3, T, Q >\fP"
.br
.ti -1c
.RI "struct \fBvec< 4, T, Q >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBqualifier\fP \fBprecision\fP"
.br
.ti -1c
.RI "typedef int \fBlength_t\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBuint\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, defaultp > \fBdmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, defaultp > \fBdmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBlowp\fP > \fBlowp_dmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBmediump\fP > \fBmediump_dmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBhighp\fP > \fBhighp_dmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBlowp\fP > \fBlowp_dmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBmediump\fP > \fBmediump_dmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBhighp\fP > \fBhighp_dmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, defaultp > \fBdmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBlowp\fP > \fBlowp_dmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBmediump\fP > \fBmediump_dmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBhighp\fP > \fBhighp_dmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, defaultp > \fBdmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBlowp\fP > \fBlowp_dmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBmediump\fP > \fBmediump_dmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBhighp\fP > \fBhighp_dmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, defaultp > \fBdmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBlowp\fP > \fBlowp_dmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBmediump\fP > \fBmediump_dmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBhighp\fP > \fBhighp_dmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, defaultp > \fBdmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, defaultp > \fBdmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBlowp\fP > \fBlowp_dmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBmediump\fP > \fBmediump_dmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBhighp\fP > \fBhighp_dmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBlowp\fP > \fBlowp_dmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBmediump\fP > \fBmediump_dmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBhighp\fP > \fBhighp_dmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, defaultp > \fBdmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBlowp\fP > \fBlowp_dmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBmediump\fP > \fBmediump_dmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBhighp\fP > \fBhighp_dmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, defaultp > \fBdmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBlowp\fP > \fBlowp_dmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBmediump\fP > \fBmediump_dmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBhighp\fP > \fBhighp_dmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, defaultp > \fBdmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBlowp\fP > \fBlowp_dmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBmediump\fP > \fBmediump_dmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBhighp\fP > \fBhighp_dmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, defaultp > \fBdmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, defaultp > \fBdmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBlowp\fP > \fBlowp_dmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBmediump\fP > \fBmediump_dmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBhighp\fP > \fBhighp_dmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBlowp\fP > \fBlowp_dmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBmediump\fP > \fBmediump_dmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBhighp\fP > \fBhighp_dmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, defaultp > \fBmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, defaultp > \fBmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBlowp\fP > \fBlowp_mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBmediump\fP > \fBmediump_mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBhighp\fP > \fBhighp_mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBlowp\fP > \fBlowp_mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBmediump\fP > \fBmediump_mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBhighp\fP > \fBhighp_mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, defaultp > \fBmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBlowp\fP > \fBlowp_mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBmediump\fP > \fBmediump_mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBhighp\fP > \fBhighp_mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, defaultp > \fBmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBlowp\fP > \fBlowp_mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBmediump\fP > \fBmediump_mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBhighp\fP > \fBhighp_mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, defaultp > \fBmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBlowp\fP > \fBlowp_mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBmediump\fP > \fBmediump_mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBhighp\fP > \fBhighp_mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, defaultp > \fBmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, defaultp > \fBmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBlowp\fP > \fBlowp_mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBmediump\fP > \fBmediump_mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBhighp\fP > \fBhighp_mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBlowp\fP > \fBlowp_mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBmediump\fP > \fBmediump_mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBhighp\fP > \fBhighp_mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, defaultp > \fBmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBlowp\fP > \fBlowp_mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBmediump\fP > \fBmediump_mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBhighp\fP > \fBhighp_mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, defaultp > \fBmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBlowp\fP > \fBlowp_mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBmediump\fP > \fBmediump_mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBhighp\fP > \fBhighp_mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, defaultp > \fBmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBlowp\fP > \fBlowp_mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBmediump\fP > \fBmediump_mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBhighp\fP > \fBhighp_mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBlowp\fP > \fBlowp_mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBmediump\fP > \fBmediump_mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBhighp\fP > \fBhighp_mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBlowp\fP > \fBlowp_mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBmediump\fP > \fBmediump_mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBhighp\fP > \fBhighp_mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< double, defaultp > \fBdquat\fP"
.br
.RI "Quaternion of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBqua\fP< double, \fBlowp\fP > \fBlowp_dquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< double, \fBmediump\fP > \fBmediump_dquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< double, \fBhighp\fP > \fBhighp_dquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< float, defaultp > \fBquat\fP"
.br
.RI "Quaternion of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBqua\fP< float, \fBlowp\fP > \fBlowp_quat\fP"
.br
.RI "Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBqua\fP< float, \fBmediump\fP > \fBmediump_quat\fP"
.br
.RI "Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBqua\fP< float, \fBhighp\fP > \fBhighp_quat\fP"
.br
.RI "Quaternion of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef detail::int8 \fBint8\fP"
.br
.RI "8 bit signed integer type\&. "
.ti -1c
.RI "typedef detail::int16 \fBint16\fP"
.br
.RI "16 bit signed integer type\&. "
.ti -1c
.RI "typedef detail::int32 \fBint32\fP"
.br
.RI "32 bit signed integer type\&. "
.ti -1c
.RI "typedef detail::int64 \fBint64\fP"
.br
.RI "64 bit signed integer type\&. "
.ti -1c
.RI "typedef detail::uint8 \fBuint8\fP"
.br
.RI "8 bit unsigned integer type\&. "
.ti -1c
.RI "typedef detail::uint16 \fBuint16\fP"
.br
.RI "16 bit unsigned integer type\&. "
.ti -1c
.RI "typedef detail::uint32 \fBuint32\fP"
.br
.RI "32 bit unsigned integer type\&. "
.ti -1c
.RI "typedef detail::uint64 \fBuint64\fP"
.br
.RI "64 bit unsigned integer type\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, defaultp > \fBbvec1\fP"
.br
.RI "1 components vector of boolean\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBhighp\fP > \fBhighp_bvec1\fP"
.br
.RI "1 component vector of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBmediump\fP > \fBmediump_bvec1\fP"
.br
.RI "1 component vector of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBlowp\fP > \fBlowp_bvec1\fP"
.br
.RI "1 component vector of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, defaultp > \fBbvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBhighp\fP > \fBhighp_bvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBmediump\fP > \fBmediump_bvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBlowp\fP > \fBlowp_bvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, defaultp > \fBbvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBhighp\fP > \fBhighp_bvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBmediump\fP > \fBmediump_bvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBlowp\fP > \fBlowp_bvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, defaultp > \fBbvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBhighp\fP > \fBhighp_bvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBmediump\fP > \fBmediump_bvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBlowp\fP > \fBlowp_bvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, double, defaultp > \fBdvec1\fP"
.br
.RI "1 components vector of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBhighp\fP > \fBhighp_dvec1\fP"
.br
.RI "1 component vector of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBmediump\fP > \fBmediump_dvec1\fP"
.br
.RI "1 component vector of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBlowp\fP > \fBlowp_dvec1\fP"
.br
.RI "1 component vector of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, defaultp > \fBdvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBhighp\fP > \fBhighp_dvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBmediump\fP > \fBmediump_dvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBlowp\fP > \fBlowp_dvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, double, defaultp > \fBdvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBhighp\fP > \fBhighp_dvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBmediump\fP > \fBmediump_dvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBlowp\fP > \fBlowp_dvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, double, defaultp > \fBdvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBhighp\fP > \fBhighp_dvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBmediump\fP > \fBmediump_dvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBlowp\fP > \fBlowp_dvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, float, defaultp > \fBvec1\fP"
.br
.RI "1 components vector of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBhighp\fP > \fBhighp_vec1\fP"
.br
.RI "1 component vector of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBmediump\fP > \fBmediump_vec1\fP"
.br
.RI "1 component vector of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBlowp\fP > \fBlowp_vec1\fP"
.br
.RI "1 component vector of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, defaultp > \fBvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBhighp\fP > \fBhighp_vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBmediump\fP > \fBmediump_vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBlowp\fP > \fBlowp_vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, defaultp > \fBvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBhighp\fP > \fBhighp_vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBmediump\fP > \fBmediump_vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBlowp\fP > \fBlowp_vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, defaultp > \fBvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBhighp\fP > \fBhighp_vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBmediump\fP > \fBmediump_vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBlowp\fP > \fBlowp_vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, int, defaultp > \fBivec1\fP"
.br
.RI "1 component vector of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBhighp\fP > \fBhighp_ivec1\fP"
.br
.RI "1 component vector of signed integer values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBmediump\fP > \fBmediump_ivec1\fP"
.br
.RI "1 component vector of signed integer values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBlowp\fP > \fBlowp_ivec1\fP"
.br
.RI "1 component vector of signed integer values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, defaultp > \fBivec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBhighp\fP > \fBhighp_ivec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBmediump\fP > \fBmediump_ivec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBlowp\fP > \fBlowp_ivec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, int, defaultp > \fBivec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBhighp\fP > \fBhighp_ivec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBmediump\fP > \fBmediump_ivec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBlowp\fP > \fBlowp_ivec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, int, defaultp > \fBivec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBhighp\fP > \fBhighp_ivec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBmediump\fP > \fBmediump_ivec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBlowp\fP > \fBlowp_ivec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, unsigned int, defaultp > \fBuvec1\fP"
.br
.RI "1 component vector of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, unsigned int, \fBhighp\fP > \fBhighp_uvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, unsigned int, \fBmediump\fP > \fBmediump_uvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, unsigned int, \fBlowp\fP > \fBlowp_uvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, unsigned int, defaultp > \fBuvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, unsigned int, \fBhighp\fP > \fBhighp_uvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, unsigned int, \fBmediump\fP > \fBmediump_uvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, unsigned int, \fBlowp\fP > \fBlowp_uvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, unsigned int, defaultp > \fBuvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, unsigned int, \fBhighp\fP > \fBhighp_uvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, unsigned int, \fBmediump\fP > \fBmediump_uvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, unsigned int, \fBlowp\fP > \fBlowp_uvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, unsigned int, defaultp > \fBuvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, unsigned int, \fBhighp\fP > \fBhighp_uvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, unsigned int, \fBmediump\fP > \fBmediump_uvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, unsigned int, \fBlowp\fP > \fBlowp_uvec4\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBlowp_i8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBmediump_i8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBhighp_i8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBi8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBlowp_int8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBmediump_int8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBhighp_int8\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBlowp_int8_t\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBmediump_int8_t\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBhighp_int8_t\fP"
.br
.ti -1c
.RI "typedef \fBint8\fP \fBint8_t\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBlowp_i16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBmediump_i16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBhighp_i16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBi16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBlowp_int16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBmediump_int16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBhighp_int16\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBlowp_int16_t\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBmediump_int16_t\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBhighp_int16_t\fP"
.br
.ti -1c
.RI "typedef \fBint16\fP \fBint16_t\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBlowp_i32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBmediump_i32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBhighp_i32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBi32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBlowp_int32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBmediump_int32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBhighp_int32\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBlowp_int32_t\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBmediump_int32_t\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBhighp_int32_t\fP"
.br
.ti -1c
.RI "typedef \fBint32\fP \fBint32_t\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBlowp_i64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBmediump_i64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBhighp_i64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBi64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBlowp_int64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBmediump_int64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBhighp_int64\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBlowp_int64_t\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBmediump_int64_t\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBhighp_int64_t\fP"
.br
.ti -1c
.RI "typedef \fBint64\fP \fBint64_t\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBlowp_u8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBmediump_u8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBhighp_u8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBu8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBlowp_uint8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBmediump_uint8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBhighp_uint8\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBlowp_uint8_t\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBmediump_uint8_t\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBhighp_uint8_t\fP"
.br
.ti -1c
.RI "typedef \fBuint8\fP \fBuint8_t\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBlowp_u16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBmediump_u16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBhighp_u16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBu16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBlowp_uint16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBmediump_uint16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBhighp_uint16\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBlowp_uint16_t\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBmediump_uint16_t\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBhighp_uint16_t\fP"
.br
.ti -1c
.RI "typedef \fBuint16\fP \fBuint16_t\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBlowp_u32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBmediump_u32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBhighp_u32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBu32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBlowp_uint32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBmediump_uint32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBhighp_uint32\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBlowp_uint32_t\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBmediump_uint32_t\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBhighp_uint32_t\fP"
.br
.ti -1c
.RI "typedef \fBuint32\fP \fBuint32_t\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBlowp_u64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBmediump_u64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBhighp_u64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBu64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBlowp_uint64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBmediump_uint64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBhighp_uint64\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBlowp_uint64_t\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBmediump_uint64_t\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBhighp_uint64_t\fP"
.br
.ti -1c
.RI "typedef \fBuint64\fP \fBuint64_t\fP"
.br
.ti -1c
.RI "typedef float \fBlowp_f32\fP"
.br
.ti -1c
.RI "typedef float \fBmediump_f32\fP"
.br
.ti -1c
.RI "typedef float \fBhighp_f32\fP"
.br
.ti -1c
.RI "typedef float \fBf32\fP"
.br
.ti -1c
.RI "typedef float \fBlowp_float32\fP"
.br
.ti -1c
.RI "typedef float \fBmediump_float32\fP"
.br
.ti -1c
.RI "typedef float \fBhighp_float32\fP"
.br
.ti -1c
.RI "typedef float \fBfloat32\fP"
.br
.ti -1c
.RI "typedef float \fBlowp_float32_t\fP"
.br
.ti -1c
.RI "typedef float \fBmediump_float32_t\fP"
.br
.ti -1c
.RI "typedef float \fBhighp_float32_t\fP"
.br
.ti -1c
.RI "typedef float \fBfloat32_t\fP"
.br
.ti -1c
.RI "typedef double \fBlowp_f64\fP"
.br
.ti -1c
.RI "typedef double \fBmediump_f64\fP"
.br
.ti -1c
.RI "typedef double \fBhighp_f64\fP"
.br
.ti -1c
.RI "typedef double \fBf64\fP"
.br
.ti -1c
.RI "typedef double \fBlowp_float64\fP"
.br
.ti -1c
.RI "typedef double \fBmediump_float64\fP"
.br
.ti -1c
.RI "typedef double \fBhighp_float64\fP"
.br
.ti -1c
.RI "typedef double \fBfloat64\fP"
.br
.ti -1c
.RI "typedef double \fBlowp_float64_t\fP"
.br
.ti -1c
.RI "typedef double \fBmediump_float64_t\fP"
.br
.ti -1c
.RI "typedef double \fBhighp_float64_t\fP"
.br
.ti -1c
.RI "typedef double \fBfloat64_t\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi8\fP, \fBlowp\fP > \fBlowp_i8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi8\fP, \fBlowp\fP > \fBlowp_i8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi8\fP, \fBlowp\fP > \fBlowp_i8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi8\fP, \fBlowp\fP > \fBlowp_i8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi8\fP, \fBmediump\fP > \fBmediump_i8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi8\fP, \fBmediump\fP > \fBmediump_i8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi8\fP, \fBmediump\fP > \fBmediump_i8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi8\fP, \fBmediump\fP > \fBmediump_i8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi8\fP, \fBhighp\fP > \fBhighp_i8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi8\fP, \fBhighp\fP > \fBhighp_i8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi8\fP, \fBhighp\fP > \fBhighp_i8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi8\fP, \fBhighp\fP > \fBhighp_i8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi8\fP, defaultp > \fBi8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi8\fP, defaultp > \fBi8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi8\fP, defaultp > \fBi8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi8\fP, defaultp > \fBi8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi16\fP, \fBlowp\fP > \fBlowp_i16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi16\fP, \fBlowp\fP > \fBlowp_i16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi16\fP, \fBlowp\fP > \fBlowp_i16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi16\fP, \fBlowp\fP > \fBlowp_i16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi16\fP, \fBmediump\fP > \fBmediump_i16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi16\fP, \fBmediump\fP > \fBmediump_i16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi16\fP, \fBmediump\fP > \fBmediump_i16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi16\fP, \fBmediump\fP > \fBmediump_i16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi16\fP, \fBhighp\fP > \fBhighp_i16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi16\fP, \fBhighp\fP > \fBhighp_i16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi16\fP, \fBhighp\fP > \fBhighp_i16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi16\fP, \fBhighp\fP > \fBhighp_i16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi16\fP, defaultp > \fBi16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi16\fP, defaultp > \fBi16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi16\fP, defaultp > \fBi16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi16\fP, defaultp > \fBi16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi32\fP, \fBlowp\fP > \fBlowp_i32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi32\fP, \fBlowp\fP > \fBlowp_i32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi32\fP, \fBlowp\fP > \fBlowp_i32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi32\fP, \fBlowp\fP > \fBlowp_i32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi32\fP, \fBmediump\fP > \fBmediump_i32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi32\fP, \fBmediump\fP > \fBmediump_i32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi32\fP, \fBmediump\fP > \fBmediump_i32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi32\fP, \fBmediump\fP > \fBmediump_i32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi32\fP, \fBhighp\fP > \fBhighp_i32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi32\fP, \fBhighp\fP > \fBhighp_i32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi32\fP, \fBhighp\fP > \fBhighp_i32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi32\fP, \fBhighp\fP > \fBhighp_i32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi32\fP, defaultp > \fBi32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi32\fP, defaultp > \fBi32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi32\fP, defaultp > \fBi32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi32\fP, defaultp > \fBi32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi64\fP, \fBlowp\fP > \fBlowp_i64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi64\fP, \fBlowp\fP > \fBlowp_i64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi64\fP, \fBlowp\fP > \fBlowp_i64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi64\fP, \fBlowp\fP > \fBlowp_i64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi64\fP, \fBmediump\fP > \fBmediump_i64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi64\fP, \fBmediump\fP > \fBmediump_i64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi64\fP, \fBmediump\fP > \fBmediump_i64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi64\fP, \fBmediump\fP > \fBmediump_i64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi64\fP, \fBhighp\fP > \fBhighp_i64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi64\fP, \fBhighp\fP > \fBhighp_i64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi64\fP, \fBhighp\fP > \fBhighp_i64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi64\fP, \fBhighp\fP > \fBhighp_i64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBi64\fP, defaultp > \fBi64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBi64\fP, defaultp > \fBi64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBi64\fP, defaultp > \fBi64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBi64\fP, defaultp > \fBi64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu8\fP, \fBlowp\fP > \fBlowp_u8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu8\fP, \fBlowp\fP > \fBlowp_u8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu8\fP, \fBlowp\fP > \fBlowp_u8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu8\fP, \fBlowp\fP > \fBlowp_u8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu8\fP, \fBmediump\fP > \fBmediump_u8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu8\fP, \fBmediump\fP > \fBmediump_u8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu8\fP, \fBmediump\fP > \fBmediump_u8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu8\fP, \fBmediump\fP > \fBmediump_u8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu8\fP, \fBhighp\fP > \fBhighp_u8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu8\fP, \fBhighp\fP > \fBhighp_u8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu8\fP, \fBhighp\fP > \fBhighp_u8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu8\fP, \fBhighp\fP > \fBhighp_u8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu8\fP, defaultp > \fBu8vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu8\fP, defaultp > \fBu8vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu8\fP, defaultp > \fBu8vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu8\fP, defaultp > \fBu8vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu16\fP, \fBlowp\fP > \fBlowp_u16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu16\fP, \fBlowp\fP > \fBlowp_u16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu16\fP, \fBlowp\fP > \fBlowp_u16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu16\fP, \fBlowp\fP > \fBlowp_u16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu16\fP, \fBmediump\fP > \fBmediump_u16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu16\fP, \fBmediump\fP > \fBmediump_u16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu16\fP, \fBmediump\fP > \fBmediump_u16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu16\fP, \fBmediump\fP > \fBmediump_u16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu16\fP, \fBhighp\fP > \fBhighp_u16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu16\fP, \fBhighp\fP > \fBhighp_u16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu16\fP, \fBhighp\fP > \fBhighp_u16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu16\fP, \fBhighp\fP > \fBhighp_u16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu16\fP, defaultp > \fBu16vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu16\fP, defaultp > \fBu16vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu16\fP, defaultp > \fBu16vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu16\fP, defaultp > \fBu16vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu32\fP, \fBlowp\fP > \fBlowp_u32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu32\fP, \fBlowp\fP > \fBlowp_u32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu32\fP, \fBlowp\fP > \fBlowp_u32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu32\fP, \fBlowp\fP > \fBlowp_u32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu32\fP, \fBmediump\fP > \fBmediump_u32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu32\fP, \fBmediump\fP > \fBmediump_u32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu32\fP, \fBmediump\fP > \fBmediump_u32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu32\fP, \fBmediump\fP > \fBmediump_u32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu32\fP, \fBhighp\fP > \fBhighp_u32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu32\fP, \fBhighp\fP > \fBhighp_u32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu32\fP, \fBhighp\fP > \fBhighp_u32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu32\fP, \fBhighp\fP > \fBhighp_u32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu32\fP, defaultp > \fBu32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu32\fP, defaultp > \fBu32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu32\fP, defaultp > \fBu32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu32\fP, defaultp > \fBu32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu64\fP, \fBlowp\fP > \fBlowp_u64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu64\fP, \fBlowp\fP > \fBlowp_u64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu64\fP, \fBlowp\fP > \fBlowp_u64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu64\fP, \fBlowp\fP > \fBlowp_u64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu64\fP, \fBmediump\fP > \fBmediump_u64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu64\fP, \fBmediump\fP > \fBmediump_u64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu64\fP, \fBmediump\fP > \fBmediump_u64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu64\fP, \fBmediump\fP > \fBmediump_u64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu64\fP, \fBhighp\fP > \fBhighp_u64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu64\fP, \fBhighp\fP > \fBhighp_u64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu64\fP, \fBhighp\fP > \fBhighp_u64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu64\fP, \fBhighp\fP > \fBhighp_u64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBu64\fP, defaultp > \fBu64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBu64\fP, defaultp > \fBu64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBu64\fP, defaultp > \fBu64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBu64\fP, defaultp > \fBu64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBlowp\fP > \fBlowp_fvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBlowp\fP > \fBlowp_fvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBlowp\fP > \fBlowp_fvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBlowp\fP > \fBlowp_fvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBmediump\fP > \fBmediump_fvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBmediump\fP > \fBmediump_fvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBmediump\fP > \fBmediump_fvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBmediump\fP > \fBmediump_fvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBhighp\fP > \fBhighp_fvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBhighp\fP > \fBhighp_fvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBhighp\fP > \fBhighp_fvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBhighp\fP > \fBhighp_fvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf32\fP, defaultp > \fBfvec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf32\fP, defaultp > \fBfvec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf32\fP, defaultp > \fBfvec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf32\fP, defaultp > \fBfvec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf32\fP, \fBlowp\fP > \fBlowp_f32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf32\fP, \fBlowp\fP > \fBlowp_f32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf32\fP, \fBlowp\fP > \fBlowp_f32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf32\fP, \fBlowp\fP > \fBlowp_f32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf32\fP, \fBmediump\fP > \fBmediump_f32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf32\fP, \fBmediump\fP > \fBmediump_f32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf32\fP, \fBmediump\fP > \fBmediump_f32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf32\fP, \fBmediump\fP > \fBmediump_f32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf32\fP, \fBhighp\fP > \fBhighp_f32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf32\fP, \fBhighp\fP > \fBhighp_f32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf32\fP, \fBhighp\fP > \fBhighp_f32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf32\fP, \fBhighp\fP > \fBhighp_f32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf32\fP, defaultp > \fBf32vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf32\fP, defaultp > \fBf32vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf32\fP, defaultp > \fBf32vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf32\fP, defaultp > \fBf32vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf64\fP, \fBlowp\fP > \fBlowp_f64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf64\fP, \fBlowp\fP > \fBlowp_f64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf64\fP, \fBlowp\fP > \fBlowp_f64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf64\fP, \fBlowp\fP > \fBlowp_f64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf64\fP, \fBmediump\fP > \fBmediump_f64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf64\fP, \fBmediump\fP > \fBmediump_f64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf64\fP, \fBmediump\fP > \fBmediump_f64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf64\fP, \fBmediump\fP > \fBmediump_f64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf64\fP, \fBhighp\fP > \fBhighp_f64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf64\fP, \fBhighp\fP > \fBhighp_f64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf64\fP, \fBhighp\fP > \fBhighp_f64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf64\fP, \fBhighp\fP > \fBhighp_f64vec4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, \fBf64\fP, defaultp > \fBf64vec1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, \fBf64\fP, defaultp > \fBf64vec2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, \fBf64\fP, defaultp > \fBf64vec3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, \fBf64\fP, defaultp > \fBf64vec4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, defaultp > \fBfmat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, defaultp > \fBfmat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, defaultp > \fBfmat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, defaultp > \fBf32mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, defaultp > \fBf32mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, defaultp > \fBf32mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, defaultp > \fBf64mat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, defaultp > \fBf64mat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, defaultp > \fBf64mat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_fmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_fmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_fmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, defaultp > \fBfmat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, defaultp > \fBfmat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, defaultp > \fBfmat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, defaultp > \fBfmat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, defaultp > \fBfmat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, defaultp > \fBfmat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, defaultp > \fBfmat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, defaultp > \fBfmat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, defaultp > \fBfmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBlowp\fP > \fBlowp_f32mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBmediump\fP > \fBmediump_f32mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, \fBhighp\fP > \fBhighp_f32mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf32\fP, defaultp > \fBf32mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf32\fP, defaultp > \fBf32mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf32\fP, defaultp > \fBf32mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf32\fP, defaultp > \fBf32mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf32\fP, defaultp > \fBf32mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf32\fP, defaultp > \fBf32mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf32\fP, defaultp > \fBf32mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf32\fP, defaultp > \fBf32mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf32\fP, defaultp > \fBf32mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBlowp\fP > \fBlowp_f64mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBmediump\fP > \fBmediump_f64mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, \fBhighp\fP > \fBhighp_f64mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, \fBf64\fP, defaultp > \fBf64mat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, \fBf64\fP, defaultp > \fBf64mat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, \fBf64\fP, defaultp > \fBf64mat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, \fBf64\fP, defaultp > \fBf64mat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, \fBf64\fP, defaultp > \fBf64mat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, \fBf64\fP, defaultp > \fBf64mat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, \fBf64\fP, defaultp > \fBf64mat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, \fBf64\fP, defaultp > \fBf64mat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, \fBf64\fP, defaultp > \fBf64mat4x4\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< float, \fBlowp\fP > \fBlowp_fquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< float, \fBmediump\fP > \fBmediump_fquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< float, \fBhighp\fP > \fBhighp_fquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< float, defaultp > \fBfquat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf32\fP, \fBlowp\fP > \fBlowp_f32quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf32\fP, \fBmediump\fP > \fBmediump_f32quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf32\fP, \fBhighp\fP > \fBhighp_f32quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf32\fP, defaultp > \fBf32quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf64\fP, \fBlowp\fP > \fBlowp_f64quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf64\fP, \fBmediump\fP > \fBmediump_f64quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf64\fP, \fBhighp\fP > \fBhighp_f64quat\fP"
.br
.ti -1c
.RI "typedef \fBqua\fP< \fBf64\fP, defaultp > \fBf64quat\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBhighp\fP > \fBhighp_imat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBhighp\fP > \fBhighp_imat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBhighp\fP > \fBhighp_imat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBhighp\fP > \fBhighp_imat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, int, \fBhighp\fP > \fBhighp_imat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, int, \fBhighp\fP > \fBhighp_imat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, int, \fBhighp\fP > \fBhighp_imat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBhighp\fP > \fBhighp_imat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, int, \fBhighp\fP > \fBhighp_imat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, int, \fBhighp\fP > \fBhighp_imat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, int, \fBhighp\fP > \fBhighp_imat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBhighp\fP > \fBhighp_imat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBmediump\fP > \fBmediump_imat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBmediump\fP > \fBmediump_imat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBmediump\fP > \fBmediump_imat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBmediump\fP > \fBmediump_imat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, int, \fBmediump\fP > \fBmediump_imat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, int, \fBmediump\fP > \fBmediump_imat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, int, \fBmediump\fP > \fBmediump_imat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBmediump\fP > \fBmediump_imat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, int, \fBmediump\fP > \fBmediump_imat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, int, \fBmediump\fP > \fBmediump_imat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, int, \fBmediump\fP > \fBmediump_imat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBmediump\fP > \fBmediump_imat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBlowp\fP > \fBlowp_imat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBlowp\fP > \fBlowp_imat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBlowp\fP > \fBlowp_imat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBlowp\fP > \fBlowp_imat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, int, \fBlowp\fP > \fBlowp_imat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, int, \fBlowp\fP > \fBlowp_imat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, int, \fBlowp\fP > \fBlowp_imat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBlowp\fP > \fBlowp_imat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, int, \fBlowp\fP > \fBlowp_imat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, int, \fBlowp\fP > \fBlowp_imat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, int, \fBlowp\fP > \fBlowp_imat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBlowp\fP > \fBlowp_imat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBhighp\fP > \fBhighp_umat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBhighp\fP > \fBhighp_umat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBhighp\fP > \fBhighp_umat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBhighp\fP > \fBhighp_umat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, uint, \fBhighp\fP > \fBhighp_umat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, uint, \fBhighp\fP > \fBhighp_umat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, uint, \fBhighp\fP > \fBhighp_umat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBhighp\fP > \fBhighp_umat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, uint, \fBhighp\fP > \fBhighp_umat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, uint, \fBhighp\fP > \fBhighp_umat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, uint, \fBhighp\fP > \fBhighp_umat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBhighp\fP > \fBhighp_umat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBmediump\fP > \fBmediump_umat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBmediump\fP > \fBmediump_umat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBmediump\fP > \fBmediump_umat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBmediump\fP > \fBmediump_umat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, uint, \fBmediump\fP > \fBmediump_umat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, uint, \fBmediump\fP > \fBmediump_umat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, uint, \fBmediump\fP > \fBmediump_umat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBmediump\fP > \fBmediump_umat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, uint, \fBmediump\fP > \fBmediump_umat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, uint, \fBmediump\fP > \fBmediump_umat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, uint, \fBmediump\fP > \fBmediump_umat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBmediump\fP > \fBmediump_umat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBlowp\fP > \fBlowp_umat2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBlowp\fP > \fBlowp_umat3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBlowp\fP > \fBlowp_umat4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, uint, \fBlowp\fP > \fBlowp_umat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, uint, \fBlowp\fP > \fBlowp_umat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, uint, \fBlowp\fP > \fBlowp_umat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, uint, \fBlowp\fP > \fBlowp_umat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, uint, \fBlowp\fP > \fBlowp_umat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, uint, \fBlowp\fP > \fBlowp_umat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, uint, \fBlowp\fP > \fBlowp_umat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, uint, \fBlowp\fP > \fBlowp_umat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, uint, \fBlowp\fP > \fBlowp_umat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat2\fP \fBimat2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat3\fP \fBimat3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat4\fP \fBimat4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat2x2\fP \fBimat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat2x3\fP \fBimat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat2x4\fP \fBimat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat3x2\fP \fBimat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat3x3\fP \fBimat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat3x4\fP \fBimat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat4x2\fP \fBimat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat4x3\fP \fBimat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_imat4x4\fP \fBimat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat2\fP \fBumat2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat3\fP \fBumat3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat4\fP \fBumat4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat2x2\fP \fBumat2x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat2x3\fP \fBumat2x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat2x4\fP \fBumat2x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat3x2\fP \fBumat3x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat3x3\fP \fBumat3x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat3x4\fP \fBumat3x4\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat4x2\fP \fBumat4x2\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat4x3\fP \fBumat4x3\fP"
.br
.ti -1c
.RI "typedef \fBmediump_umat4x4\fP \fBumat4x4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, float, aligned_highp > \fBaligned_highp_vec1\fP"
.br
.RI "1 component vector aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, aligned_mediump > \fBaligned_mediump_vec1\fP"
.br
.RI "1 component vector aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, aligned_lowp > \fBaligned_lowp_vec1\fP"
.br
.RI "1 component vector aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, aligned_highp > \fBaligned_highp_dvec1\fP"
.br
.RI "1 component vector aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, aligned_mediump > \fBaligned_mediump_dvec1\fP"
.br
.RI "1 component vector aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, aligned_lowp > \fBaligned_lowp_dvec1\fP"
.br
.RI "1 component vector aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, aligned_highp > \fBaligned_highp_ivec1\fP"
.br
.RI "1 component vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, aligned_mediump > \fBaligned_mediump_ivec1\fP"
.br
.RI "1 component vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, aligned_lowp > \fBaligned_lowp_ivec1\fP"
.br
.RI "1 component vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, aligned_highp > \fBaligned_highp_uvec1\fP"
.br
.RI "1 component vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, aligned_mediump > \fBaligned_mediump_uvec1\fP"
.br
.RI "1 component vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, aligned_lowp > \fBaligned_lowp_uvec1\fP"
.br
.RI "1 component vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, aligned_highp > \fBaligned_highp_bvec1\fP"
.br
.RI "1 component vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, aligned_mediump > \fBaligned_mediump_bvec1\fP"
.br
.RI "1 component vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, aligned_lowp > \fBaligned_lowp_bvec1\fP"
.br
.RI "1 component vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBpacked_highp\fP > \fBpacked_highp_vec1\fP"
.br
.RI "1 component vector tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBpacked_mediump\fP > \fBpacked_mediump_vec1\fP"
.br
.RI "1 component vector tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, float, \fBpacked_lowp\fP > \fBpacked_lowp_vec1\fP"
.br
.RI "1 component vector tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBpacked_highp\fP > \fBpacked_highp_dvec1\fP"
.br
.RI "1 component vector tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBpacked_mediump\fP > \fBpacked_mediump_dvec1\fP"
.br
.RI "1 component vector tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, double, \fBpacked_lowp\fP > \fBpacked_lowp_dvec1\fP"
.br
.RI "1 component vector tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBpacked_highp\fP > \fBpacked_highp_ivec1\fP"
.br
.RI "1 component vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBpacked_mediump\fP > \fBpacked_mediump_ivec1\fP"
.br
.RI "1 component vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, int, \fBpacked_lowp\fP > \fBpacked_lowp_ivec1\fP"
.br
.RI "1 component vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, \fBpacked_highp\fP > \fBpacked_highp_uvec1\fP"
.br
.RI "1 component vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, \fBpacked_mediump\fP > \fBpacked_mediump_uvec1\fP"
.br
.RI "1 component vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, uint, \fBpacked_lowp\fP > \fBpacked_lowp_uvec1\fP"
.br
.RI "1 component vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBpacked_highp\fP > \fBpacked_highp_bvec1\fP"
.br
.RI "1 component vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBpacked_mediump\fP > \fBpacked_mediump_bvec1\fP"
.br
.RI "1 component vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 1, bool, \fBpacked_lowp\fP > \fBpacked_lowp_bvec1\fP"
.br
.RI "1 component vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, aligned_highp > \fBaligned_highp_vec2\fP"
.br
.RI "2 components vector aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, aligned_mediump > \fBaligned_mediump_vec2\fP"
.br
.RI "2 components vector aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, aligned_lowp > \fBaligned_lowp_vec2\fP"
.br
.RI "2 components vector aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, aligned_highp > \fBaligned_highp_dvec2\fP"
.br
.RI "2 components vector aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, aligned_mediump > \fBaligned_mediump_dvec2\fP"
.br
.RI "2 components vector aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, aligned_lowp > \fBaligned_lowp_dvec2\fP"
.br
.RI "2 components vector aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, aligned_highp > \fBaligned_highp_ivec2\fP"
.br
.RI "2 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, aligned_mediump > \fBaligned_mediump_ivec2\fP"
.br
.RI "2 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, aligned_lowp > \fBaligned_lowp_ivec2\fP"
.br
.RI "2 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, aligned_highp > \fBaligned_highp_uvec2\fP"
.br
.RI "2 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, aligned_mediump > \fBaligned_mediump_uvec2\fP"
.br
.RI "2 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, aligned_lowp > \fBaligned_lowp_uvec2\fP"
.br
.RI "2 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, aligned_highp > \fBaligned_highp_bvec2\fP"
.br
.RI "2 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, aligned_mediump > \fBaligned_mediump_bvec2\fP"
.br
.RI "2 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, aligned_lowp > \fBaligned_lowp_bvec2\fP"
.br
.RI "2 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBpacked_highp\fP > \fBpacked_highp_vec2\fP"
.br
.RI "2 components vector tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBpacked_mediump\fP > \fBpacked_mediump_vec2\fP"
.br
.RI "2 components vector tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBpacked_lowp\fP > \fBpacked_lowp_vec2\fP"
.br
.RI "2 components vector tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBpacked_highp\fP > \fBpacked_highp_dvec2\fP"
.br
.RI "2 components vector tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBpacked_mediump\fP > \fBpacked_mediump_dvec2\fP"
.br
.RI "2 components vector tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBpacked_lowp\fP > \fBpacked_lowp_dvec2\fP"
.br
.RI "2 components vector tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBpacked_highp\fP > \fBpacked_highp_ivec2\fP"
.br
.RI "2 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBpacked_mediump\fP > \fBpacked_mediump_ivec2\fP"
.br
.RI "2 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBpacked_lowp\fP > \fBpacked_lowp_ivec2\fP"
.br
.RI "2 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, \fBpacked_highp\fP > \fBpacked_highp_uvec2\fP"
.br
.RI "2 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, \fBpacked_mediump\fP > \fBpacked_mediump_uvec2\fP"
.br
.RI "2 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, uint, \fBpacked_lowp\fP > \fBpacked_lowp_uvec2\fP"
.br
.RI "2 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBpacked_highp\fP > \fBpacked_highp_bvec2\fP"
.br
.RI "2 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBpacked_mediump\fP > \fBpacked_mediump_bvec2\fP"
.br
.RI "2 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBpacked_lowp\fP > \fBpacked_lowp_bvec2\fP"
.br
.RI "2 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, aligned_highp > \fBaligned_highp_vec3\fP"
.br
.RI "3 components vector aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, aligned_mediump > \fBaligned_mediump_vec3\fP"
.br
.RI "3 components vector aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, aligned_lowp > \fBaligned_lowp_vec3\fP"
.br
.RI "3 components vector aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, aligned_highp > \fBaligned_highp_dvec3\fP"
.br
.RI "3 components vector aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, aligned_mediump > \fBaligned_mediump_dvec3\fP"
.br
.RI "3 components vector aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, aligned_lowp > \fBaligned_lowp_dvec3\fP"
.br
.RI "3 components vector aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, aligned_highp > \fBaligned_highp_ivec3\fP"
.br
.RI "3 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, aligned_mediump > \fBaligned_mediump_ivec3\fP"
.br
.RI "3 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, aligned_lowp > \fBaligned_lowp_ivec3\fP"
.br
.RI "3 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, aligned_highp > \fBaligned_highp_uvec3\fP"
.br
.RI "3 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, aligned_mediump > \fBaligned_mediump_uvec3\fP"
.br
.RI "3 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, aligned_lowp > \fBaligned_lowp_uvec3\fP"
.br
.RI "3 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, aligned_highp > \fBaligned_highp_bvec3\fP"
.br
.RI "3 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, aligned_mediump > \fBaligned_mediump_bvec3\fP"
.br
.RI "3 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, aligned_lowp > \fBaligned_lowp_bvec3\fP"
.br
.RI "3 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBpacked_highp\fP > \fBpacked_highp_vec3\fP"
.br
.RI "3 components vector tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBpacked_mediump\fP > \fBpacked_mediump_vec3\fP"
.br
.RI "3 components vector tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBpacked_lowp\fP > \fBpacked_lowp_vec3\fP"
.br
.RI "3 components vector tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBpacked_highp\fP > \fBpacked_highp_dvec3\fP"
.br
.RI "3 components vector tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBpacked_mediump\fP > \fBpacked_mediump_dvec3\fP"
.br
.RI "3 components vector tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBpacked_lowp\fP > \fBpacked_lowp_dvec3\fP"
.br
.RI "3 components vector tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBpacked_highp\fP > \fBpacked_highp_ivec3\fP"
.br
.RI "3 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBpacked_mediump\fP > \fBpacked_mediump_ivec3\fP"
.br
.RI "3 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBpacked_lowp\fP > \fBpacked_lowp_ivec3\fP"
.br
.RI "3 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, \fBpacked_highp\fP > \fBpacked_highp_uvec3\fP"
.br
.RI "3 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, \fBpacked_mediump\fP > \fBpacked_mediump_uvec3\fP"
.br
.RI "3 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, uint, \fBpacked_lowp\fP > \fBpacked_lowp_uvec3\fP"
.br
.RI "3 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBpacked_highp\fP > \fBpacked_highp_bvec3\fP"
.br
.RI "3 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBpacked_mediump\fP > \fBpacked_mediump_bvec3\fP"
.br
.RI "3 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBpacked_lowp\fP > \fBpacked_lowp_bvec3\fP"
.br
.RI "3 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, aligned_highp > \fBaligned_highp_vec4\fP"
.br
.RI "4 components vector aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, aligned_mediump > \fBaligned_mediump_vec4\fP"
.br
.RI "4 components vector aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, aligned_lowp > \fBaligned_lowp_vec4\fP"
.br
.RI "4 components vector aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, aligned_highp > \fBaligned_highp_dvec4\fP"
.br
.RI "4 components vector aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, aligned_mediump > \fBaligned_mediump_dvec4\fP"
.br
.RI "4 components vector aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, aligned_lowp > \fBaligned_lowp_dvec4\fP"
.br
.RI "4 components vector aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, aligned_highp > \fBaligned_highp_ivec4\fP"
.br
.RI "4 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, aligned_mediump > \fBaligned_mediump_ivec4\fP"
.br
.RI "4 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, aligned_lowp > \fBaligned_lowp_ivec4\fP"
.br
.RI "4 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, aligned_highp > \fBaligned_highp_uvec4\fP"
.br
.RI "4 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, aligned_mediump > \fBaligned_mediump_uvec4\fP"
.br
.RI "4 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, aligned_lowp > \fBaligned_lowp_uvec4\fP"
.br
.RI "4 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, aligned_highp > \fBaligned_highp_bvec4\fP"
.br
.RI "4 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, aligned_mediump > \fBaligned_mediump_bvec4\fP"
.br
.RI "4 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, aligned_lowp > \fBaligned_lowp_bvec4\fP"
.br
.RI "4 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBpacked_highp\fP > \fBpacked_highp_vec4\fP"
.br
.RI "4 components vector tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBpacked_mediump\fP > \fBpacked_mediump_vec4\fP"
.br
.RI "4 components vector tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBpacked_lowp\fP > \fBpacked_lowp_vec4\fP"
.br
.RI "4 components vector tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBpacked_highp\fP > \fBpacked_highp_dvec4\fP"
.br
.RI "4 components vector tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBpacked_mediump\fP > \fBpacked_mediump_dvec4\fP"
.br
.RI "4 components vector tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBpacked_lowp\fP > \fBpacked_lowp_dvec4\fP"
.br
.RI "4 components vector tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBpacked_highp\fP > \fBpacked_highp_ivec4\fP"
.br
.RI "4 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBpacked_mediump\fP > \fBpacked_mediump_ivec4\fP"
.br
.RI "4 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBpacked_lowp\fP > \fBpacked_lowp_ivec4\fP"
.br
.RI "4 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, \fBpacked_highp\fP > \fBpacked_highp_uvec4\fP"
.br
.RI "4 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, \fBpacked_mediump\fP > \fBpacked_mediump_uvec4\fP"
.br
.RI "4 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, uint, \fBpacked_lowp\fP > \fBpacked_lowp_uvec4\fP"
.br
.RI "4 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBpacked_highp\fP > \fBpacked_highp_bvec4\fP"
.br
.RI "4 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBpacked_mediump\fP > \fBpacked_mediump_bvec4\fP"
.br
.RI "4 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBpacked_lowp\fP > \fBpacked_lowp_bvec4\fP"
.br
.RI "4 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_highp > \fBaligned_highp_mat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_mediump > \fBaligned_mediump_mat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_lowp > \fBaligned_lowp_mat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_highp > \fBaligned_highp_dmat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_mediump > \fBaligned_mediump_dmat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_lowp > \fBaligned_lowp_dmat2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_highp\fP > \fBpacked_highp_mat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_highp\fP > \fBpacked_highp_dmat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_highp > \fBaligned_highp_mat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_mediump > \fBaligned_mediump_mat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_lowp > \fBaligned_lowp_mat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_highp > \fBaligned_highp_dmat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_mediump > \fBaligned_mediump_dmat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_lowp > \fBaligned_lowp_dmat3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_highp\fP > \fBpacked_highp_mat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_highp\fP > \fBpacked_highp_dmat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_highp > \fBaligned_highp_mat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_mediump > \fBaligned_mediump_mat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_lowp > \fBaligned_lowp_mat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_highp > \fBaligned_highp_dmat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_mediump > \fBaligned_mediump_dmat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_lowp > \fBaligned_lowp_dmat4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_highp\fP > \fBpacked_highp_mat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_highp\fP > \fBpacked_highp_dmat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_highp > \fBaligned_highp_mat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_mediump > \fBaligned_mediump_mat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, aligned_lowp > \fBaligned_lowp_mat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_highp > \fBaligned_highp_dmat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_mediump > \fBaligned_mediump_dmat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, aligned_lowp > \fBaligned_lowp_dmat2x2\fP"
.br
.RI "2 by 2 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_highp\fP > \fBpacked_highp_mat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_highp\fP > \fBpacked_highp_dmat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, aligned_highp > \fBaligned_highp_mat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, aligned_mediump > \fBaligned_mediump_mat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, aligned_lowp > \fBaligned_lowp_mat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, aligned_highp > \fBaligned_highp_dmat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, aligned_mediump > \fBaligned_mediump_dmat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, aligned_lowp > \fBaligned_lowp_dmat2x3\fP"
.br
.RI "2 by 3 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBpacked_highp\fP > \fBpacked_highp_mat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBpacked_highp\fP > \fBpacked_highp_dmat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, aligned_highp > \fBaligned_highp_mat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, aligned_mediump > \fBaligned_mediump_mat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, aligned_lowp > \fBaligned_lowp_mat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, aligned_highp > \fBaligned_highp_dmat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, aligned_mediump > \fBaligned_mediump_dmat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, aligned_lowp > \fBaligned_lowp_dmat2x4\fP"
.br
.RI "2 by 4 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBpacked_highp\fP > \fBpacked_highp_mat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBpacked_highp\fP > \fBpacked_highp_dmat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, aligned_highp > \fBaligned_highp_mat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, aligned_mediump > \fBaligned_mediump_mat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, aligned_lowp > \fBaligned_lowp_mat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, aligned_highp > \fBaligned_highp_dmat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, aligned_mediump > \fBaligned_mediump_dmat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, aligned_lowp > \fBaligned_lowp_dmat3x2\fP"
.br
.RI "3 by 2 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBpacked_highp\fP > \fBpacked_highp_mat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBpacked_highp\fP > \fBpacked_highp_dmat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_highp > \fBaligned_highp_mat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_mediump > \fBaligned_mediump_mat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, aligned_lowp > \fBaligned_lowp_mat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_highp > \fBaligned_highp_dmat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_mediump > \fBaligned_mediump_dmat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, aligned_lowp > \fBaligned_lowp_dmat3x3\fP"
.br
.RI "3 by 3 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_highp\fP > \fBpacked_highp_mat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_highp\fP > \fBpacked_highp_dmat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, aligned_highp > \fBaligned_highp_mat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, aligned_mediump > \fBaligned_mediump_mat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, aligned_lowp > \fBaligned_lowp_mat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, aligned_highp > \fBaligned_highp_dmat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, aligned_mediump > \fBaligned_mediump_dmat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, aligned_lowp > \fBaligned_lowp_dmat3x4\fP"
.br
.RI "3 by 4 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBpacked_highp\fP > \fBpacked_highp_mat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBpacked_highp\fP > \fBpacked_highp_dmat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, aligned_highp > \fBaligned_highp_mat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, aligned_mediump > \fBaligned_mediump_mat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, aligned_lowp > \fBaligned_lowp_mat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, aligned_highp > \fBaligned_highp_dmat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, aligned_mediump > \fBaligned_mediump_dmat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, aligned_lowp > \fBaligned_lowp_dmat4x2\fP"
.br
.RI "4 by 2 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBpacked_highp\fP > \fBpacked_highp_mat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBpacked_highp\fP > \fBpacked_highp_dmat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, aligned_highp > \fBaligned_highp_mat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, aligned_mediump > \fBaligned_mediump_mat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, aligned_lowp > \fBaligned_lowp_mat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, aligned_highp > \fBaligned_highp_dmat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, aligned_mediump > \fBaligned_mediump_dmat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, aligned_lowp > \fBaligned_lowp_dmat4x3\fP"
.br
.RI "4 by 3 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBpacked_highp\fP > \fBpacked_highp_mat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBpacked_highp\fP > \fBpacked_highp_dmat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_highp > \fBaligned_highp_mat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_mediump > \fBaligned_mediump_mat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, aligned_lowp > \fBaligned_lowp_mat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_highp > \fBaligned_highp_dmat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_mediump > \fBaligned_mediump_dmat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, aligned_lowp > \fBaligned_lowp_dmat4x4\fP"
.br
.RI "4 by 4 matrix aligned in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_highp\fP > \fBpacked_highp_mat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_mediump\fP > \fBpacked_mediump_mat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBpacked_lowp\fP > \fBpacked_lowp_mat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_highp\fP > \fBpacked_highp_dmat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using high precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_mediump\fP > \fBpacked_mediump_dmat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using medium precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBpacked_lowp\fP > \fBpacked_lowp_dmat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers using low precision arithmetic in term of ULPs\&. "
.ti -1c
.RI "typedef \fBaligned_highp_vec1\fP \fBaligned_vec1\fP"
.br
.RI "1 component vector aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_vec2\fP \fBaligned_vec2\fP"
.br
.RI "2 components vector aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_vec3\fP \fBaligned_vec3\fP"
.br
.RI "3 components vector aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_vec4\fP \fBaligned_vec4\fP"
.br
.RI "4 components vector aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_vec1\fP \fBpacked_vec1\fP"
.br
.RI "1 component vector tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_vec2\fP \fBpacked_vec2\fP"
.br
.RI "2 components vector tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_vec3\fP \fBpacked_vec3\fP"
.br
.RI "3 components vector tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_vec4\fP \fBpacked_vec4\fP"
.br
.RI "4 components vector tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat2\fP \fBaligned_mat2\fP"
.br
.RI "2 by 2 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat3\fP \fBaligned_mat3\fP"
.br
.RI "3 by 3 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat4\fP \fBaligned_mat4\fP"
.br
.RI "4 by 4 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat2\fP \fBpacked_mat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat3\fP \fBpacked_mat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat4\fP \fBpacked_mat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat2x2\fP \fBaligned_mat2x2\fP"
.br
.RI "2 by 2 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat2x3\fP \fBaligned_mat2x3\fP"
.br
.RI "2 by 3 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat2x4\fP \fBaligned_mat2x4\fP"
.br
.RI "2 by 4 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat3x2\fP \fBaligned_mat3x2\fP"
.br
.RI "3 by 2 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat3x3\fP \fBaligned_mat3x3\fP"
.br
.RI "3 by 3 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat3x4\fP \fBaligned_mat3x4\fP"
.br
.RI "3 by 4 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat4x2\fP \fBaligned_mat4x2\fP"
.br
.RI "4 by 2 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat4x3\fP \fBaligned_mat4x3\fP"
.br
.RI "4 by 3 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_mat4x4\fP \fBaligned_mat4x4\fP"
.br
.RI "4 by 4 matrix tightly aligned in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat2x2\fP \fBpacked_mat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat2x3\fP \fBpacked_mat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat2x4\fP \fBpacked_mat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat3x2\fP \fBpacked_mat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat3x3\fP \fBpacked_mat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat3x4\fP \fBpacked_mat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat4x2\fP \fBpacked_mat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat4x3\fP \fBpacked_mat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_mat4x4\fP \fBpacked_mat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of single-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dvec1\fP \fBaligned_dvec1\fP"
.br
.RI "1 component vector aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dvec2\fP \fBaligned_dvec2\fP"
.br
.RI "2 components vector aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dvec3\fP \fBaligned_dvec3\fP"
.br
.RI "3 components vector aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dvec4\fP \fBaligned_dvec4\fP"
.br
.RI "4 components vector aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dvec1\fP \fBpacked_dvec1\fP"
.br
.RI "1 component vector tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dvec2\fP \fBpacked_dvec2\fP"
.br
.RI "2 components vector tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dvec3\fP \fBpacked_dvec3\fP"
.br
.RI "3 components vector tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dvec4\fP \fBpacked_dvec4\fP"
.br
.RI "4 components vector tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat2\fP \fBaligned_dmat2\fP"
.br
.RI "2 by 2 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat3\fP \fBaligned_dmat3\fP"
.br
.RI "3 by 3 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat4\fP \fBaligned_dmat4\fP"
.br
.RI "4 by 4 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat2\fP \fBpacked_dmat2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat3\fP \fBpacked_dmat3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat4\fP \fBpacked_dmat4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat2x2\fP \fBaligned_dmat2x2\fP"
.br
.RI "2 by 2 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat2x3\fP \fBaligned_dmat2x3\fP"
.br
.RI "2 by 3 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat2x4\fP \fBaligned_dmat2x4\fP"
.br
.RI "2 by 4 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat3x2\fP \fBaligned_dmat3x2\fP"
.br
.RI "3 by 2 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat3x3\fP \fBaligned_dmat3x3\fP"
.br
.RI "3 by 3 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat3x4\fP \fBaligned_dmat3x4\fP"
.br
.RI "3 by 4 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat4x2\fP \fBaligned_dmat4x2\fP"
.br
.RI "4 by 2 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat4x3\fP \fBaligned_dmat4x3\fP"
.br
.RI "4 by 3 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_dmat4x4\fP \fBaligned_dmat4x4\fP"
.br
.RI "4 by 4 matrix tightly aligned in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat2x2\fP \fBpacked_dmat2x2\fP"
.br
.RI "2 by 2 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat2x3\fP \fBpacked_dmat2x3\fP"
.br
.RI "2 by 3 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat2x4\fP \fBpacked_dmat2x4\fP"
.br
.RI "2 by 4 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat3x2\fP \fBpacked_dmat3x2\fP"
.br
.RI "3 by 2 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat3x3\fP \fBpacked_dmat3x3\fP"
.br
.RI "3 by 3 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat3x4\fP \fBpacked_dmat3x4\fP"
.br
.RI "3 by 4 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat4x2\fP \fBpacked_dmat4x2\fP"
.br
.RI "4 by 2 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat4x3\fP \fBpacked_dmat4x3\fP"
.br
.RI "4 by 3 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_dmat4x4\fP \fBpacked_dmat4x4\fP"
.br
.RI "4 by 4 matrix tightly packed in memory of double-precision floating-point numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_ivec1\fP \fBaligned_ivec1\fP"
.br
.RI "1 component vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_ivec2\fP \fBaligned_ivec2\fP"
.br
.RI "2 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_ivec3\fP \fBaligned_ivec3\fP"
.br
.RI "3 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_ivec4\fP \fBaligned_ivec4\fP"
.br
.RI "4 components vector aligned in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_ivec1\fP \fBpacked_ivec1\fP"
.br
.RI "1 component vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_ivec2\fP \fBpacked_ivec2\fP"
.br
.RI "2 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_ivec3\fP \fBpacked_ivec3\fP"
.br
.RI "3 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_ivec4\fP \fBpacked_ivec4\fP"
.br
.RI "4 components vector tightly packed in memory of signed integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_uvec1\fP \fBaligned_uvec1\fP"
.br
.RI "1 component vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_uvec2\fP \fBaligned_uvec2\fP"
.br
.RI "2 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_uvec3\fP \fBaligned_uvec3\fP"
.br
.RI "3 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_uvec4\fP \fBaligned_uvec4\fP"
.br
.RI "4 components vector aligned in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_uvec1\fP \fBpacked_uvec1\fP"
.br
.RI "1 component vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_uvec2\fP \fBpacked_uvec2\fP"
.br
.RI "2 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_uvec3\fP \fBpacked_uvec3\fP"
.br
.RI "3 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBpacked_highp_uvec4\fP \fBpacked_uvec4\fP"
.br
.RI "4 components vector tightly packed in memory of unsigned integer numbers\&. "
.ti -1c
.RI "typedef \fBaligned_highp_bvec1\fP \fBaligned_bvec1\fP"
.br
.RI "1 component vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBaligned_highp_bvec2\fP \fBaligned_bvec2\fP"
.br
.RI "2 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBaligned_highp_bvec3\fP \fBaligned_bvec3\fP"
.br
.RI "3 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBaligned_highp_bvec4\fP \fBaligned_bvec4\fP"
.br
.RI "4 components vector aligned in memory of bool values\&. "
.ti -1c
.RI "typedef \fBpacked_highp_bvec1\fP \fBpacked_bvec1\fP"
.br
.RI "1 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBpacked_highp_bvec2\fP \fBpacked_bvec2\fP"
.br
.RI "2 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBpacked_highp_bvec3\fP \fBpacked_bvec3\fP"
.br
.RI "3 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef \fBpacked_highp_bvec4\fP \fBpacked_bvec4\fP"
.br
.RI "4 components vector tightly packed in memory of bool values\&. "
.ti -1c
.RI "typedef bool \fBbool1\fP"
.br
.RI "boolean type with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 2, bool, \fBhighp\fP > \fBbool2\fP"
.br
.RI "boolean type with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 3, bool, \fBhighp\fP > \fBbool3\fP"
.br
.RI "boolean type with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 4, bool, \fBhighp\fP > \fBbool4\fP"
.br
.RI "boolean type with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef bool \fBbool1x1\fP"
.br
.RI "boolean matrix with 1 x 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, bool, \fBhighp\fP > \fBbool2x2\fP"
.br
.RI "boolean matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, bool, \fBhighp\fP > \fBbool2x3\fP"
.br
.RI "boolean matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, bool, \fBhighp\fP > \fBbool2x4\fP"
.br
.RI "boolean matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, bool, \fBhighp\fP > \fBbool3x2\fP"
.br
.RI "boolean matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, bool, \fBhighp\fP > \fBbool3x3\fP"
.br
.RI "boolean matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, bool, \fBhighp\fP > \fBbool3x4\fP"
.br
.RI "boolean matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, bool, \fBhighp\fP > \fBbool4x2\fP"
.br
.RI "boolean matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, bool, \fBhighp\fP > \fBbool4x3\fP"
.br
.RI "boolean matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, bool, \fBhighp\fP > \fBbool4x4\fP"
.br
.RI "boolean matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef int \fBint1\fP"
.br
.RI "integer vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 2, int, \fBhighp\fP > \fBint2\fP"
.br
.RI "integer vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 3, int, \fBhighp\fP > \fBint3\fP"
.br
.RI "integer vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 4, int, \fBhighp\fP > \fBint4\fP"
.br
.RI "integer vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef int \fBint1x1\fP"
.br
.RI "integer matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, int, \fBhighp\fP > \fBint2x2\fP"
.br
.RI "integer matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, int, \fBhighp\fP > \fBint2x3\fP"
.br
.RI "integer matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, int, \fBhighp\fP > \fBint2x4\fP"
.br
.RI "integer matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, int, \fBhighp\fP > \fBint3x2\fP"
.br
.RI "integer matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, int, \fBhighp\fP > \fBint3x3\fP"
.br
.RI "integer matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, int, \fBhighp\fP > \fBint3x4\fP"
.br
.RI "integer matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, int, \fBhighp\fP > \fBint4x2\fP"
.br
.RI "integer matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, int, \fBhighp\fP > \fBint4x3\fP"
.br
.RI "integer matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, int, \fBhighp\fP > \fBint4x4\fP"
.br
.RI "integer matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef float \fBfloat1\fP"
.br
.RI "single-qualifier floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 2, float, \fBhighp\fP > \fBfloat2\fP"
.br
.RI "single-qualifier floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 3, float, \fBhighp\fP > \fBfloat3\fP"
.br
.RI "single-qualifier floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 4, float, \fBhighp\fP > \fBfloat4\fP"
.br
.RI "single-qualifier floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef float \fBfloat1x1\fP"
.br
.RI "single-qualifier floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, float, \fBhighp\fP > \fBfloat2x2\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, float, \fBhighp\fP > \fBfloat2x3\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, float, \fBhighp\fP > \fBfloat2x4\fP"
.br
.RI "single-qualifier floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, float, \fBhighp\fP > \fBfloat3x2\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, float, \fBhighp\fP > \fBfloat3x3\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, float, \fBhighp\fP > \fBfloat3x4\fP"
.br
.RI "single-qualifier floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, float, \fBhighp\fP > \fBfloat4x2\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, float, \fBhighp\fP > \fBfloat4x3\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, \fBhighp\fP > \fBfloat4x4\fP"
.br
.RI "single-qualifier floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef double \fBdouble1\fP"
.br
.RI "double-qualifier floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 2, double, \fBhighp\fP > \fBdouble2\fP"
.br
.RI "double-qualifier floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 3, double, \fBhighp\fP > \fBdouble3\fP"
.br
.RI "double-qualifier floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBvec\fP< 4, double, \fBhighp\fP > \fBdouble4\fP"
.br
.RI "double-qualifier floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef double \fBdouble1x1\fP"
.br
.RI "double-qualifier floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 2, double, \fBhighp\fP > \fBdouble2x2\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 3, double, \fBhighp\fP > \fBdouble2x3\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 2, 4, double, \fBhighp\fP > \fBdouble2x4\fP"
.br
.RI "double-qualifier floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 2, double, \fBhighp\fP > \fBdouble3x2\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 3, double, \fBhighp\fP > \fBdouble3x3\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 3, 4, double, \fBhighp\fP > \fBdouble3x4\fP"
.br
.RI "double-qualifier floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 2, double, \fBhighp\fP > \fBdouble4x2\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 3, double, \fBhighp\fP > \fBdouble4x3\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, double, \fBhighp\fP > \fBdouble4x4\fP"
.br
.RI "double-qualifier floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) "
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBlowp\fP > \fBlowp_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBmediump\fP > \fBmediump_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBhighp\fP > \fBhighp_dualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBlowp\fP > \fBlowp_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBmediump\fP > \fBmediump_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< float, \fBhighp\fP > \fBhighp_fdualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBlowp\fP > \fBlowp_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBmediump\fP > \fBmediump_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBtdualquat\fP< double, \fBhighp\fP > \fBhighp_ddualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_fdualquat\fP \fBdualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_fdualquat\fP \fBfdualquat\fP"
.br
.ti -1c
.RI "typedef \fBhighp_ddualquat\fP \fBddualquat\fP"
.br
.ti -1c
.RI "typedef signed int \fBsint\fP"
.br
.ti -1c
.RI "typedef detail::uint8 \fBbyte\fP"
.br
.ti -1c
.RI "typedef detail::uint16 \fBword\fP"
.br
.ti -1c
.RI "typedef detail::uint32 \fBdword\fP"
.br
.ti -1c
.RI "typedef detail::uint64 \fBqword\fP"
.br
.ti -1c
.RI "template<typename T , typename Vec > using \fBreturn_type_scalar_multiplication\fP = typename std::enable_if< !std::is_same< T, float >::value &&std::is_arithmetic< T >::value, Vec >::\fBtype\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, std::size_t, defaultp > \fBsize1\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, std::size_t, defaultp > \fBsize2\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, std::size_t, defaultp > \fBsize3\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, std::size_t, defaultp > \fBsize4\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 1, std::size_t, defaultp > \fBsize1_t\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 2, std::size_t, defaultp > \fBsize2_t\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 3, std::size_t, defaultp > \fBsize3_t\fP"
.br
.ti -1c
.RI "typedef \fBvec\fP< 4, std::size_t, defaultp > \fBsize4_t\fP"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, defaultp > \fBmat4x4\fP"
.br
.ti -1c
.RI "typedef \fBmat\fP< 4, 4, float, defaultp > \fBmat4\fP"
.br
.in -1c
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBqualifier\fP { \fBpacked_highp\fP, \fBpacked_mediump\fP, \fBpacked_lowp\fP, \fBhighp\fP = packed_highp, \fBmediump\fP = packed_mediump, \fBlowp\fP = packed_lowp, \fBpacked\fP = packed_highp, \fBdefaultp\fP = highp }"
.br
.RI "Qualify GLM types in term of alignment (packed, aligned) and precision in term of ULPs (lowp, mediump, highp) "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBabs\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBabs\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsign\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfloor\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBtrunc\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBroundEven\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBceil\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfract\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfract\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBmod\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBmod\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBmod\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBmodf\fP (genType x, genType &i)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBmin\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBmax\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBclamp\fP (genType x, genType minVal, genType maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBclamp\fP (\fBvec\fP< L, T, Q > const &x, T minVal, T maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBclamp\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &minVal, \fBvec\fP< L, T, Q > const &maxVal)"
.br
.ti -1c
.RI "template<typename genTypeT , typename genTypeU > GLM_FUNC_DECL genTypeT \fBmix\fP (genTypeT x, genTypeT y, genTypeU a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBmix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBmix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, U a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBstep\fP (genType edge, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBstep\fP (T edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBstep\fP (\fBvec\fP< L, T, Q > const &edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsmoothstep\fP (genType edge0, genType edge1, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsmoothstep\fP (T edge0, T edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsmoothstep\fP (\fBvec\fP< L, T, Q > const &edge0, \fBvec\fP< L, T, Q > const &edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisnan\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisinf\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBfloatBitsToInt\fP (float const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfloatBitsToInt\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBfloatBitsToUint\fP (float const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uint, Q > \fBfloatBitsToUint\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBintBitsToFloat\fP (int const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, float, Q > \fBintBitsToFloat\fP (\fBvec\fP< L, int, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBuintBitsToFloat\fP (uint const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, float, Q > \fBuintBitsToFloat\fP (\fBvec\fP< L, uint, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfma\fP (genType const &a, genType const &b, genType const &c)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfrexp\fP (genType x, int &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfrexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > &\fBexp\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBldexp\fP (genType const &x, int const &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBldexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > const &\fBexp\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBmin\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBmax\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER GLM_CONSTEXPR int \fBabs\fP (int x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBround\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBtrunc\fP (genType x)"
.br
.ti -1c
.RI "template<typename genFIType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType \fBabs\fP (genFIType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBabs\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genFIType > GLM_FUNC_QUALIFIER genFIType \fBsign\fP (genFIType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsign\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfloor\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBtrunc\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBroundEven\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBroundEven\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBceil\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfract\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfract\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBmod\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmod\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmod\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBmodf\fP (genType x, genType &i)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 1, T, Q > \fBmodf\fP (\fBvec\fP< 1, T, Q > const &x, \fBvec\fP< 1, T, Q > &i)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBmodf\fP (\fBvec\fP< 2, T, Q > const &x, \fBvec\fP< 2, T, Q > &i)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBmodf\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > &i)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBmodf\fP (\fBvec\fP< 4, T, Q > const &x, \fBvec\fP< 4, T, Q > &i)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &a, T b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &a, T b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBclamp\fP (genType x, genType minVal, genType maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBclamp\fP (\fBvec\fP< L, T, Q > const &x, T minVal, T maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBclamp\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &minVal, \fBvec\fP< L, T, Q > const &maxVal)"
.br
.ti -1c
.RI "template<typename genTypeT , typename genTypeU > GLM_FUNC_QUALIFIER genTypeT \fBmix\fP (genTypeT x, genTypeT y, genTypeU a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, U a)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmix\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBstep\fP (genType edge, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBstep\fP (T edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBstep\fP (\fBvec\fP< L, T, Q > const &edge, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsmoothstep\fP (genType edge0, genType edge1, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsmoothstep\fP (T edge0, T edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsmoothstep\fP (\fBvec\fP< L, T, Q > const &edge0, \fBvec\fP< L, T, Q > const &edge1, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBisnan\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisnan\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBisinf\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisinf\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfloatBitsToInt\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, uint, Q > \fBfloatBitsToUint\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, float, Q > \fBintBitsToFloat\fP (\fBvec\fP< L, int, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, float, Q > \fBuintBitsToFloat\fP (\fBvec\fP< L, uint, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfma\fP (genType const &a, genType const &b, genType const &c)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfrexp\fP (genType x, int &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfrexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > &\fBexp\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBldexp\fP (genType const &x, int const &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBldexp\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, int, Q > const &\fBexp\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBpow\fP (\fBvec\fP< L, T, Q > const &base, \fBvec\fP< L, T, Q > const &exponent)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBexp\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBlog\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBexp2\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBexp2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlog2\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBlog2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBinversesqrt\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBinversesqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlength\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlength\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBdistance\fP (genType const &p0, genType const &p1)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBdistance\fP (\fBvec\fP< L, T, Q > const &p0, \fBvec\fP< L, T, Q > const &p1)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBdot\fP (T x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBdot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBcross\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnormalize\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfaceforward\fP (genType const &N, genType const &I, genType const &Nref)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfaceforward\fP (\fBvec\fP< L, T, Q > const &N, \fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &Nref)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBreflect\fP (genType const &I, genType const &N)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBreflect\fP (\fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &N)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBrefract\fP (genType const &I, genType const &N, genType eta)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBrefract\fP (\fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &N, T eta)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBuaddCarry\fP (uint const &x, uint const &y, uint &Carry)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, uint, Q > \fBuaddCarry\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &Carry)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBusubBorrow\fP (uint const &x, uint const &y, uint &Borrow)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, uint, Q > \fBusubBorrow\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &Borrow)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER void \fBumulExtended\fP (uint const &x, uint const &y, uint &msb, uint &lsb)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER void \fBumulExtended\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &msb, \fBvec\fP< L, uint, Q > &lsb)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER void \fBimulExtended\fP (int x, int y, int &msb, int &lsb)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER void \fBimulExtended\fP (\fBvec\fP< L, int, Q > const &x, \fBvec\fP< L, int, Q > const &y, \fBvec\fP< L, int, Q > &msb, \fBvec\fP< L, int, Q > &lsb)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBbitfieldExtract\fP (genIUType Value, int Offset, int Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldExtract\fP (\fBvec\fP< L, T, Q > const &Value, int Offset, int Bits)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBbitfieldInsert\fP (genIUType const &Base, genIUType const &Insert, int Offset, int Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldInsert\fP (\fBvec\fP< L, T, Q > const &Base, \fBvec\fP< L, T, Q > const &Insert, int Offset, int Bits)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbitfieldReverse\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldReverse\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER int \fBbitCount\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBbitCount\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER int \fBfindLSB\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfindLSB\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER int \fBfindMSB\fP (genIUType v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfindMSB\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBmatrixCompMult\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t DA, length_t DB, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBdetail::outerProduct_trait\fP< DA, DB, T, Q >::\fBtype\fP \fBouterProduct\fP (\fBvec\fP< DA, T, Q > const &c, \fBvec\fP< DB, T, Q > const &r)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q >::transpose_type \fBtranspose\fP (\fBmat\fP< C, R, T, Q > const &m)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBdeterminant\fP (\fBmat\fP< C, R, T, Q > const &m)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBinverse\fP (\fBmat\fP< C, R, T, Q > const &m)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBpackUnorm2x16\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBvec2\fP \fBunpackUnorm2x16\fP (uint p)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBpackSnorm2x16\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBvec2\fP \fBunpackSnorm2x16\fP (uint p)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBpackUnorm4x8\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBvec4\fP \fBunpackUnorm4x8\fP (uint p)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBpackSnorm4x8\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBglm::vec4\fP \fBunpackSnorm4x8\fP (uint p)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER double \fBpackDouble2x32\fP (\fBuvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuvec2\fP \fBunpackDouble2x32\fP (double v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER uint \fBpackHalf2x16\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBvec2\fP \fBunpackHalf2x16\fP (uint v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBradians\fP (genType degrees)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBradians\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBdegrees\fP (genType radians)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBdegrees\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsin\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcos\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBtan\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBasin\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacos\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBatan\fP (genType y, genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBatan\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBatan\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsinh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcosh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBtanh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBasinh\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBasinh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBacosh\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacosh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBatanh\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBatanh\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBlessThan\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBlessThanEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBgreaterThan\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBgreaterThanEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBany\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBall\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnot_\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m, typename \fBmat\fP< 2, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 2, T, Q >::col_type const &v, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m, typename \fBmat\fP< 2, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 2, 2, T, Q >::col_type const &v, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m, typename \fBmat\fP< 2, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 2, T, Q >::col_type const &v, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m, typename \fBmat\fP< 2, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 2, 2, T, Q >::col_type const &v, \fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 2, 2, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m, typename \fBmat\fP< 2, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 3, T, Q >::col_type const &v, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m, typename \fBmat\fP< 2, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 3, T, Q >::col_type const &v, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 2, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m, typename \fBmat\fP< 2, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 4, T, Q >::col_type const &v, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m, typename \fBmat\fP< 2, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 2, 4, T, Q >::col_type const &v, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 2, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 2, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m, typename \fBmat\fP< 3, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 2, T, Q >::col_type const &v, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m, typename \fBmat\fP< 3, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 2, T, Q >::col_type const &v, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 3, 2, T, Q > const &m1, \fBmat\fP< 3, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m, typename \fBmat\fP< 3, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 3, T, Q >::col_type const &v, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m, typename \fBmat\fP< 3, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 3, 3, T, Q >::col_type const &v, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m, typename \fBmat\fP< 3, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 3, T, Q >::col_type const &v, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m, typename \fBmat\fP< 3, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 3, 3, T, Q >::col_type const &v, \fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 3, 3, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m, typename \fBmat\fP< 3, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 4, T, Q >::col_type const &v, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m, typename \fBmat\fP< 3, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 3, 4, T, Q >::col_type const &v, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 2, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 3, 4, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 3, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m, typename \fBmat\fP< 4, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 2, T, Q >::col_type const &v, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (T scalar, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m, typename \fBmat\fP< 4, 2, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 2, T, Q >::col_type const &v, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 2, T, Q > const &m, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBoperator/\fP (T scalar, \fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 4, 2, T, Q > const &m1, \fBmat\fP< 4, 2, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (T const &s, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m, typename \fBmat\fP< 4, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 3, T, Q >::col_type const &v, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBoperator/\fP (T const &s, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (T const &s, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m, typename \fBmat\fP< 4, 3, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 3, T, Q >::col_type const &v, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 3, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBoperator/\fP (T const &s, \fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 4, 3, T, Q > const &m1, \fBmat\fP< 4, 3, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m, typename \fBmat\fP< 4, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 4, T, Q >::col_type const &v, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m, typename \fBmat\fP< 4, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 4, 4, T, Q >::col_type const &v, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator+\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator\-\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q >::col_type \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m, typename \fBmat\fP< 4, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q >::row_type \fBoperator *\fP (typename \fBmat\fP< 4, 4, T, Q >::col_type const &v, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 2, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 3, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator *\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (T const &s, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q >::col_type \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m, typename \fBmat\fP< 4, 4, T, Q >::row_type const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q >::row_type \fBoperator/\fP (typename \fBmat\fP< 4, 4, T, Q >::col_type const &v, \fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBoperator/\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator+\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator\-\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator+\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator\-\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator *\fP (T const &s, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBoperator/\fP (\fBqua\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator!=\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator+\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator\-\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator+\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator\-\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBqua\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator *\fP (\fBqua\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator *\fP (T const &s, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBoperator/\fP (\fBqua\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator!=\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator~\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, bool, Q > \fBoperator &&\fP (\fBvec\fP< 1, bool, Q > const &v1, \fBvec\fP< 1, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 1, bool, Q > \fBoperator||\fP (\fBvec\fP< 1, bool, Q > const &v1, \fBvec\fP< 1, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, T, Q > \fBoperator~\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, bool, Q > \fBoperator &&\fP (\fBvec\fP< 1, bool, Q > const &v1, \fBvec\fP< 1, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 1, bool, Q > \fBoperator||\fP (\fBvec\fP< 1, bool, Q > const &v1, \fBvec\fP< 1, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator~\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, bool, Q > \fBoperator &&\fP (\fBvec\fP< 2, bool, Q > const &v1, \fBvec\fP< 2, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 2, bool, Q > \fBoperator||\fP (\fBvec\fP< 2, bool, Q > const &v1, \fBvec\fP< 2, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator+\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator\-\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator *\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator/\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator%\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator &\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator|\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator^\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator<<\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator>>\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, T, Q > \fBoperator~\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, bool, Q > \fBoperator &&\fP (\fBvec\fP< 2, bool, Q > const &v1, \fBvec\fP< 2, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 2, bool, Q > \fBoperator||\fP (\fBvec\fP< 2, bool, Q > const &v1, \fBvec\fP< 2, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v1, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator~\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, bool, Q > \fBoperator &&\fP (\fBvec\fP< 3, bool, Q > const &v1, \fBvec\fP< 3, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 3, bool, Q > \fBoperator||\fP (\fBvec\fP< 3, bool, Q > const &v1, \fBvec\fP< 3, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator+\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator\-\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator/\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator%\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator &\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator|\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator^\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator<<\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator>>\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, T, Q > \fBoperator~\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, bool, Q > \fBoperator &&\fP (\fBvec\fP< 3, bool, Q > const &v1, \fBvec\fP< 3, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 3, bool, Q > \fBoperator||\fP (\fBvec\fP< 3, bool, Q > const &v1, \fBvec\fP< 3, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator~\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, bool, Q > \fBoperator &&\fP (\fBvec\fP< 4, bool, Q > const &v1, \fBvec\fP< 4, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< 4, bool, Q > \fBoperator||\fP (\fBvec\fP< 4, bool, Q > const &v1, \fBvec\fP< 4, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator+\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator\-\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v, T const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator/\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 1, T, Q > const &scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator%\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v, \fBvec\fP< 1, T, Q > const &scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator &\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator|\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator^\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator<<\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v, T scalar)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 1, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (T scalar, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 1, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator>>\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, T, Q > \fBoperator~\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator==\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBoperator!=\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, bool, Q > \fBoperator &&\fP (\fBvec\fP< 4, bool, Q > const &v1, \fBvec\fP< 4, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< 4, bool, Q > \fBoperator||\fP (\fBvec\fP< 4, bool, Q > const &v1, \fBvec\fP< 4, bool, Q > const &v2)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBpow\fP (\fBvec\fP< L, T, Q > const &base, \fBvec\fP< L, T, Q > const &exponent)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBexp\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBlog\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBexp2\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBlog2\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsqrt\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBinversesqrt\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBortho\fP (T left, T right, T bottom, T top)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH_ZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH_NO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH_ZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH_NO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoNO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBortho\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH_ZO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH_NO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH_ZO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH_NO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumZO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumNO\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBfrustum\fP (T left, T right, T bottom, T top, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH_ZO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH_NO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH_ZO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH_NO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveZO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveNO\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspective\fP (T fovy, T aspect, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH_ZO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH_NO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH_ZO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH_NO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovZO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovNO\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFov\fP (T fov, T width, T height, T near, T far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspectiveLH\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspectiveRH\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspective\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBtweakedInfinitePerspective\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBtweakedInfinitePerspective\fP (T fovy, T aspect, T near, T ep)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBortho\fP (T left, T right, T bottom, T top)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH_ZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH_NO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH_ZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH_NO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoZO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoNO\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoLH\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBorthoRH\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBortho\fP (T left, T right, T bottom, T top, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH_ZO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH_NO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH_ZO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH_NO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumZO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumNO\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumLH\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustumRH\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBfrustum\fP (T left, T right, T bottom, T top, T nearVal, T farVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH_ZO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH_NO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH_ZO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH_NO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveZO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveNO\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveLH\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveRH\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspective\fP (T fovy, T aspect, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH_ZO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH_NO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH_ZO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH_NO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovZO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovNO\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovLH\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFovRH\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBperspectiveFov\fP (T fov, T width, T height, T zNear, T zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspectiveRH\fP (T fovy, T aspect, T zNear)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspectiveLH\fP (T fovy, T aspect, T zNear)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBinfinitePerspective\fP (T fovy, T aspect, T zNear)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBtweakedInfinitePerspective\fP (T fovy, T aspect, T zNear, T ep)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBtweakedInfinitePerspective\fP (T fovy, T aspect, T zNear)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBmix\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBmat\fP< C, R, U, Q > const &a)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBmix\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, U a)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBmix\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, U a)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBmix\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBmat\fP< C, R, U, Q > const &a)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBprojectZO\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBprojectNO\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBproject\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBunProjectZO\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBunProjectNO\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBunProject\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , qualifier Q, typename U > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBpickMatrix\fP (\fBvec\fP< 2, T, Q > const &center, \fBvec\fP< 2, T, Q > const &delta, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBprojectZO\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBprojectNO\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBproject\fP (\fBvec\fP< 3, T, Q > const &obj, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBunProjectZO\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBunProjectNO\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBunProject\fP (\fBvec\fP< 3, T, Q > const &win, \fBmat\fP< 4, 4, T, Q > const &model, \fBmat\fP< 4, 4, T, Q > const &\fBproj\fP, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<typename T , qualifier Q, typename U > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBpickMatrix\fP (\fBvec\fP< 2, T, Q > const &center, \fBvec\fP< 2, T, Q > const &delta, \fBvec\fP< 4, U, Q > const &viewport)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBvec\fP< C, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBvec\fP< C, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, int ULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBvec\fP< C, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, int ULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, \fBvec\fP< C, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, T Epsilon)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, \fBvec\fP< C, T, Q > const &Epsilon)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, T Epsilon)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, \fBvec\fP< C, T, Q > const &Epsilon)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, int MaxULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBequal\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, \fBvec\fP< C, int, Q > const &MaxULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y, int MaxULPs)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< C, bool, Q > \fBnotEqual\fP (\fBmat\fP< C, R, T, Q > const &a, \fBmat\fP< C, R, T, Q > const &b, \fBvec\fP< C, int, Q > const &MaxULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBidentity\fP ()"
.br
.RI "Builds an identity matrix\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBtranslate\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBrotate\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBscale\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBlookAtRH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBlookAtLH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBlookAt\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBidentity\fP ()"
.br
.RI "Builds an identity matrix\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBtranslate\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrotate\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrotate_slow\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBscale\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBscale_slow\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBlookAtRH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBlookAtLH\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBlookAt\fP (\fBvec\fP< 3, T, Q > const &eye, \fBvec\fP< 3, T, Q > const &center, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBmix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBlerp\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBslerp\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBconjugate\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBinverse\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBisnan\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBisinf\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBmix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBlerp\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBslerp\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBconjugate\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBinverse\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBisnan\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBisinf\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBexp\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBlog\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBpow\fP (\fBqua\fP< T, Q > const &q, T y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBsqrt\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBexp\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBlog\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBpow\fP (\fBqua\fP< T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBsqrt\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBlength\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBnormalize\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBdot\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBcross\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBdot\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlength\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBnormalize\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBequal\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBequal\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBnotEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBnotEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBequal\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBequal\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBnotEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBnotEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBangle\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBaxis\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBangleAxis\fP (T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBangle\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBaxis\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBangleAxis\fP (T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmin\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmin\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmax\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmax\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmin\fP (T a, T b)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmin\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmin\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmax\fP (T a, T b)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmax\fP (T a, T b, T C)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfmax\fP (T a, T b, T C, T D)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmin\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmin\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmax\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmax\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmin\fP (T a, T b)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmin\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmin\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmax\fP (T a, T b)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmax\fP (T a, T b, T c)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfmax\fP (T a, T b, T c, T d)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBepsilon\fP ()"
.br
.RI "Return the epsilon constant for floating point types\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBpi\fP ()"
.br
.RI "Return the pi constant for floating point types\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBepsilon\fP ()"
.br
.RI "Return the epsilon constant for floating point types\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBpi\fP ()"
.br
.RI "Return the pi constant for floating point types\&. "
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL bool \fBisPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBnextPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBprevPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL bool \fBisMultiple\fP (genIUType v, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBnextMultiple\fP (genIUType v, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBprevMultiple\fP (genIUType v, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL int \fBfindNSB\fP (genIUType x, int significantBitCount)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER bool \fBisPowerOfTwo\fP (genIUType Value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBnextPowerOfTwo\fP (genIUType value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBprevPowerOfTwo\fP (genIUType value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER bool \fBisMultiple\fP (genIUType Value, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBnextMultiple\fP (genIUType Source, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBprevMultiple\fP (genIUType Source, genIUType Multiple)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER int \fBfindNSB\fP (genIUType x, int significantBitCount)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool \fBequal\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool \fBnotEqual\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool \fBequal\fP (genType const &x, genType const &y, int ULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool \fBnotEqual\fP (genType const &x, genType const &y, int ULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBequal\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBnotEqual\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBequal\fP (genType const &x, genType const &y, int MaxULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool \fBnotEqual\fP (genType const &x, genType const &y, int ULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBnextFloat\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBprevFloat\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBnextFloat\fP (genType x, int ULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBprevFloat\fP (genType x, int ULPs)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBfloatDistance\fP (float x, float y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBfloatDistance\fP (double x, double y)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER float \fBnextFloat\fP (float x)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER double \fBnextFloat\fP (double x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBnextFloat\fP (T x, int ULPs)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER float \fBprevFloat\fP (float x)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER double \fBprevFloat\fP (double x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBprevFloat\fP (T x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c, \fBvec\fP< L, T, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, T, Q > const &w)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c, \fBvec\fP< L, T, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, T b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c, \fBvec\fP< L, T, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, T, Q > const &w)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBmax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, T, Q > const &w)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, T b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmin\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c, \fBvec\fP< L, T, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, T b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmax\fP (\fBvec\fP< L, T, Q > const &a, \fBvec\fP< L, T, Q > const &b, \fBvec\fP< L, T, Q > const &c, \fBvec\fP< L, T, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisMultiple\fP (\fBvec\fP< L, T, Q > const &v, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextMultiple\fP (\fBvec\fP< L, T, Q > const &v, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevMultiple\fP (\fBvec\fP< L, T, Q > const &v, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfindNSB\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, int, Q > SignificantBitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisMultiple\fP (\fBvec\fP< L, T, Q > const &Value, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisMultiple\fP (\fBvec\fP< L, T, Q > const &Value, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextMultiple\fP (\fBvec\fP< L, T, Q > const &Source, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextMultiple\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevMultiple\fP (\fBvec\fP< L, T, Q > const &Source, T Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevMultiple\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfindNSB\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, int, Q > SignificantBitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T \fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T Epsilon)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &Epsilon)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T Epsilon)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &Epsilon)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, int MaxULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, int, Q > const &MaxULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, int MaxULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, int, Q > const &MaxULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfloatDistance\fP (\fBvec\fP< L, float, Q > const &x, \fBvec\fP< L, float, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, \fBint64\fP, Q > \fBfloatDistance\fP (\fBvec\fP< L, double, Q > const &x, \fBvec\fP< L, double, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnextFloat\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprevFloat\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfloatDistance\fP (\fBvec\fP< L, float, Q > const &x, \fBvec\fP< L, float, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, \fBint64\fP, Q > \fBfloatDistance\fP (\fBvec\fP< L, double, Q > const &x, \fBvec\fP< L, double, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBlength\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBdistance\fP (\fBvec\fP< L, T, Q > const &p0, \fBvec\fP< L, T, Q > const &p1)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBdot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBcross\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnormalize\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfaceforward\fP (\fBvec\fP< L, T, Q > const &N, \fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &Nref)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBreflect\fP (\fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &N)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBrefract\fP (\fBvec\fP< L, T, Q > const &I, \fBvec\fP< L, T, Q > const &N, T eta)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBmask\fP (genIUType Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBmask\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBbitfieldRotateRight\fP (genIUType In, int Shift)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldRotateRight\fP (\fBvec\fP< L, T, Q > const &In, int Shift)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBbitfieldRotateLeft\fP (genIUType In, int Shift)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldRotateLeft\fP (\fBvec\fP< L, T, Q > const &In, int Shift)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBbitfieldFillOne\fP (genIUType Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldFillOne\fP (\fBvec\fP< L, T, Q > const &Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBbitfieldFillZero\fP (genIUType Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldFillZero\fP (\fBvec\fP< L, T, Q > const &Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint16\fP \fBbitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBbitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBbitfieldInterleave\fP (\fBu8vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBglm::u8vec2\fP \fBbitfieldDeinterleave\fP (\fBglm::uint16\fP x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBbitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBbitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBbitfieldInterleave\fP (\fBu16vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBglm::u16vec2\fP \fBbitfieldDeinterleave\fP (\fBglm::uint32\fP x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBbitfieldInterleave\fP (\fBint32\fP x, \fBint32\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBbitfieldInterleave\fP (\fBuint32\fP x, \fBuint32\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBbitfieldInterleave\fP (\fBu32vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBglm::u32vec2\fP \fBbitfieldDeinterleave\fP (\fBglm::uint64\fP x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBbitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBbitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBbitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBbitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBbitfieldInterleave\fP (\fBint32\fP x, \fBint32\fP y, \fBint32\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBbitfieldInterleave\fP (\fBuint32\fP x, \fBuint32\fP y, \fBuint32\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBbitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z, \fBint8\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBbitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z, \fBuint8\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBbitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z, \fBint16\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBbitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z, \fBuint16\fP w)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBmask\fP (genIUType Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmask\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIType > GLM_FUNC_QUALIFIER genIType \fBbitfieldRotateRight\fP (genIType In, int Shift)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldRotateRight\fP (\fBvec\fP< L, T, Q > const &In, int Shift)"
.br
.ti -1c
.RI "template<typename genIType > GLM_FUNC_QUALIFIER genIType \fBbitfieldRotateLeft\fP (genIType In, int Shift)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldRotateLeft\fP (\fBvec\fP< L, T, Q > const &In, int Shift)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBbitfieldFillOne\fP (genIUType Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldFillOne\fP (\fBvec\fP< L, T, Q > const &Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBbitfieldFillZero\fP (genIUType Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBbitfieldFillZero\fP (\fBvec\fP< L, T, Q > const &Value, int FirstBit, int BitCount)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuint32\fP \fBbitfieldInterleave\fP (\fBu8vec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuint64\fP \fBbitfieldInterleave\fP (\fBu16vec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuint64\fP \fBbitfieldInterleave\fP (\fBu32vec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuint32\fP \fBbitfieldInterleave\fP (\fBu8vec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER \fBuint64\fP \fBbitfieldInterleave\fP (\fBu16vec4\fP const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBconvertLinearToSRGB\fP (\fBvec\fP< L, T, Q > const &ColorLinear)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBconvertLinearToSRGB\fP (\fBvec\fP< L, T, Q > const &ColorLinear, T Gamma)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBconvertSRGBToLinear\fP (\fBvec\fP< L, T, Q > const &ColorSRGB)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBconvertSRGBToLinear\fP (\fBvec\fP< L, T, Q > const &ColorSRGB, T Gamma)"
.br
.RI "Convert a sRGB color to linear color using a custom gamma correction\&. "
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBconvertLinearToSRGB\fP (\fBvec\fP< L, T, Q > const &ColorLinear)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER \fBvec\fP< 3, float, \fBlowp\fP > \fBconvertLinearToSRGB\fP (\fBvec\fP< 3, float, \fBlowp\fP > const &ColorLinear)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBconvertLinearToSRGB\fP (\fBvec\fP< L, T, Q > const &ColorLinear, T Gamma)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBconvertSRGBToLinear\fP (\fBvec\fP< L, T, Q > const &ColorSRGB)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBconvertSRGBToLinear\fP (\fBvec\fP< L, T, Q > const &ColorSRGB, T Gamma)"
.br
.RI "Convert a sRGB color to linear color using a custom gamma correction\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBzero\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBone\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBtwo_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBhalf_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBthree_over_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBquarter_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBone_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBone_over_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBtwo_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBfour_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBtwo_over_root_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBone_over_root_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_half_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_ln_four\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBe\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBeuler\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_three\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBroot_five\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBln_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBln_ten\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBln_ln_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBthird\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBtwo_thirds\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR genType \fBgolden_ratio\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBzero\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBone\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBtwo_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBhalf_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBthree_over_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBquarter_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBone_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBone_over_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBtwo_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBfour_over_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBtwo_over_root_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBone_over_root_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_half_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_two_pi\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_ln_four\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBe\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBeuler\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_three\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBroot_five\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBln_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBln_ten\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBln_ln_two\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBthird\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBtwo_thirds\fP ()"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType \fBgolden_ratio\fP ()"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBepsilonEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBepsilonEqual\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBepsilonNotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBepsilonNotEqual\fP (genType const &x, genType const &y, genType const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER bool \fBepsilonEqual\fP (float const &x, float const &y, float const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER bool \fBepsilonEqual\fP (double const &x, double const &y, double const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBepsilonEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBepsilonEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER bool \fBepsilonNotEqual\fP (float const &x, float const &y, float const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER bool \fBepsilonNotEqual\fP (double const &x, double const &y, double const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBepsilonNotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBepsilonNotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBepsilonEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBepsilonNotEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBlog2\fP (genIUType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBiround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uint, Q > \fBuround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER int \fBiround\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBiround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER uint \fBuround\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, uint, Q > \fBuround\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::row_type \fBrow\fP (genType const &m, length_t index)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBrow\fP (genType const &m, length_t index, typename genType::row_type const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::col_type \fBcolumn\fP (genType const &m, length_t index)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcolumn\fP (genType const &m, length_t index, typename genType::col_type const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBrow\fP (genType const &m, length_t index, typename genType::row_type const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType::row_type \fBrow\fP (genType const &m, length_t index)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcolumn\fP (genType const &m, length_t index, typename genType::col_type const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType::col_type \fBcolumn\fP (genType const &m, length_t index)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBaffineInverse\fP (genType const &m)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBinverseTranspose\fP (genType const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBaffineInverse\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBaffineInverse\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBinverseTranspose\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBinverseTranspose\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBinverseTranspose\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBperlin\fP (\fBvec\fP< L, T, Q > const &p)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBperlin\fP (\fBvec\fP< L, T, Q > const &p, \fBvec\fP< L, T, Q > const &rep)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBsimplex\fP (\fBvec\fP< L, T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 2, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 3, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 4, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 2, T, Q > const &Position, \fBvec\fP< 2, T, Q > const &rep)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 3, T, Q > const &Position, \fBvec\fP< 3, T, Q > const &rep)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBperlin\fP (\fBvec\fP< 4, T, Q > const &Position, \fBvec\fP< 4, T, Q > const &rep)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBsimplex\fP (\fBglm::vec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBsimplex\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBsimplex\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint8\fP \fBpackUnorm1x8\fP (float v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBunpackUnorm1x8\fP (\fBuint8\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUnorm2x8\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec2\fP \fBunpackUnorm2x8\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint8\fP \fBpackSnorm1x8\fP (float s)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBunpackSnorm1x8\fP (\fBuint8\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackSnorm2x8\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec2\fP \fBunpackSnorm2x8\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUnorm1x16\fP (float v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBunpackUnorm1x16\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBpackUnorm4x16\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackUnorm4x16\fP (\fBuint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackSnorm1x16\fP (float v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBunpackSnorm1x16\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBpackSnorm4x16\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackSnorm4x16\fP (\fBuint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackHalf1x16\fP (float v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL float \fBunpackHalf1x16\fP (\fBuint16\fP v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBpackHalf4x16\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackHalf4x16\fP (\fBuint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackI3x10_1x2\fP (\fBivec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBivec4\fP \fBunpackI3x10_1x2\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackU3x10_1x2\fP (\fBuvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuvec4\fP \fBunpackU3x10_1x2\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackSnorm3x10_1x2\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackSnorm3x10_1x2\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackUnorm3x10_1x2\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackUnorm3x10_1x2\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackF2x11_1x10\fP (\fBvec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec3\fP \fBunpackF2x11_1x10\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackF3x9_E1x5\fP (\fBvec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec3\fP \fBunpackF3x9_E1x5\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBpackRGBM\fP (\fBvec\fP< 3, T, Q > const &\fBrgb\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBunpackRGBM\fP (\fBvec\fP< 4, T, Q > const &rgbm)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, \fBuint16\fP, Q > \fBpackHalf\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, float, Q > \fBunpackHalf\fP (\fBvec\fP< L, \fBuint16\fP, Q > const &p)"
.br
.ti -1c
.RI "template<typename uintType , length_t L, typename floatType , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uintType, Q > \fBpackUnorm\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<typename floatType , length_t L, typename uintType , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, floatType, Q > \fBunpackUnorm\fP (\fBvec\fP< L, uintType, Q > const &v)"
.br
.ti -1c
.RI "template<typename intType , length_t L, typename floatType , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, intType, Q > \fBpackSnorm\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<typename floatType , length_t L, typename intType , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, floatType, Q > \fBunpackSnorm\fP (\fBvec\fP< L, intType, Q > const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint8\fP \fBpackUnorm2x4\fP (\fBvec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec2\fP \fBunpackUnorm2x4\fP (\fBuint8\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUnorm4x4\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackUnorm4x4\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUnorm1x5_1x6_1x5\fP (\fBvec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec3\fP \fBunpackUnorm1x5_1x6_1x5\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUnorm3x5_1x1\fP (\fBvec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec4\fP \fBunpackUnorm3x5_1x1\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint8\fP \fBpackUnorm2x3_1x2\fP (\fBvec3\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBvec3\fP \fBunpackUnorm2x3_1x2\fP (\fBuint8\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint16\fP \fBpackInt2x8\fP (\fBi8vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBi8vec2\fP \fBunpackInt2x8\fP (\fBint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBpackUint2x8\fP (\fBu8vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBu8vec2\fP \fBunpackUint2x8\fP (\fBuint16\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBpackInt4x8\fP (\fBi8vec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBi8vec4\fP \fBunpackInt4x8\fP (\fBint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBpackUint4x8\fP (\fBu8vec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBu8vec4\fP \fBunpackUint4x8\fP (\fBuint32\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBpackInt2x16\fP (\fBi16vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBi16vec2\fP \fBunpackInt2x16\fP (int p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBpackInt4x16\fP (\fBi16vec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBi16vec4\fP \fBunpackInt4x16\fP (\fBint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBpackUint2x16\fP (\fBu16vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBu16vec2\fP \fBunpackUint2x16\fP (uint p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBpackUint4x16\fP (\fBu16vec4\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBu16vec4\fP \fBunpackUint4x16\fP (\fBuint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBpackInt2x32\fP (\fBi32vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBi32vec2\fP \fBunpackInt2x32\fP (\fBint64\fP p)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBpackUint2x32\fP (\fBu32vec2\fP const &v)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBu32vec2\fP \fBunpackUint2x32\fP (\fBuint64\fP p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBpackRGBM\fP (\fBvec\fP< 3, T, Q > const &\fBrgb\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBunpackRGBM\fP (\fBvec\fP< 4, T, Q > const &rgbm)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, \fBuint16\fP, Q > \fBpackHalf\fP (\fBvec\fP< L, float, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, float, Q > \fBunpackHalf\fP (\fBvec\fP< L, \fBuint16\fP, Q > const &v)"
.br
.ti -1c
.RI "template<typename uintType , length_t L, typename floatType , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, uintType, Q > \fBpackUnorm\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<typename floatType , length_t L, typename uintType , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, floatType, Q > \fBunpackUnorm\fP (\fBvec\fP< L, uintType, Q > const &v)"
.br
.ti -1c
.RI "template<typename intType , length_t L, typename floatType , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, intType, Q > \fBpackSnorm\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<typename floatType , length_t L, typename intType , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, floatType, Q > \fBunpackSnorm\fP (\fBvec\fP< L, intType, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBeulerAngles\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBroll\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBpitch\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fByaw\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBmat3_cast\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBmat4_cast\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquat_cast\fP (\fBmat\fP< 3, 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquat_cast\fP (\fBmat\fP< 4, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBlessThan\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBlessThanEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBgreaterThan\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBgreaterThanEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquatLookAt\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquatLookAtRH\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquatLookAtLH\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBeulerAngles\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBroll\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBpitch\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fByaw\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBmat3_cast\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBmat4_cast\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquat_cast\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquat_cast\fP (\fBmat\fP< 4, 4, T, Q > const &m4)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBlessThan\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBlessThanEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBgreaterThan\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBgreaterThanEqual\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquatLookAt\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquatLookAtRH\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquatLookAtLH\fP (\fBvec\fP< 3, T, Q > const &direction, \fBvec\fP< 3, T, Q > const &up)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBlinearRand\fP (genType Min, genType Max)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBlinearRand\fP (\fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBgaussRand\fP (genType Mean, genType Deviation)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 2, T, defaultp > \fBcircularRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 3, T, defaultp > \fBsphericalRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 2, T, defaultp > \fBdiskRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 3, T, defaultp > \fBballRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlinearRand\fP (genType Min, genType Max)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBlinearRand\fP (\fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBgaussRand\fP (genType Mean, genType Deviation)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBgaussRand\fP (\fBvec\fP< L, T, Q > const &Mean, \fBvec\fP< L, T, Q > const &Deviation)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, defaultp > \fBdiskRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, defaultp > \fBballRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, defaultp > \fBcircularRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, defaultp > \fBsphericalRand\fP (T Radius)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsec\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcsc\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcot\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBasec\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBacsc\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBacot\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsech\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcsch\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcoth\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBasech\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBacsch\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBacoth\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsec\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsec\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcsc\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcsc\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcot\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcot\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBasec\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBasec\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBacsc\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacsc\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBacot\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacot\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsech\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBsech\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcsch\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcsch\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcoth\fP (genType \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcoth\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBasech\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBasech\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBacsch\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacsch\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBacoth\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBacoth\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBceilPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBceilPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBfloorPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfloorPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBroundPowerOfTwo\fP (genIUType v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBroundPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBceilMultiple\fP (genType v, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBceilMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfloorMultiple\fP (genType v, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfloorMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBroundMultiple\fP (genType v, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBroundMultiple\fP (\fBvec\fP< L, T, Q > const &v, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBceilPowerOfTwo\fP (genType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBceilPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfloorPowerOfTwo\fP (genType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfloorPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBroundPowerOfTwo\fP (genIUType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBroundPowerOfTwo\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBceilMultiple\fP (genType Source, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBceilMultiple\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfloorMultiple\fP (genType Source, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfloorMultiple\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBroundMultiple\fP (genType Source, genType Multiple)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBroundMultiple\fP (\fBvec\fP< L, T, Q > const &Source, \fBvec\fP< L, T, Q > const &Multiple)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::value_type const  * \fBvalue_ptr\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 2, T, defaultp > \fBmake_vec2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 3, T, defaultp > \fBmake_vec3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBvec\fP< 4, T, defaultp > \fBmake_vec4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 2, 2, T, defaultp > \fBmake_mat2x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 2, 3, T, defaultp > \fBmake_mat2x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 2, 4, T, defaultp > \fBmake_mat2x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 3, 2, T, defaultp > \fBmake_mat3x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 3, 3, T, defaultp > \fBmake_mat3x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 3, 4, T, defaultp > \fBmake_mat3x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 2, T, defaultp > \fBmake_mat4x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 3, T, defaultp > \fBmake_mat4x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBmake_mat4x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 2, 2, T, defaultp > \fBmake_mat2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 3, 3, T, defaultp > \fBmake_mat3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBmake_mat4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBqua\fP< T, defaultp > \fBmake_quat\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBvec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBvec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBvec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 2, 2, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 3, 3, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 4, 4, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 2, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 2, 3, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 3, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 3, 2, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 2, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 2, 4, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 4, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 4, 2, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 3, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 3, 4, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBmat\fP< 4, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBmat\fP< 4, 3, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T const  * \fBvalue_ptr\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T * \fBvalue_ptr\fP (\fBqua\fP< T, Q > &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 1, T, Q > \fBmake_vec1\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 2, T, Q > \fBmake_vec2\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 3, T, Q > \fBmake_vec3\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> \fBvec\fP< 4, T, Q > \fBmake_vec4\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, defaultp > \fBmake_vec2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, defaultp > \fBmake_vec3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, defaultp > \fBmake_vec4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, defaultp > \fBmake_mat2x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, defaultp > \fBmake_mat2x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, defaultp > \fBmake_mat2x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, defaultp > \fBmake_mat3x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, defaultp > \fBmake_mat3x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, defaultp > \fBmake_mat3x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, defaultp > \fBmake_mat4x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, defaultp > \fBmake_mat4x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBmake_mat4x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, defaultp > \fBmake_mat2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, defaultp > \fBmake_mat3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBmake_mat4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBqua\fP< T, defaultp > \fBmake_quat\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBnext_float\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBprev_float\fP (genType x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBnext_float\fP (genType x, int ULPs)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBprev_float\fP (genType x, int ULPs)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBfloat_distance\fP (float x, float y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBfloat_distance\fP (double x, double y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfloat_distance\fP (\fBvec\fP< L, float, Q > const &x, \fBvec\fP< L, float, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, \fBint64\fP, Q > \fBfloat_distance\fP (\fBvec\fP< L, double, Q > const &x, \fBvec\fP< L, double, Q > const &y)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER float \fBnext_float\fP (float x)"
.br
.ti -1c
.RI "template<> GLM_FUNC_QUALIFIER double \fBnext_float\fP (double x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBnext_float\fP (T x, int ULPs)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER float \fBprev_float\fP (float x)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER double \fBprev_float\fP (double x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBprev_float\fP (T x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBnext_float\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x, int ULPs)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBprev_float\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &ULPs)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, int, Q > \fBfloat_distance\fP (\fBvec\fP< L, float, Q > const &x, \fBvec\fP< L, float, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, \fBint64\fP, Q > \fBfloat_distance\fP (\fBvec\fP< L, double, Q > const &x, \fBvec\fP< L, double, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_DECL U \fBassociatedMin\fP (T x, U a, T y, U b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (T x, const \fBvec\fP< L, U, Q > &a, T y, const \fBvec\fP< L, U, Q > &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_DECL U \fBassociatedMin\fP (T x, U a, T y, U b, T z, U c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_DECL U \fBassociatedMin\fP (T x, U a, T y, U b, T z, U c, T w, U d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c, \fBvec\fP< L, T, Q > const &w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c, T w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c, \fBvec\fP< L, T, Q > const &w, U d)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_DECL U \fBassociatedMax\fP (T x, U a, T y, U b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_DECL U \fBassociatedMax\fP (T x, U a, T y, U b, T z, U c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_DECL U \fBassociatedMax\fP (T x, U a, T y, U b, T z, U c, T w, U d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c, \fBvec\fP< L, T, Q > const &w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c, T w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c, \fBvec\fP< L, T, Q > const &w, U d)"
.br
.ti -1c
.RI "template<typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER U \fBassociatedMin\fP (T x, U a, T y, U b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (T x, const \fBvec\fP< L, U, Q > &a, T y, const \fBvec\fP< L, U, Q > &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_QUALIFIER U \fBassociatedMin\fP (T x, U a, T y, U b, T z, U c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_QUALIFIER U \fBassociatedMin\fP (T x, U a, T y, U b, T z, U c, T w, U d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c, \fBvec\fP< L, T, Q > const &w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c, T w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMin\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c, \fBvec\fP< L, T, Q > const &w, U d)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_QUALIFIER U \fBassociatedMax\fP (T x, U a, T y, U b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_QUALIFIER U \fBassociatedMax\fP (T x, U a, T y, U b, T z, U c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c)"
.br
.ti -1c
.RI "template<typename T , typename U > GLM_FUNC_QUALIFIER U \fBassociatedMax\fP (T x, U a, T y, U b, T z, U c, T w, U d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, U, Q > const &a, \fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, U, Q > const &b, \fBvec\fP< L, T, Q > const &z, \fBvec\fP< L, U, Q > const &c, \fBvec\fP< L, T, Q > const &w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (T x, \fBvec\fP< L, U, Q > const &a, T y, \fBvec\fP< L, U, Q > const &b, T z, \fBvec\fP< L, U, Q > const &c, T w, \fBvec\fP< L, U, Q > const &d)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename U , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, U, Q > \fBassociatedMax\fP (\fBvec\fP< L, T, Q > const &x, U a, \fBvec\fP< L, T, Q > const &y, U b, \fBvec\fP< L, T, Q > const &z, U c, \fBvec\fP< L, T, Q > const &w, U d)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBhighestBitValue\fP (genIUType Value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBlowestBitValue\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBhighestBitValue\fP (\fBvec\fP< L, T, Q > const &value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_DEPRECATED GLM_FUNC_DECL genIUType \fBpowerOfTwoAbove\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_DEPRECATED GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBpowerOfTwoAbove\fP (\fBvec\fP< L, T, Q > const &value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_DEPRECATED GLM_FUNC_DECL genIUType \fBpowerOfTwoBelow\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_DEPRECATED GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBpowerOfTwoBelow\fP (\fBvec\fP< L, T, Q > const &value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_DEPRECATED GLM_FUNC_DECL genIUType \fBpowerOfTwoNearest\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_DEPRECATED GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBpowerOfTwoNearest\fP (\fBvec\fP< L, T, Q > const &value)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBhighestBitValue\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBhighestBitValue\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_QUALIFIER genIUType \fBlowestBitValue\fP (genIUType Value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBlowestBitValue\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpowerOfTwoAbove\fP (genType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBpowerOfTwoAbove\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpowerOfTwoBelow\fP (genType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBpowerOfTwoBelow\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpowerOfTwoNearest\fP (genType value)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBpowerOfTwoNearest\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBclosestPointOnLine\fP (\fBvec\fP< 3, T, Q > const &point, \fBvec\fP< 3, T, Q > const &a, \fBvec\fP< 3, T, Q > const &b)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBclosestPointOnLine\fP (\fBvec\fP< 2, T, Q > const &point, \fBvec\fP< 2, T, Q > const &a, \fBvec\fP< 2, T, Q > const &b)"
.br
.RI "2d lines work as well "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBclosestPointOnLine\fP (\fBvec\fP< 3, T, Q > const &point, \fBvec\fP< 3, T, Q > const &a, \fBvec\fP< 3, T, Q > const &b)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBclosestPointOnLine\fP (\fBvec\fP< 2, T, Q > const &point, \fBvec\fP< 2, T, Q > const &a, \fBvec\fP< 2, T, Q > const &b)"
.br
.RI "2d lines work as well "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBconvertLinearSRGBToD65XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorLinearSRGB)"
.br
.RI "Convert a linear sRGB color to D65 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBconvertLinearSRGBToD50XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorLinearSRGB)"
.br
.RI "Convert a linear sRGB color to D50 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBconvertD65XYZToLinearSRGB\fP (\fBvec\fP< 3, T, Q > const &ColorD65XYZ)"
.br
.RI "Convert a D65 YUV color to linear sRGB\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBconvertD65XYZToD50XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorD65XYZ)"
.br
.RI "Convert a D65 YUV color to D50 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBconvertLinearSRGBToD65XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorLinearSRGB)"
.br
.RI "Convert a linear sRGB color to D65 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBconvertLinearSRGBToD50XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorLinearSRGB)"
.br
.RI "Convert a linear sRGB color to D50 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBconvertD65XYZToLinearSRGB\fP (\fBvec\fP< 3, T, Q > const &ColorD65XYZ)"
.br
.RI "Convert a D65 YUV color to linear sRGB\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBconvertD65XYZToD50XYZ\fP (\fBvec\fP< 3, T, Q > const &ColorD65XYZ)"
.br
.RI "Convert a D65 YUV color to D50 YUV\&. "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrgbColor\fP (\fBvec\fP< 3, T, Q > const &hsvValue)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBhsvColor\fP (\fBvec\fP< 3, T, Q > const &rgbValue)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBsaturation\fP (T const s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBsaturation\fP (T const s, \fBvec\fP< 3, T, Q > const &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBsaturation\fP (T const s, \fBvec\fP< 4, T, Q > const &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBluminosity\fP (\fBvec\fP< 3, T, Q > const &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrgbColor\fP (const \fBvec\fP< 3, T, Q > &\fBhsvColor\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBhsvColor\fP (const \fBvec\fP< 3, T, Q > &\fBrgbColor\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBsaturation\fP (T const s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBsaturation\fP (const T s, const \fBvec\fP< 3, T, Q > &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBsaturation\fP (const T s, const \fBvec\fP< 4, T, Q > &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBluminosity\fP (const \fBvec\fP< 3, T, Q > &color)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrgb2YCoCg\fP (\fBvec\fP< 3, T, Q > const &\fBrgbColor\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBYCoCg2rgb\fP (\fBvec\fP< 3, T, Q > const &YCoCgColor)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrgb2YCoCgR\fP (\fBvec\fP< 3, T, Q > const &\fBrgbColor\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBYCoCgR2rgb\fP (\fBvec\fP< 3, T, Q > const &YCoCgColor)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrgb2YCoCg\fP (\fBvec\fP< 3, T, Q > const &\fBrgbColor\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBYCoCg2rgb\fP (\fBvec\fP< 3, T, Q > const &YCoCgColor)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrgb2YCoCgR\fP (\fBvec\fP< 3, T, Q > const &\fBrgbColor\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBYCoCgR2rgb\fP (\fBvec\fP< 3, T, Q > const &YCoCgRColor)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::bool_type \fBisdenormal\fP (genType const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfmod\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBopenBounded\fP (\fBvec\fP< L, T, Q > const &Value, \fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBcloseBounded\fP (\fBvec\fP< L, T, Q > const &Value, \fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBisdenormal\fP (T const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 1, T, Q >::bool_type \fBisdenormal\fP (\fBvec\fP< 1, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q >::bool_type \fBisdenormal\fP (\fBvec\fP< 2, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q >::bool_type \fBisdenormal\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q >::bool_type \fBisdenormal\fP (\fBvec\fP< 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfmod\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmod\fP (\fBvec\fP< L, T, Q > const &x, T y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfmod\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBopenBounded\fP (\fBvec\fP< L, T, Q > const &Value, \fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBcloseBounded\fP (\fBvec\fP< L, T, Q > const &Value, \fBvec\fP< L, T, Q > const &Min, \fBvec\fP< L, T, Q > const &Max)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBlerp\fP (T x, T y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBlerp\fP (const \fBvec\fP< 2, T, Q > &x, const \fBvec\fP< 2, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBlerp\fP (const \fBvec\fP< 3, T, Q > &x, const \fBvec\fP< 3, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBlerp\fP (const \fBvec\fP< 4, T, Q > &x, const \fBvec\fP< 4, T, Q > &y, T a)"
.br
.RI "Returns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBlerp\fP (const \fBvec\fP< 2, T, Q > &x, const \fBvec\fP< 2, T, Q > &y, const \fBvec\fP< 2, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBlerp\fP (const \fBvec\fP< 3, T, Q > &x, const \fBvec\fP< 3, T, Q > &y, const \fBvec\fP< 3, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBlerp\fP (const \fBvec\fP< 4, T, Q > &x, const \fBvec\fP< 4, T, Q > &y, const \fBvec\fP< 4, T, Q > &a)"
.br
.RI "Returns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBsaturate\fP (T x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBsaturate\fP (const \fBvec\fP< 2, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBsaturate\fP (const \fBvec\fP< 3, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBsaturate\fP (const \fBvec\fP< 4, T, Q > &x)"
.br
.RI "Returns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBatan2\fP (T x, T y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBatan2\fP (const \fBvec\fP< 2, T, Q > &x, const \fBvec\fP< 2, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBatan2\fP (const \fBvec\fP< 3, T, Q > &x, const \fBvec\fP< 3, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBatan2\fP (const \fBvec\fP< 4, T, Q > &x, const \fBvec\fP< 4, T, Q > &y)"
.br
.RI "Arc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBisfinite\fP (genType const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 1, bool, Q > \fBisfinite\fP (const \fBvec\fP< 1, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, bool, Q > \fBisfinite\fP (const \fBvec\fP< 2, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, bool, Q > \fBisfinite\fP (const \fBvec\fP< 3, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, bool, Q > \fBisfinite\fP (const \fBvec\fP< 4, T, Q > &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBisfinite\fP (genType const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 1, bool, Q > \fBisfinite\fP (\fBvec\fP< 1, T, Q > const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, bool, Q > \fBisfinite\fP (\fBvec\fP< 2, T, Q > const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, bool, Q > \fBisfinite\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBisfinite\fP (\fBvec\fP< 4, T, Q > const &x)"
.br
.RI "Test whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) "
.ti -1c
.RI "template<typename floatType , length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, floatType, Q > \fBcompNormalize\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , typename floatType , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBcompScale\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::value_type \fBcompAdd\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::value_type \fBcompMul\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::value_type \fBcompMin\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType::value_type \fBcompMax\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename floatType , length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, floatType, Q > \fBcompNormalize\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , length_t L, typename floatType , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBcompScale\fP (\fBvec\fP< L, floatType, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBcompAdd\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBcompMul\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBcompMin\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBcompMax\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator+\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator\-\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator+\fP (\fBtdualquat\fP< T, Q > const &q, \fBtdualquat\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBtdualquat\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator *\fP (T const &s, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBoperator/\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator==\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBoperator!=\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBdual_quat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBnormalize\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBlerp\fP (\fBtdualquat\fP< T, Q > const &x, \fBtdualquat\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBinverse\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBmat2x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBmat3x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBdualquat_cast\fP (\fBmat\fP< 2, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBtdualquat\fP< T, Q > \fBdualquat_cast\fP (\fBmat\fP< 3, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator+\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator\-\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator+\fP (\fBtdualquat\fP< T, Q > const &q, \fBtdualquat\fP< T, Q > const &p)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &p, \fBtdualquat\fP< T, Q > const &o)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBoperator *\fP (\fBvec\fP< 3, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBoperator *\fP (\fBvec\fP< 4, T, Q > const &v, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator *\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator *\fP (T const &s, \fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBoperator/\fP (\fBtdualquat\fP< T, Q > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator==\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBoperator!=\fP (\fBtdualquat\fP< T, Q > const &q1, \fBtdualquat\fP< T, Q > const &q2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBdual_quat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBnormalize\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBlerp\fP (\fBtdualquat\fP< T, Q > const &x, \fBtdualquat\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBinverse\fP (\fBtdualquat\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBmat2x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBmat3x4_cast\fP (\fBtdualquat\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBdualquat_cast\fP (\fBmat\fP< 2, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBtdualquat\fP< T, Q > \fBdualquat_cast\fP (\fBmat\fP< 3, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBlinearInterpolation\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquadraticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquadraticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquadraticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcubicEaseIn\fP (genType const &a)"
.br
.RI "Modelled after the cubic y = x^3\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcubicEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcubicEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquarticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquarticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquarticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquinticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquinticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBquinticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsineEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsineEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBsineEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcircularEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcircularEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcircularEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBexponentialEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBexponentialEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBexponentialEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBelasticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBelasticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBelasticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseIn\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseOut\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbackEaseInOut\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbounceEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbounceEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBbounceEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlinearInterpolation\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquadraticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquadraticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquadraticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcubicEaseIn\fP (genType const &a)"
.br
.RI "Modelled after the cubic y = x^3\&. "
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcubicEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcubicEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquarticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquarticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquarticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquinticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquinticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBquinticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsineEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsineEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBsineEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcircularEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcircularEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcircularEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBexponentialEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBexponentialEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBexponentialEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBelasticEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBelasticEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBelasticEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseIn\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseOut\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseInOut\fP (genType const &a, genType const &o)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbackEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbounceEaseOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbounceEaseIn\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBbounceEaseInOut\fP (genType const &a)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleX\fP (T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleY\fP (T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZ\fP (T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleX\fP (T const &angleX, T const &angularVelocityX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleY\fP (T const &angleY, T const &angularVelocityY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleZ\fP (T const &angleZ, T const &angularVelocityZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXY\fP (T const &angleX, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYX\fP (T const &angleY, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZ\fP (T const &angleX, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZX\fP (T const &\fBangle\fP, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZ\fP (T const &angleY, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZY\fP (T const &angleZ, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXYZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYXZ\fP (T const &\fByaw\fP, T const &\fBpitch\fP, T const &\fBroll\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXYX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYXY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZYZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZXZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZYX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZXY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 4, 4, T, defaultp > \fByawPitchRoll\fP (T const &\fByaw\fP, T const &\fBpitch\fP, T const &\fBroll\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 2, 2, T, defaultp > \fBorientate2\fP (T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBmat\fP< 3, 3, T, defaultp > \fBorientate3\fP (T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBorientate3\fP (\fBvec\fP< 3, T, Q > const &angles)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBorientate4\fP (\fBvec\fP< 3, T, Q > const &angles)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleXYZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleYXZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleXZX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleXYX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleYXY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleYZY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleZYZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleZXZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleXZY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleYZX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleZYX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBextractEulerAngleZXY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleX\fP (T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleY\fP (T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZ\fP (T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleX\fP (T const &angleX, T const &angularVelocityX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleY\fP (T const &angleY, T const &angularVelocityY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBderivedEulerAngleZ\fP (T const &angleZ, T const &angularVelocityZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXY\fP (T const &angleX, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYX\fP (T const &angleY, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZ\fP (T const &angleX, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZX\fP (T const &angleZ, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZ\fP (T const &angleY, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZY\fP (T const &angleZ, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXYZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYXZ\fP (T const &\fByaw\fP, T const &\fBpitch\fP, T const &\fBroll\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXYX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYXY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZYZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZXZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleXZY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleYZX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZYX\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fBeulerAngleZXY\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, defaultp > \fByawPitchRoll\fP (T const &\fByaw\fP, T const &\fBpitch\fP, T const &\fBroll\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, defaultp > \fBorientate2\fP (T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, defaultp > \fBorientate3\fP (T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBorientate3\fP (\fBvec\fP< 3, T, Q > const &angles)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBorientate4\fP (\fBvec\fP< 3, T, Q > const &angles)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleYXZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleXZX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleXYX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleYXY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleYZY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleZYZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleZXZ\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleXZY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleYZX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleZYX\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER void \fBextractEulerAngleZXY\fP (\fBmat\fP< 4, 4, T, defaultp > const &M, T &t1, T &t2, T &t3)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBextend\fP (genType const &Origin, genType const &Source, typename genType::value_type const Length)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBextend\fP (genType const &Origin, genType const &Source, genType const &Distance)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBextend\fP (\fBvec\fP< 2, T, Q > const &Origin, \fBvec\fP< 2, T, Q > const &Source, T const &Distance)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBextend\fP (\fBvec\fP< 3, T, Q > const &Origin, \fBvec\fP< 3, T, Q > const &Source, T const &Distance)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBextend\fP (\fBvec\fP< 4, T, Q > const &Origin, \fBvec\fP< 4, T, Q > const &Source, T const &Distance)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmin\fP (T const &x, T const &y, T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmin\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmin\fP (C< T > const &x, C< T > const &y, C< T > const &z)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmin\fP (T const &x, T const &y, T const &z, T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmin\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z, typename C< T >::T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmin\fP (C< T > const &x, C< T > const &y, C< T > const &z, C< T > const &w)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmax\fP (T const &x, T const &y, T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmax\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmax\fP (C< T > const &x, C< T > const &y, C< T > const &z)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBmax\fP (T const &x, T const &y, T const &z, T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmax\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z, typename C< T >::T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_DECL C< T > \fBmax\fP (C< T > const &x, C< T > const &y, C< T > const &z, C< T > const &w)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfmin\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfmax\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfclamp\fP (genType x, genType minVal, genType maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfclamp\fP (\fBvec\fP< L, T, Q > const &x, T minVal, T maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfclamp\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &minVal, \fBvec\fP< L, T, Q > const &maxVal)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmin\fP (T const &x, T const &y, T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmin\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmin\fP (C< T > const &x, C< T > const &y, C< T > const &z)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmin\fP (T const &x, T const &y, T const &z, T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmin\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z, typename C< T >::T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmin\fP (C< T > const &x, C< T > const &y, C< T > const &z, C< T > const &w)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmax\fP (T const &x, T const &y, T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmax\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmax\fP (C< T > const &x, C< T > const &y, C< T > const &z)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBmax\fP (T const &x, T const &y, T const &z, T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmax\fP (C< T > const &x, typename C< T >::T const &y, typename C< T >::T const &z, typename C< T >::T const &w)"
.br
.ti -1c
.RI "template<typename T , template< typename > class C> GLM_FUNC_QUALIFIER C< T > \fBmax\fP (C< T > const &x, C< T > const &y, C< T > const &z, C< T > const &w)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfmin\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfmax\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfclamp\fP (genType x, genType minVal, genType maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfclamp\fP (\fBvec\fP< L, T, Q > const &x, T minVal, T maxVal)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfclamp\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &minVal, \fBvec\fP< L, T, Q > const &maxVal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBcross\fP (\fBvec\fP< 2, T, Q > const &v, \fBvec\fP< 2, T, Q > const &u)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBcross\fP (\fBvec\fP< 2, T, Q > const &x, \fBvec\fP< 2, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastPow\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastPow\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genTypeT , typename genTypeU > GLM_FUNC_DECL genTypeT \fBfastPow\fP (genTypeT x, genTypeU y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastPow\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastExp\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastExp\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastLog\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastLog\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastExp2\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastExp2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastLog2\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastLog2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastPow\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastPow\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastPow\fP (T x, int y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastPow\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, int, Q > const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastExp\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastExp\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastLog\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastLog\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastExp2\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastExp2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastLog2\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastLog2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastSqrt\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastSqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastInverseSqrt\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBfastInverseSqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastLength\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBfastLength\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastDistance\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBfastDistance\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfastNormalize\fP (genType const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastSqrt\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastSqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastInverseSqrt\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastInverseSqrt\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastLength\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBfastLength\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastDistance\fP (genType x, genType y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBfastDistance\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfastNormalize\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastNormalize\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBwrapAngle\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastSin\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastCos\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastTan\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastAsin\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastAcos\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastAtan\fP (T y, T x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBfastAtan\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBwrapAngle\fP (T \fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBwrapAngle\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastCos\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastCos\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastSin\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastSin\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastTan\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastTan\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastAsin\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastAsin\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastAcos\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastAcos\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastAtan\fP (T y, T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastAtan\fP (\fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBfastAtan\fP (T x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBfastAtan\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, float, Q > \fBfloatNormalize\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL T \fBgauss\fP (T x, T ExpectedValue, T StandardDeviation)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBgauss\fP (\fBvec\fP< 2, T, Q > const &Coord, \fBvec\fP< 2, T, Q > const &ExpectedValue, \fBvec\fP< 2, T, Q > const &StandardDeviation)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBgauss\fP (T x, T ExpectedValue, T StandardDeviation)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBgauss\fP (\fBvec\fP< 2, T, Q > const &Coord, \fBvec\fP< 2, T, Q > const &ExpectedValue, \fBvec\fP< 2, T, Q > const &StandardDeviation)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBradialGradient\fP (\fBvec\fP< 2, T, Q > const &Center, T const &Radius, \fBvec\fP< 2, T, Q > const &Focal, \fBvec\fP< 2, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBlinearGradient\fP (\fBvec\fP< 2, T, Q > const &Point0, \fBvec\fP< 2, T, Q > const &Point1, \fBvec\fP< 2, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBradialGradient\fP (\fBvec\fP< 2, T, Q > const &Center, T const &Radius, \fBvec\fP< 2, T, Q > const &Focal, \fBvec\fP< 2, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlinearGradient\fP (\fBvec\fP< 2, T, Q > const &Point0, \fBvec\fP< 2, T, Q > const &Point1, \fBvec\fP< 2, T, Q > const &Position)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBrightHanded\fP (\fBvec\fP< 3, T, Q > const &tangent, \fBvec\fP< 3, T, Q > const &binormal, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBleftHanded\fP (\fBvec\fP< 3, T, Q > const &tangent, \fBvec\fP< 3, T, Q > const &binormal, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBrightHanded\fP (\fBvec\fP< 3, T, Q > const &tangent, \fBvec\fP< 3, T, Q > const &binormal, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBleftHanded\fP (\fBvec\fP< 3, T, Q > const &tangent, \fBvec\fP< 3, T, Q > const &binormal, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBpow\fP (int x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBsqrt\fP (int x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL unsigned int \fBfloor_log2\fP (unsigned int x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL int \fBmod\fP (int x, int y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBfactorial\fP (genType const &x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBpow\fP (uint x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBsqrt\fP (uint x)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBmod\fP (uint x, uint y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL uint \fBnlz\fP (uint x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBfactorial\fP (genType const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBfactorial\fP (\fBvec\fP< 2, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBfactorial\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBfactorial\fP (\fBvec\fP< 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBintersectRayPlane\fP (genType const &orig, genType const &dir, genType const &planeOrig, genType const &planeNormal, typename genType::value_type &intersectionDistance)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBintersectRayTriangle\fP (\fBvec\fP< 3, T, Q > const &orig, \fBvec\fP< 3, T, Q > const &dir, \fBvec\fP< 3, T, Q > const &v0, \fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2, \fBvec\fP< 2, T, Q > &baryPosition, T &distance)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBintersectLineTriangle\fP (genType const &orig, genType const &dir, genType const &vert0, genType const &vert1, genType const &vert2, genType &position)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBintersectRaySphere\fP (genType const &rayStarting, genType const &rayNormalizedDirection, genType const &sphereCenter, typename genType::value_type const sphereRadiusSquered, typename genType::value_type &intersectionDistance)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBintersectRaySphere\fP (genType const &rayStarting, genType const &rayNormalizedDirection, genType const &sphereCenter, const typename genType::value_type sphereRadius, genType &intersectionPosition, genType &intersectionNormal)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBintersectLineSphere\fP (genType const &point0, genType const &point1, genType const &sphereCenter, typename genType::value_type sphereRadius, genType &intersectionPosition1, genType &intersectionNormal1, genType &intersectionPosition2=genType(), genType &intersectionNormal2=genType())"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBintersectRayPlane\fP (genType const &orig, genType const &dir, genType const &planeOrig, genType const &planeNormal, typename genType::value_type &intersectionDistance)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBintersectRayTriangle\fP (\fBvec\fP< 3, T, Q > const &orig, \fBvec\fP< 3, T, Q > const &dir, \fBvec\fP< 3, T, Q > const &vert0, \fBvec\fP< 3, T, Q > const &vert1, \fBvec\fP< 3, T, Q > const &vert2, \fBvec\fP< 2, T, Q > &baryPosition, T &distance)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBintersectLineTriangle\fP (genType const &orig, genType const &dir, genType const &vert0, genType const &vert1, genType const &vert2, genType &position)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBintersectRaySphere\fP (genType const &rayStarting, genType const &rayNormalizedDirection, genType const &sphereCenter, const typename genType::value_type sphereRadiusSquered, typename genType::value_type &intersectionDistance)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBintersectRaySphere\fP (genType const &rayStarting, genType const &rayNormalizedDirection, genType const &sphereCenter, const typename genType::value_type sphereRadius, genType &intersectionPosition, genType &intersectionNormal)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER bool \fBintersectLineSphere\fP (genType const &point0, genType const &point1, genType const &sphereCenter, typename genType::value_type sphereRadius, genType &intersectionPoint1, genType &intersectionNormal1, genType &intersectionPoint2, genType &intersectionNormal2)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBqua\fP< T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBvec\fP< 1, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBvec\fP< 2, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBvec\fP< 3, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBvec\fP< 4, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 2, 2, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 2, 3, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 2, 4, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 3, 2, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 3, 3, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 3, 4, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 4, 2, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 4, 3, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, \fBmat\fP< 4, 4, T, Q > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_DECL std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &, std::pair< \fBmat\fP< 4, 4, T, Q > const, \fBmat\fP< 4, 4, T, Q > const > const &)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBqua\fP< T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBvec\fP< 1, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBvec\fP< 2, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBvec\fP< 3, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBvec\fP< 4, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 2, 2, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 2, 3, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 2, 4, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 3, 2, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 3, 3, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 3, 4, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 4, 2, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 4, 3, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, \fBmat\fP< 4, 4, T, Q > const &a)"
.br
.ti -1c
.RI "template<typename CTy , typename CTr , typename T , qualifier Q> GLM_FUNC_QUALIFIER std::basic_ostream< CTy, CTr > & \fBoperator<<\fP (std::basic_ostream< CTy, CTr > &os, std::pair< \fBmat\fP< 4, 4, T, Q > const, \fBmat\fP< 4, 4, T, Q > const > const &a)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBlog\fP (genType const &x, genType const &base)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsign\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &base)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlog\fP (genType const &x, genType const &base)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBlog\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &base)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBmatrixCross3\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBmatrixCross4\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBmatrixCross3\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBmatrixCross4\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBdecompose\fP (\fBmat\fP< 4, 4, T, Q > const &modelMatrix, \fBvec\fP< 3, T, Q > &\fBscale\fP, \fBqua\fP< T, Q > &\fBorientation\fP, \fBvec\fP< 3, T, Q > &translation, \fBvec\fP< 3, T, Q > &skew, \fBvec\fP< 4, T, Q > &\fBperspective\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBdecompose\fP (\fBmat\fP< 4, 4, T, Q > const &ModelMatrix, \fBvec\fP< 3, T, Q > &Scale, \fBqua\fP< T, Q > &Orientation, \fBvec\fP< 3, T, Q > &Translation, \fBvec\fP< 3, T, Q > &Skew, \fBvec\fP< 4, T, Q > &Perspective)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBflipud\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBfliplr\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void \fBqr_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &q, \fBmat\fP< C,(C< R ? C :R), T, Q > &r)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void \fBrq_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &r, \fBmat\fP< C,(C< R ? C :R), T, Q > &q)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBflipud\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< C, R, T, Q > \fBfliplr\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER void \fBqr_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &q, \fBmat\fP< C,(C< R ? C :R), T, Q > &r)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER void \fBrq_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &r, \fBmat\fP< C,(C< R ? C :R), T, Q > &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL void \fBaxisAngle\fP (\fBmat\fP< 4, 4, T, Q > const &Mat, \fBvec\fP< 3, T, Q > &Axis, T &Angle)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBaxisAngleMatrix\fP (\fBvec\fP< 3, T, Q > const &Axis, T const Angle)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBextractMatrixRotation\fP (\fBmat\fP< 4, 4, T, Q > const &Mat)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBinterpolate\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2, T const Delta)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER void \fBaxisAngle\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > &\fBaxis\fP, T &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBaxisAngleMatrix\fP (\fBvec\fP< 3, T, Q > const &\fBaxis\fP, T const \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBextractMatrixRotation\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBinterpolate\fP (\fBmat\fP< 4, 4, T, Q > const &m1, \fBmat\fP< 4, 4, T, Q > const &m2, T const delta)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBrowMajor2\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBrowMajor2\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBrowMajor3\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2, \fBvec\fP< 3, T, Q > const &v3)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBrowMajor3\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBrowMajor4\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2, \fBvec\fP< 4, T, Q > const &v3, \fBvec\fP< 4, T, Q > const &v4)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBrowMajor4\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBcolMajor2\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBcolMajor2\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBcolMajor3\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2, \fBvec\fP< 3, T, Q > const &v3)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBcolMajor3\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBcolMajor4\fP (\fBvec\fP< 4, T, Q > const &v1, \fBvec\fP< 4, T, Q > const &v2, \fBvec\fP< 4, T, Q > const &v3, \fBvec\fP< 4, T, Q > const &v4)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBcolMajor4\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBrowMajor2\fP (\fBvec\fP< 2, T, Q > const &v1, \fBvec\fP< 2, T, Q > const &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBrowMajor2\fP (const \fBmat\fP< 2, 2, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBrowMajor3\fP (const \fBvec\fP< 3, T, Q > &v1, const \fBvec\fP< 3, T, Q > &v2, const \fBvec\fP< 3, T, Q > &v3)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBrowMajor3\fP (const \fBmat\fP< 3, 3, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrowMajor4\fP (const \fBvec\fP< 4, T, Q > &v1, const \fBvec\fP< 4, T, Q > &v2, const \fBvec\fP< 4, T, Q > &v3, const \fBvec\fP< 4, T, Q > &v4)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrowMajor4\fP (const \fBmat\fP< 4, 4, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBcolMajor2\fP (const \fBvec\fP< 2, T, Q > &v1, const \fBvec\fP< 2, T, Q > &v2)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBcolMajor2\fP (const \fBmat\fP< 2, 2, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBcolMajor3\fP (const \fBvec\fP< 3, T, Q > &v1, const \fBvec\fP< 3, T, Q > &v2, const \fBvec\fP< 3, T, Q > &v3)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBcolMajor3\fP (const \fBmat\fP< 3, 3, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBcolMajor4\fP (const \fBvec\fP< 4, T, Q > &v1, const \fBvec\fP< 4, T, Q > &v2, const \fBvec\fP< 4, T, Q > &v3, const \fBvec\fP< 4, T, Q > &v4)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBcolMajor4\fP (const \fBmat\fP< 4, 4, T, Q > &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBdiagonal2x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 3, T, Q > \fBdiagonal2x3\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 4, T, Q > \fBdiagonal2x4\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 2, T, Q > \fBdiagonal3x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBdiagonal3x3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 4, T, Q > \fBdiagonal3x4\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 2, T, Q > \fBdiagonal4x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 3, T, Q > \fBdiagonal4x3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBdiagonal4x4\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 2, 2, T, Q > \fBadjugate\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBadjugate\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBadjugate\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBdiagonal2x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 3, T, Q > \fBdiagonal2x3\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 4, T, Q > \fBdiagonal2x4\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 2, T, Q > \fBdiagonal3x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBdiagonal3x3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 4, T, Q > \fBdiagonal3x4\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBdiagonal4x4\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 3, T, Q > \fBdiagonal4x3\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 2, T, Q > \fBdiagonal4x2\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 2, 2, T, Q > \fBadjugate\fP (\fBmat\fP< 2, 2, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBadjugate\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBadjugate\fP (\fBmat\fP< 4, 4, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNull\fP (\fBmat\fP< 2, 2, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNull\fP (\fBmat\fP< 3, 3, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNull\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q, template< length_t, length_t, typename, qualifier > class matType> GLM_FUNC_DECL bool \fBisIdentity\fP (matType< C, R, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNormalized\fP (\fBmat\fP< 2, 2, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNormalized\fP (\fBmat\fP< 3, 3, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNormalized\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q, template< length_t, length_t, typename, qualifier > class matType> GLM_FUNC_DECL bool \fBisOrthogonal\fP (matType< C, R, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNull\fP (\fBmat\fP< 2, 2, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNull\fP (\fBmat\fP< 3, 3, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNull\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisIdentity\fP (\fBmat\fP< C, R, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNormalized\fP (\fBmat\fP< 2, 2, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNormalized\fP (\fBmat\fP< 3, 3, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNormalized\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisOrthogonal\fP (\fBmat\fP< C, R, T, Q > const &m, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBtranslate\fP (\fBmat\fP< 3, 3, T, Q > const &m, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBrotate\fP (\fBmat\fP< 3, 3, T, Q > const &m, T \fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBscale\fP (\fBmat\fP< 3, 3, T, Q > const &m, \fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBshearX\fP (\fBmat\fP< 3, 3, T, Q > const &m, T y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBshearY\fP (\fBmat\fP< 3, 3, T, Q > const &m, T x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBmixedProduct\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2, \fBvec\fP< 3, T, Q > const &v3)"
.br
.RI "Mixed product of 3 vectors (from GLM_GTX_mixed_product extension) "
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBmixedProduct\fP (\fBvec\fP< 3, T, Q > const &v1, \fBvec\fP< 3, T, Q > const &v2, \fBvec\fP< 3, T, Q > const &v3)"
.br
.RI "Mixed product of 3 vectors (from GLM_GTX_mixed_product extension) "
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBlength2\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBdistance2\fP (\fBvec\fP< L, T, Q > const &p0, \fBvec\fP< L, T, Q > const &p1)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBl1Norm\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBl1Norm\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBl2Norm\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBl2Norm\fP (\fBvec\fP< 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBlxNorm\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, unsigned int Depth)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBlxNorm\fP (\fBvec\fP< 3, T, Q > const &x, unsigned int Depth)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBlength2\fP (genType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlength2\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBdistance2\fP (T p0, T p1)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBdistance2\fP (\fBvec\fP< L, T, Q > const &p0, \fBvec\fP< L, T, Q > const &p1)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBl1Norm\fP (\fBvec\fP< 3, T, Q > const &a, \fBvec\fP< 3, T, Q > const &b)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBl1Norm\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBl2Norm\fP (\fBvec\fP< 3, T, Q > const &a, \fBvec\fP< 3, T, Q > const &b)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBl2Norm\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlxNorm\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, unsigned int Depth)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlxNorm\fP (\fBvec\fP< 3, T, Q > const &v, unsigned int Depth)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBtriangleNormal\fP (\fBvec\fP< 3, T, Q > const &p1, \fBvec\fP< 3, T, Q > const &p2, \fBvec\fP< 3, T, Q > const &p3)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBtriangleNormal\fP (\fBvec\fP< 3, T, Q > const &p1, \fBvec\fP< 3, T, Q > const &p2, \fBvec\fP< 3, T, Q > const &p3)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBnormalizeDot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBfastNormalizeDot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBnormalizeDot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBfastNormalizeDot\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpow2\fP (genType const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpow3\fP (genType const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBpow4\fP (genType const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBorthonormalize\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBorthonormalize\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBorthonormalize\fP (\fBmat\fP< 3, 3, T, Q > const &m)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBorthonormalize\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBperp\fP (genType const &x, genType const &Normal)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBperp\fP (genType const &x, genType const &Normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBpolar\fP (\fBvec\fP< 3, T, Q > const &\fBeuclidean\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBeuclidean\fP (\fBvec\fP< 2, T, Q > const &\fBpolar\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBpolar\fP (\fBvec\fP< 3, T, Q > const &\fBeuclidean\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBeuclidean\fP (\fBvec\fP< 2, T, Q > const &\fBpolar\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBproj\fP (genType const &x, genType const &Normal)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBproj\fP (genType const &x, genType const &Normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBquat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBcross\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBcross\fP (\fBvec\fP< 3, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBsquad\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2, \fBqua\fP< T, Q > const &s1, \fBqua\fP< T, Q > const &s2, T const &h)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBintermediate\fP (\fBqua\fP< T, Q > const &prev, \fBqua\fP< T, Q > const &curr, \fBqua\fP< T, Q > const &next)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBextractRealComponent\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBtoMat3\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBtoMat4\fP (\fBqua\fP< T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBtoQuat\fP (\fBmat\fP< 3, 3, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBtoQuat\fP (\fBmat\fP< 4, 4, T, Q > const &x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBshortMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBfastMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBrotation\fP (\fBvec\fP< 3, T, Q > const &orig, \fBvec\fP< 3, T, Q > const &dest)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBlength2\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBquat_identity\fP ()"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBcross\fP (\fBvec\fP< 3, T, Q > const &v, \fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBcross\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBsquad\fP (\fBqua\fP< T, Q > const &q1, \fBqua\fP< T, Q > const &q2, \fBqua\fP< T, Q > const &s1, \fBqua\fP< T, Q > const &s2, T const &h)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBintermediate\fP (\fBqua\fP< T, Q > const &prev, \fBqua\fP< T, Q > const &curr, \fBqua\fP< T, Q > const &next)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBrotate\fP (\fBqua\fP< T, Q > const &q, \fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBextractRealComponent\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBlength2\fP (\fBqua\fP< T, Q > const &q)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBshortMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBfastMix\fP (\fBqua\fP< T, Q > const &x, \fBqua\fP< T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBrotation\fP (\fBvec\fP< 3, T, Q > const &orig, \fBvec\fP< 3, T, Q > const &dest)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> length_t \fBcomponents\fP (\fBvec\fP< 1, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> length_t \fBcomponents\fP (\fBvec\fP< 2, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> length_t \fBcomponents\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> length_t \fBcomponents\fP (\fBvec\fP< 4, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > length_t \fBcomponents\fP (genType const &m)"
.br
.ti -1c
.RI "template<typename genType > genType::value_type const  * \fBbegin\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename genType > genType::value_type const  * \fBend\fP (genType const &v)"
.br
.ti -1c
.RI "template<typename genType > genType::value_type * \fBbegin\fP (genType &v)"
.br
.ti -1c
.RI "template<typename genType > genType::value_type * \fBend\fP (genType &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBrotateNormalizedAxis\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBqua\fP< T, Q > \fBrotateNormalizedAxis\fP (\fBqua\fP< T, Q > const &q, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrotateNormalizedAxis\fP (\fBmat\fP< 4, 4, T, Q > const &m, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBqua\fP< T, Q > \fBrotateNormalizedAxis\fP (\fBqua\fP< T, Q > const &q, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBslerp\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 2, T, Q > \fBrotate\fP (\fBvec\fP< 2, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrotate\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBrotate\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrotateX\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrotateY\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 3, T, Q > \fBrotateZ\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBrotateX\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBrotateY\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< 4, T, Q > \fBrotateZ\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBorientation\fP (\fBvec\fP< 3, T, Q > const &Normal, \fBvec\fP< 3, T, Q > const &Up)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBslerp\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, T, Q > \fBrotate\fP (\fBvec\fP< 2, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrotate\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBrotate\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrotateX\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrotateY\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, T, Q > \fBrotateZ\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBrotateX\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBrotateY\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, T, Q > \fBrotateZ\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBangle\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBorientation\fP (\fBvec\fP< 3, T, Q > const &Normal, \fBvec\fP< 3, T, Q > const &Up)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBlessThan\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBlessThanEqual\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBgreaterThan\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBgreaterThanEqual\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBequal\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER bool \fBnotEqual\fP (T const &x, T const &y)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER bool \fBany\fP (bool const &x)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER bool \fBall\fP (bool const &x)"
.br
.ti -1c
.RI "GLM_FUNC_QUALIFIER bool \fBnot_\fP (bool const &x)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcatmullRom\fP (genType const &v1, genType const &v2, genType const &v3, genType const &v4, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBhermite\fP (genType const &v1, genType const &t1, genType const &v2, genType const &t2, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBcubic\fP (genType const &v1, genType const &v2, genType const &v3, genType const &v4, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcatmullRom\fP (genType const &v1, genType const &v2, genType const &v3, genType const &v4, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBhermite\fP (genType const &v1, genType const &t1, genType const &v2, genType const &t2, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBcubic\fP (genType const &v1, genType const &v2, genType const &v3, genType const &v4, typename genType::value_type const &s)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL std::string \fBto_string\fP (genType const &x)"
.br
.ti -1c
.RI "template<class matType > GLM_FUNC_QUALIFIER std::string \fBto_string\fP (matType const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> T \fBlevels\fP (\fBvec\fP< L, T, Q > const &Extent)"
.br
.ti -1c
.RI "template<typename T > T \fBlevels\fP (T Extent)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBtranslate\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBrotate\fP (T \fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBscale\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBtranslate\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBrotate\fP (T \fBangle\fP, \fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBscale\fP (\fBvec\fP< 3, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBshearX2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, T y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBshearY2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, T x)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBshearX3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T y, T z)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBshearY3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T x, T z)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBshearZ3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T x, T y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 3, 3, T, Q > \fBproj2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBproj3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBscaleBias\fP (T \fBscale\fP, T bias)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< 4, 4, T, Q > \fBscaleBias\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBscale\fP, T bias)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBshearX2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, T s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBshearY2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, T s)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBshearX3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T s, T t)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBshearY3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T s, T t)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBshearZ3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, T s, T t)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBreflect2D\fP (\fBmat\fP< 3, 3, T, Q > const &m, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBreflect3D\fP (\fBmat\fP< 4, 4, T, Q > const &m, \fBvec\fP< 3, T, Q > const &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 3, 3, T, Q > \fBproj2D\fP (const \fBmat\fP< 3, 3, T, Q > &m, const \fBvec\fP< 3, T, Q > &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBproj3D\fP (const \fBmat\fP< 4, 4, T, Q > &m, const \fBvec\fP< 3, T, Q > &normal)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBscaleBias\fP (T \fBscale\fP, T bias)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBmat\fP< 4, 4, T, Q > \fBscaleBias\fP (\fBmat\fP< 4, 4, T, Q > const &m, T \fBscale\fP, T bias)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int8\fP, aligned_lowp_int8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int16\fP, aligned_lowp_int16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int32\fP, aligned_lowp_int32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int64\fP, aligned_lowp_int64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int8_t\fP, aligned_lowp_int8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int16_t\fP, aligned_lowp_int16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int32_t\fP, aligned_lowp_int32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_int64_t\fP, aligned_lowp_int64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_i8\fP, aligned_lowp_i8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_i16\fP, aligned_lowp_i16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_i32\fP, aligned_lowp_i32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_i64\fP, aligned_lowp_i64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int8\fP, aligned_mediump_int8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int16\fP, aligned_mediump_int16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int32\fP, aligned_mediump_int32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int64\fP, aligned_mediump_int64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int8_t\fP, aligned_mediump_int8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int16_t\fP, aligned_mediump_int16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int32_t\fP, aligned_mediump_int32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_int64_t\fP, aligned_mediump_int64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_i8\fP, aligned_mediump_i8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_i16\fP, aligned_mediump_i16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_i32\fP, aligned_mediump_i32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_i64\fP, aligned_mediump_i64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int8\fP, aligned_highp_int8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int16\fP, aligned_highp_int16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int32\fP, aligned_highp_int32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int64\fP, aligned_highp_int64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int8_t\fP, aligned_highp_int8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int16_t\fP, aligned_highp_int16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int32_t\fP, aligned_highp_int32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_int64_t\fP, aligned_highp_int64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_i8\fP, aligned_highp_i8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_i16\fP, aligned_highp_i16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_i32\fP, aligned_highp_i32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_i64\fP, aligned_highp_i64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint8\fP, aligned_int8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint16\fP, aligned_int16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint32\fP, aligned_int32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint64\fP, aligned_int64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint8_t\fP, aligned_int8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint16_t\fP, aligned_int16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint32_t\fP, aligned_int32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBint64_t\fP, aligned_int64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi8\fP, aligned_i8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi16\fP, aligned_i16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi32\fP, aligned_i32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi64\fP, aligned_i64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBivec1\fP, \fBaligned_ivec1\fP, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBivec2\fP, \fBaligned_ivec2\fP, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBivec3\fP, \fBaligned_ivec3\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBivec4\fP, \fBaligned_ivec4\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi8vec1\fP, aligned_i8vec1, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi8vec2\fP, aligned_i8vec2, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi8vec3\fP, aligned_i8vec3, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi8vec4\fP, aligned_i8vec4, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi16vec1\fP, aligned_i16vec1, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi16vec2\fP, aligned_i16vec2, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi16vec3\fP, aligned_i16vec3, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi16vec4\fP, aligned_i16vec4, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi32vec1\fP, aligned_i32vec1, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi32vec2\fP, aligned_i32vec2, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi32vec3\fP, aligned_i32vec3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi32vec4\fP, aligned_i32vec4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi64vec1\fP, aligned_i64vec1, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi64vec2\fP, aligned_i64vec2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi64vec3\fP, aligned_i64vec3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBi64vec4\fP, aligned_i64vec4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint8\fP, aligned_lowp_uint8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint16\fP, aligned_lowp_uint16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint32\fP, aligned_lowp_uint32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint64\fP, aligned_lowp_uint64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint8_t\fP, aligned_lowp_uint8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint16_t\fP, aligned_lowp_uint16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint32_t\fP, aligned_lowp_uint32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_uint64_t\fP, aligned_lowp_uint64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_u8\fP, aligned_lowp_u8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_u16\fP, aligned_lowp_u16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_u32\fP, aligned_lowp_u32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBlowp_u64\fP, aligned_lowp_u64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint8\fP, aligned_mediump_uint8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint16\fP, aligned_mediump_uint16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint32\fP, aligned_mediump_uint32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint64\fP, aligned_mediump_uint64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint8_t\fP, aligned_mediump_uint8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint16_t\fP, aligned_mediump_uint16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint32_t\fP, aligned_mediump_uint32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_uint64_t\fP, aligned_mediump_uint64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_u8\fP, aligned_mediump_u8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_u16\fP, aligned_mediump_u16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_u32\fP, aligned_mediump_u32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmediump_u64\fP, aligned_mediump_u64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint8\fP, aligned_highp_uint8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint16\fP, aligned_highp_uint16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint32\fP, aligned_highp_uint32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint64\fP, aligned_highp_uint64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint8_t\fP, aligned_highp_uint8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint16_t\fP, aligned_highp_uint16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint32_t\fP, aligned_highp_uint32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_uint64_t\fP, aligned_highp_uint64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_u8\fP, aligned_highp_u8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_u16\fP, aligned_highp_u16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_u32\fP, aligned_highp_u32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBhighp_u64\fP, aligned_highp_u64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint8\fP, aligned_uint8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint16\fP, aligned_uint16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint32\fP, aligned_uint32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint64\fP, aligned_uint64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint8_t\fP, aligned_uint8_t, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint16_t\fP, aligned_uint16_t, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint32_t\fP, aligned_uint32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuint64_t\fP, aligned_uint64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu8\fP, aligned_u8, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu16\fP, aligned_u16, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu32\fP, aligned_u32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu64\fP, aligned_u64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuvec1\fP, \fBaligned_uvec1\fP, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuvec2\fP, \fBaligned_uvec2\fP, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuvec3\fP, \fBaligned_uvec3\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBuvec4\fP, \fBaligned_uvec4\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu8vec1\fP, aligned_u8vec1, 1)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu8vec2\fP, aligned_u8vec2, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu8vec3\fP, aligned_u8vec3, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu8vec4\fP, aligned_u8vec4, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu16vec1\fP, aligned_u16vec1, 2)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu16vec2\fP, aligned_u16vec2, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu16vec3\fP, aligned_u16vec3, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu16vec4\fP, aligned_u16vec4, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu32vec1\fP, aligned_u32vec1, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu32vec2\fP, aligned_u32vec2, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu32vec3\fP, aligned_u32vec3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu32vec4\fP, aligned_u32vec4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu64vec1\fP, aligned_u64vec1, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu64vec2\fP, aligned_u64vec2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu64vec3\fP, aligned_u64vec3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBu64vec4\fP, aligned_u64vec4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat32\fP, aligned_float32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat32_t\fP, aligned_float32_t, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat32\fP, aligned_f32, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat64\fP, aligned_float64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat64_t\fP, aligned_float64_t, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfloat64\fP, aligned_f64, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBvec1\fP, \fBaligned_vec1\fP, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBvec2\fP, \fBaligned_vec2\fP, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBvec3\fP, \fBaligned_vec3\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBvec4\fP, \fBaligned_vec4\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfvec1\fP, aligned_fvec1, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfvec2\fP, aligned_fvec2, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfvec3\fP, aligned_fvec3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfvec4\fP, aligned_fvec4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32vec1\fP, aligned_f32vec1, 4)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32vec2\fP, aligned_f32vec2, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32vec3\fP, aligned_f32vec3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32vec4\fP, aligned_f32vec4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBdvec1\fP, \fBaligned_dvec1\fP, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBdvec2\fP, \fBaligned_dvec2\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBdvec3\fP, \fBaligned_dvec3\fP, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBdvec4\fP, \fBaligned_dvec4\fP, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64vec1\fP, aligned_f64vec1, 8)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64vec2\fP, aligned_f64vec2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64vec3\fP, aligned_f64vec3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64vec4\fP, aligned_f64vec4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmat2\fP, \fBaligned_mat2\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmat3\fP, \fBaligned_mat3\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBmat4\fP, \fBaligned_mat4\fP, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat2x2\fP, aligned_fmat2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat3x3\fP, aligned_fmat3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat4x4\fP, aligned_fmat4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat2x2\fP, aligned_fmat2x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat2x3\fP, aligned_fmat2x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat2x4\fP, aligned_fmat2x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat3x2\fP, aligned_fmat3x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat3x3\fP, aligned_fmat3x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat3x4\fP, aligned_fmat3x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat4x2\fP, aligned_fmat4x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat4x3\fP, aligned_fmat4x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBfmat4x4\fP, aligned_fmat4x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat2x2\fP, aligned_f32mat2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat3x3\fP, aligned_f32mat3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat4x4\fP, aligned_f32mat4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat2x2\fP, aligned_f32mat2x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat2x3\fP, aligned_f32mat2x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat2x4\fP, aligned_f32mat2x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat3x2\fP, aligned_f32mat3x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat3x3\fP, aligned_f32mat3x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat3x4\fP, aligned_f32mat3x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat4x2\fP, aligned_f32mat4x2, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat4x3\fP, aligned_f32mat4x3, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32mat4x4\fP, aligned_f32mat4x4, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat2x2\fP, aligned_f64mat2, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat3x3\fP, aligned_f64mat3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat4x4\fP, aligned_f64mat4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat2x2\fP, aligned_f64mat2x2, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat2x3\fP, aligned_f64mat2x3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat2x4\fP, aligned_f64mat2x4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat3x2\fP, aligned_f64mat3x2, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat3x3\fP, aligned_f64mat3x3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat3x4\fP, aligned_f64mat3x4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat4x2\fP, aligned_f64mat4x2, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat4x3\fP, aligned_f64mat4x3, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64mat4x4\fP, aligned_f64mat4x4, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBquat\fP, aligned_quat, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBquat\fP, aligned_fquat, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBdquat\fP, aligned_dquat, 32)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf32quat\fP, aligned_f32quat, 16)"
.br
.ti -1c
.RI "\fBGLM_ALIGNED_TYPEDEF\fP (\fBf64quat\fP, aligned_f64quat, 32)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxx\fP (const \fBglm::vec\fP< 1, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fByw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 2, T, Q > \fBww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxx\fP (const \fBglm::vec\fP< 1, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBxww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBywx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBywy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBywz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fByww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBzww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 3, T, Q > \fBwww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxx\fP (const \fBglm::vec\fP< 1, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxxww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxywx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxywy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxywz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxyww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxzww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBxwww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByxww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyx\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyy\fP (const \fBglm::vec\fP< 2, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByywx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByywy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByywz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByyww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fByzww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBywww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzxww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzywx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzywy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzywz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzyww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzx\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzy\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzz\fP (const \fBglm::vec\fP< 3, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzzww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBzwww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwxww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwywx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwywy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwywz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwyww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwzww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwxx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwxy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwxz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwxw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwyx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwyy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwyz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwyw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwzx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwzy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwzz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwzw\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwwx\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwwy\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwwz\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_INLINE \fBglm::vec\fP< 4, T, Q > \fBwwww\fP (const \fBglm::vec\fP< 4, T, Q > &v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL T \fBangle\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBorientedAngle\fP (\fBvec\fP< 2, T, Q > const &x, \fBvec\fP< 2, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_DECL T \fBorientedAngle\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, \fBvec\fP< 3, T, Q > const &ref)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBangle\fP (genType const &x, genType const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBangle\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBorientedAngle\fP (\fBvec\fP< 2, T, Q > const &x, \fBvec\fP< 2, T, Q > const &y)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER T \fBorientedAngle\fP (\fBvec\fP< 3, T, Q > const &x, \fBvec\fP< 3, T, Q > const &y, \fBvec\fP< 3, T, Q > const &ref)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL bool \fBareCollinear\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL bool \fBareOrthogonal\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNormalized\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL bool \fBisNull\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, bool, Q > \fBisCompNull\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL bool \fBareOrthonormal\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBareCollinear\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBareOrthogonal\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNormalized\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBisNull\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, bool, Q > \fBisCompNull\fP (\fBvec\fP< L, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 2, bool, Q > \fBisCompNull\fP (\fBvec\fP< 2, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 3, bool, Q > \fBisCompNull\fP (\fBvec\fP< 3, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< 4, bool, Q > \fBisCompNull\fP (\fBvec\fP< 4, T, Q > const &v, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER bool \fBareOrthonormal\fP (\fBvec\fP< L, T, Q > const &v0, \fBvec\fP< L, T, Q > const &v1, T const &\fBepsilon\fP)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBclamp\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBrepeat\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBmirrorClamp\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBmirrorRepeat\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBclamp\fP (\fBvec\fP< L, T, Q > const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBclamp\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBrepeat\fP (\fBvec\fP< L, T, Q > const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBrepeat\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmirrorClamp\fP (\fBvec\fP< L, T, Q > const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBmirrorClamp\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP< L, T, Q > \fBmirrorRepeat\fP (\fBvec\fP< L, T, Q > const &Texcoord)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_QUALIFIER genType \fBmirrorRepeat\fP (genType const &Texcoord)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uint, Q > \fBuaddCarry\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &carry)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, uint, Q > \fBusubBorrow\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &borrow)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL void \fBumulExtended\fP (\fBvec\fP< L, uint, Q > const &x, \fBvec\fP< L, uint, Q > const &y, \fBvec\fP< L, uint, Q > &msb, \fBvec\fP< L, uint, Q > &lsb)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL void \fBimulExtended\fP (\fBvec\fP< L, int, Q > const &x, \fBvec\fP< L, int, Q > const &y, \fBvec\fP< L, int, Q > &msb, \fBvec\fP< L, int, Q > &lsb)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldExtract\fP (\fBvec\fP< L, T, Q > const &Value, int Offset, int Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldInsert\fP (\fBvec\fP< L, T, Q > const &Base, \fBvec\fP< L, T, Q > const &Insert, int Offset, int Bits)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBbitfieldReverse\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL int \fBbitCount\fP (genType v)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBbitCount\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL int \fBfindLSB\fP (genIUType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfindLSB\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL int \fBfindMSB\fP (genIUType x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, int, Q > \fBfindMSB\fP (\fBvec\fP< L, T, Q > const &v)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBmatrixCompMult\fP (\fBmat\fP< C, R, T, Q > const &x, \fBmat\fP< C, R, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBdetail::outerProduct_trait\fP< C, R, T, Q >::\fBtype\fP \fBouterProduct\fP (\fBvec\fP< C, T, Q > const &c, \fBvec\fP< R, T, Q > const &r)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q >::transpose_type \fBtranspose\fP (\fBmat\fP< C, R, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL T \fBdeterminant\fP (\fBmat\fP< C, R, T, Q > const &m)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBinverse\fP (\fBmat\fP< C, R, T, Q > const &m)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBradians\fP (\fBvec\fP< L, T, Q > const &degrees)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, T, Q > \fBdegrees\fP (\fBvec\fP< L, T, Q > const &radians)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsin\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBcos\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBtan\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBasin\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBacos\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBatan\fP (\fBvec\fP< L, T, Q > const &y, \fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBatan\fP (\fBvec\fP< L, T, Q > const &y_over_x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBsinh\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBcosh\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBtanh\fP (\fBvec\fP< L, T, Q > const &\fBangle\fP)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBasinh\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBacosh\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP< L, T, Q > \fBatanh\fP (\fBvec\fP< L, T, Q > const &x)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBlessThan\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBlessThanEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBgreaterThan\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBgreaterThanEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBequal\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnotEqual\fP (\fBvec\fP< L, T, Q > const &x, \fBvec\fP< L, T, Q > const &y)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBany\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR bool \fBall\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.ti -1c
.RI "template<length_t L, qualifier Q> GLM_FUNC_DECL GLM_CONSTEXPR \fBvec\fP< L, bool, Q > \fBnot_\fP (\fBvec\fP< L, bool, Q > const &v)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBCore features\fP 

\fBGLM_GTX_wrap\fP
.PP
\fBGLM_GTX_vector_query\fP
.PP
\fBGLM_GTX_vector_angle\fP
.PP
\fBGLM_GTX_type_trait\fP
.PP
\fBGLM_GTC_type_aligned\fP
.PP
\fBGLM_GTX_transform2\fP
.PP
\fBGLM_GTX_transform\fP
.PP
\fBGLM_GTX_texture\fP
.PP
\fBGLM_GTX_string_cast\fP
.PP
\fBGLM_GTX_std_based_type\fP
.PP
\fBGLM_GTX_spline\fP
.PP
\fBGLM_GTX_scalar_relational\fP
.PP
\fBGLM_GTX_rotate_vector\fP
.PP
\fBGLM_GTX_rotate_normalized_axis\fP
.PP
\fBGLM_GTX_quaternion\fP
.PP
\fBGLM_GTX_projection\fP
.PP
\fBGLM_GTX_polar_coordinates\fP
.PP
\fBGLM_GTX_perpendicular\fP
.PP
\fBGLM_GTX_orthonormalize\fP
.PP
\fBGLM_GTX_optimum_pow\fP
.PP
\fBGLM_GTX_number_precision\fP
.PP
\fBGLM_GTX_normalize_dot\fP
.PP
\fBGLM_GTX_normal\fP
.PP
\fBGLM_GTX_norm\fP
.PP
\fBGLM_GTX_mixed_producte\fP
.PP
\fBGLM_GTX_matrix_query\fP
.PP
\fBGLM_GTX_matrix_operation\fP
.PP
\fBGLM_GTX_matrix_major_storage\fP
.PP
\fBGLM_GTX_matrix_interpolation\fP
.PP
\fBGLM_GTX_matrix_factorisation\fP
.PP
\fBGLM_GTX_matrix_decompose\fP
.PP
\fBGLM_GTX_matrix_cross_product\fP
.PP
\fBGLM_GTX_log_base\fP
.PP
\fBGLM_GTX_intersect\fP
.PP
\fBGLM_GTX_integer\fP
.PP
\fBGLM_GTX_handed_coordinate_space\fP
.PP
\fBGLM_GTX_gradient_paint\fP
.PP
\fBGLM_GTX_functions\fP
.PP
\fBgtx_float_normalize\fP
.PP
\fBGLM_GTX_fast_trigonometry\fP
.PP
\fBGLM_GTX_fast_square_root\fP
.PP
\fBGLM_GTX_fast_exponential\fP
.PP
\fBGLM_GTX_exterior_product\fP
.PP
\fBGLM_GTX_extented_min_max\fP
.PP
\fBGLM_GTX_extend\fP
.PP
\fBGLM_GTX_euler_angles\fP
.PP
\fBGLM_GTX_easing\fP
.PP
\fBGLM_GTX_dual_quaternion\fP
.PP
\fBGLM_GTX_component_wise\fP
.PP
\fBGLM_GTX_common\fP
.PP
\fBGLM_GTX_color_space_YCoCg\fP
.PP
\fBGLM_GTX_color_space\fP
.PP
\fBGLM_GTX_color_encoding\fP
.PP
\fBGLM_GTX_closest_point\fP
.PP
\fBGLM_GTX_bit\fP
.PP
\fBGLM_GTX_associated_min_max\fP
.PP
\fBGLM_GTC_ulp\fP
.PP
\fBGLM_GTC_type_ptr\fP
.PP
\fBgtc_precision\fP
.PP
\fBGLM_EXT_scalar_integer\fP
.PP
\fBGLM_GTC_reciprocal\fP
.PP
\fBGLM_GTC_packing\fP
.PP
\fBGLM_GTC_matrix_inverse\fP
.PP
\fBGLM_GTC_matrix_access\fP
.PP
\fBGLM_GTC_integer\fP
.PP
\fBGLM_GTC_epsilon\fP
.PP
\fBGLM_GTC_constants\fP
.PP
\fBGLM_GTC_color_space\fP
.PP
\fBGLM_GTC_bitfield\fP
.PP
\fBGLM_GTC_noise\fP
.PP
\fBGLM_GTX_io\fP 
.PP
\fBAuthor:\fP
.RS 4
Jan P Springer (regnirpsj@gmail.com)
.RE
.PP
\fBGLM_GTX_matrix_transform_2d\fP 
.PP
\fBAuthor:\fP
.RS 4
Miguel Ángel Pérez Martínez 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBglm::qualifier\fP"

.PP
Qualify GLM types in term of alignment (packed, aligned) and precision in term of ULPs (lowp, mediump, highp) 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIpacked_highp \fP\fP
Typed data is tightly packed in memory and operations are executed with high precision in term of ULPs\&. 
.TP
\fB\fIpacked_mediump \fP\fP
Typed data is tightly packed in memory and operations are executed with medium precision in term of ULPs for higher performance\&. 
.TP
\fB\fIpacked_lowp \fP\fP
Typed data is tightly packed in memory and operations are executed with low precision in term of ULPs to maximize performance\&. 
.TP
\fB\fIhighp \fP\fP
By default highp qualifier is also packed\&. 
.TP
\fB\fImediump \fP\fP
By default mediump qualifier is also packed\&. 
.TP
\fB\fIlowp \fP\fP
By default lowp qualifier is also packed\&. 
.TP
\fB\fIpacked \fP\fP
By default packed qualifier is also high precision\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool glm::equal (genType const & x, genType const & y, genType const & epsilon)"
Returns the component-wise comparison of |x - y| < epsilon\&. True if this expression is satisfied\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool glm::equal (genType const & x, genType const & y, int ULPs)"
Returns the component-wise comparison between two scalars in term of ULPs\&. True if this expression is satisfied\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP First operand\&. 
.br
\fIy\fP Second operand\&. 
.br
\fIULPs\fP Maximum difference in ULPs between the two operators to consider them equal\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool glm::equal (genType const & x, genType const & y, genType const & epsilon)"
Returns the component-wise comparison of |x - y| < epsilon\&. True if this expression is satisfied\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool glm::equal (genType const & x, genType const & y, int ULPs)"
Returns the component-wise comparison between two scalars in term of ULPs\&. True if this expression is satisfied\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP First operand\&. 
.br
\fIy\fP Second operand\&. 
.br
\fIULPs\fP Maximum difference in ULPs between the two operators to consider them equal\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER int glm::float_distance (float x, float y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::float_distance (double x, double y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, int, Q> glm::float_distance (\fBvec\fP< L, float, Q > const & x, \fBvec\fP< L, float, Q > const & y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, \fBint64\fP, Q> glm::float_distance (\fBvec\fP< L, double, Q > const & x, \fBvec\fP< L, double, Q > const & y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, int, Q> glm::float_distance (\fBvec\fP< L, float, Q > const & x, \fBvec\fP< L, float, Q > const & y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, \fBint64\fP, Q> glm::float_distance (\fBvec\fP< L, double, Q > const & x, \fBvec\fP< L, double, Q > const & y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, int, Q> glm::floatDistance (\fBvec\fP< L, float, Q > const & x, \fBvec\fP< L, float, Q > const & y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER int glm::floatDistance (float x, float y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, \fBint64\fP, Q> glm::floatDistance (\fBvec\fP< L, double, Q > const & x, \fBvec\fP< L, double, Q > const & y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::floatDistance (double x, double y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, int, Q> glm::floatDistance (\fBvec\fP< L, float, Q > const & x, \fBvec\fP< L, float, Q > const & y)"
Return the distance in the number of ULP between 2 single-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, \fBint64\fP, Q> glm::floatDistance (\fBvec\fP< L, double, Q > const & x, \fBvec\fP< L, double, Q > const & y)"
Return the distance in the number of ULP between 2 double-precision floating-point scalars\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::next_float (genType x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::next_float (genType x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::next_float (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::nextFloat (genType x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x)"
Return the next ULP value(s) after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::nextFloat (genType x, int ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::nextFloat (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance after the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool glm::notEqual (genType const & x, genType const & y, genType const & epsilon)"
Returns the component-wise comparison of |x - y| >= epsilon\&. True if this expression is not satisfied\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool glm::notEqual (genType const & x, genType const & y, genType const & epsilon)"
Returns the component-wise comparison of |x - y| >= epsilon\&. True if this expression is not satisfied\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool glm::notEqual (genType const & x, genType const & y, int ULPs)"
Returns the component-wise comparison between two scalars in term of ULPs\&. True if this expression is not satisfied\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP First operand\&. 
.br
\fIy\fP Second operand\&. 
.br
\fIULPs\fP Maximum difference in ULPs between the two operators to consider them not equal\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL GLM_CONSTEXPR bool glm::notEqual (genType const & x, genType const & y, int ULPs)"
Returns the component-wise comparison between two scalars in term of ULPs\&. True if this expression is not satisfied\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP First operand\&. 
.br
\fIy\fP Second operand\&. 
.br
\fIULPs\fP Maximum difference in ULPs between the two operators to consider them not equal\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP Floating-point or integer scalar types 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::prev_float (genType x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::prev_float (genType x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prev_float (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::prevFloat (genType x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_QUALIFIER \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::prevFloat (genType x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenType\fP A floating-point scalar type\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x)"
Return the previous ULP value(s) before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x, int ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SS "template<length_t L, typename T , qualifier Q> GLM_FUNC_DECL \fBvec\fP<L, T, Q> glm::prevFloat (\fBvec\fP< L, T, Q > const & x, \fBvec\fP< L, int, Q > const & ULPs)"
Return the value(s) ULP distance before the input value(s)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIL\fP Integer between 1 and 4 included that qualify the dimension of the vector 
.br
\fIT\fP Floating-point 
.br
\fIQ\fP Value from qualifier enum
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_EXT_scalar_ulp\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
