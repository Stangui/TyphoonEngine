.TH "gtx_matrix_factorisation" 3 "Sat Jul 20 2019" "Version 0.1" "Typhoon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_matrix_factorisation
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBglm::flipud\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP< C, R, T, Q > \fBglm::fliplr\fP (\fBmat\fP< C, R, T, Q > const &in)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void \fBglm::qr_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &q, \fBmat\fP< C,(C< R ? C :R), T, Q > &r)"
.br
.ti -1c
.RI "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void \fBglm::rq_decompose\fP (\fBmat\fP< C, R, T, Q > const &in, \fBmat\fP<(C< R ? C :R), R, T, Q > &r, \fBmat\fP< C,(C< R ? C :R), T, Q > &q)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Include <\fBglm/gtx/matrix_factorisation\&.hpp\fP> to use the features of this extension\&.
.PP
Functions to factor matrices in various forms 
.SH "Function Documentation"
.PP 
.SS "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<C, R, T, Q> glm::fliplr (\fBmat\fP< C, R, T, Q > const & in)"
Flips the matrix columns right and left\&.
.PP
From GLM_GTX_matrix_factorisation extension\&. 
.SS "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL \fBmat\fP<C, R, T, Q> glm::flipud (\fBmat\fP< C, R, T, Q > const & in)"
Flips the matrix rows up and down\&.
.PP
From GLM_GTX_matrix_factorisation extension\&. 
.SS "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void glm::qr_decompose (\fBmat\fP< C, R, T, Q > const & in)"
Performs QR factorisation of a matrix\&. Returns 2 matrices, q and r, such that the columns of q are orthonormal and span the same subspace than those of the input matrix, r is an upper triangular matrix, and q*r=in\&. Given an n-by-m input matrix, q has dimensions min(n,m)-by-m, and r has dimensions n-by-min(n,m)\&.
.PP
From GLM_GTX_matrix_factorisation extension\&. 
.SS "template<length_t C, length_t R, typename T , qualifier Q> GLM_FUNC_DECL void glm::rq_decompose (\fBmat\fP< C, R, T, Q > const & in)"
Performs RQ factorisation of a matrix\&. Returns 2 matrices, r and q, such that r is an upper triangular matrix, the rows of q are orthonormal and span the same subspace than those of the input matrix, and r*q=in\&. Note that in the context of RQ factorisation, the diagonal is seen as starting in the lower-right corner of the matrix, instead of the usual upper-left\&. Given an n-by-m input matrix, r has dimensions min(n,m)-by-m, and q has dimensions n-by-min(n,m)\&.
.PP
From GLM_GTX_matrix_factorisation extension\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Typhoon Engine from the source code\&.
